---
description: Git 커밋 메시지 작성 규칙
globs: 
alwaysApply: true
---

# Git 커밋 메시지 작성 규칙

## 기본 규칙
사용자는 Git 커밋 메시지를 한글로 작성하되, 다음 규칙을 따르길 원합니다:

1. **깃헙 표준 커밋 스타일 사용**
   - feat: 새로운 기능 추가
   - fix: 버그 수정
   - doc: 문서 수정
   - chore: 빌드 업무 수정, 패키지 매니저 수정
   - refactor: 코드 리팩토링
   - style: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
   - test: 테스트 코드, 리팩토링 테스트 코드 추가
   - perf: 성능 개선

2. **제목 작성 규칙**
   - 제목은 120자 이내로 한글로 작성
   - 명확하고 간결하게 변경사항을 설명

3. **본문 작성 규칙**
   - 제목에 내용을 담기 어려운 경우 본문에 상세 내용 추가
   - 본문 작성 시 bullet point로 주요 변경사항 요약
   - 각 변경사항은 명확하게 설명

4. **커밋 분리 규칙**
   - 여러 변경사항이 섞여있을 경우 커밋을 분리하여 작성
   - 논리적으로 연관된 변경사항끼리 그룹화

5. **타입 중복 처리**
   - commit types doc, feat, refactor가 한 커밋에 겹치는 경우:
     - 파일 범위별로 커밋을 분리
     - 분리가 어려운 경우 중복 타입 허용 (예: fix,doc:)
     - 커밋 상세 설명에서 각 타입별로 별도 설명

6. **Claude 코드 사이니지 제거**
   - 커밋 메시지에 Claude 코드 관련 사이니지를 절대 포함하지 않음
   - "🤖 Generated with Claude Code" 등의 문구 사용 금지
   - "Co-Authored-By: Claude" 등의 문구 사용 금지
   - Claude AI나 Anthropic 관련 언급 제외

## 커밋 메시지 예시

### 단일 타입
```
feat: 사용자 인증 기능 추가

- JWT 토큰 기반 인증 구현
- 로그인/로그아웃 API 엔드포인트 추가
- 사용자 세션 관리 기능 구현
```

### 복합 타입
```
fix,doc: 핵심 모듈의 문서화 번역 및 설정 오류 수정

doc: 문서화 문자열 한글 번역
- 설정 관리 (config.py) 문서화 한글 번역
- 의존성 주입 (dependencies.py) 문서화 한글 번역

fix: Pydantic 검증 오류 수정
- stt_v2_api_key를 선택적 필드로 변경
- 레거시 환경 변수 복원
```

## 적용 방법
- 모든 커밋 메시지는 위 규칙을 따라 작성
- `git commit -m` 명령어 사용 시 한글로 작성
- 멀티라인 메시지는 따옴표 안에서 `\n` 사용 또는 git commit 후 에디터에서 작성
- Claude 코드로 커밋 시 반드시 사이니지 관련 내용 제거 확인