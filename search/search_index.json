{"config":{"lang":["en","ko"],"separator":"[\\s\\-\\.]+","pipeline":[" "]},"docs":[{"location":"","title":"RFS Framework","text":"![RFS Framework Logo](https://img.shields.io/badge/RFS-Framework-blue?style=for-the-badge&amp;logo=python&amp;logoColor=white)  **Enterprise-Grade Reactive Functional Serverless Framework for Python**  [![Python 3.10+](https://img.shields.io/badge/Python-3.10+-blue.svg)](https://www.python.org/downloads/) [![Version](https://img.shields.io/badge/Version-4.3.0-green.svg)](https://pypi.org/project/rfs-framework/) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Documentation](https://img.shields.io/badge/docs-mkdocs-blue)](https://interactord.github.io/rfs-framework/)"},{"location":"#_1","title":"\ud83c\udfaf \ud504\ub808\uc784\uc6cc\ud06c \uc18c\uac1c","text":"<p>RFS Framework\ub294 \ud604\ub300\uc801\uc778 \uc5d4\ud130\ud504\ub77c\uc774\uc988 Python \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud55c \uc885\ud569\uc801\uc778 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ud134, \ubc18\uc751\ud615 \uc544\ud0a4\ud14d\ucc98, \uadf8\ub9ac\uace0 Google Cloud Platform\uacfc\uc758 \uc644\ubcbd\ud55c \ud1b5\ud569\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"#_2","title":"\u2728 \ud575\uc2ec \ud2b9\uc9d5","text":""},{"location":"#_3","title":"\ud83c\udfaf \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d","text":"<ul> <li>Result Pattern: \uc608\uc678 \uc5c6\ub294 \uc548\uc804\ud55c \uc5d0\ub7ec \ucc98\ub9ac</li> <li>HOF Library: Swift/Haskell \uc601\uac10\uc758 \uace0\ucc28 \ud568\uc218</li> <li>Monads: Maybe, Either, Result \ubaa8\ub098\ub4dc \uc9c0\uc6d0</li> <li>\ubd88\ubcc0\uc131: \uc21c\uc218 \ud568\uc218\uc640 \ubd88\ubcc0 \ub370\uc774\ud130 \uad6c\uc870</li> </ul>"},{"location":"#_4","title":"\u26a1 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc","text":"<ul> <li>Mono/Flux: \ube44\ub3d9\uae30 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac</li> <li>\ubc31\ud504\ub808\uc154: \uc790\ub3d9 \ud750\ub984 \uc81c\uc5b4</li> <li>30+ \uc5f0\uc0b0\uc790: map, filter, flat_map \ub4f1</li> <li>\ubcd1\ub82c \ucc98\ub9ac: \uba40\ud2f0\uc2a4\ub808\ub4dc \uc2e4\ud589 \ucee8\ud14d\uc2a4\ud2b8</li> </ul>"},{"location":"#_5","title":"\ud83d\udd12 \uc5d4\ud130\ud504\ub77c\uc774\uc988 \ubcf4\uc548","text":"<ul> <li>RBAC/ABAC: \uc5ed\ud560 \ubc0f \uc18d\uc131 \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4</li> <li>JWT \uc778\uc99d: \ud1a0\ud070 \uae30\ubc18 \uc778\uc99d \uc2dc\uc2a4\ud15c</li> <li>\ucde8\uc57d\uc810 \uc2a4\uce90\ub2dd: \uc790\ub3d9 \ubcf4\uc548 \uac80\uc0ac</li> <li>\uc554\ud638\ud654: AES-256 \ub370\uc774\ud130 \uc554\ud638\ud654</li> </ul>"},{"location":"#_6","title":"\ud83d\ude80 \ud504\ub85c\ub355\uc158 \uc900\ube44","text":"<ul> <li>\ubc30\ud3ec \uc804\ub7b5: Blue-Green, Canary, Rolling</li> <li>Circuit Breaker: \uc7a5\uc560 \uaca9\ub9ac \ud328\ud134</li> <li>\ubaa8\ub2c8\ud130\ub9c1: \uc2e4\uc2dc\uac04 \uc131\ub2a5 \uba54\ud2b8\ub9ad</li> <li>\uc790\ub3d9 \ub864\ubc31: \uccb4\ud06c\ud3ec\uc778\ud2b8 \uae30\ubc18 \ubcf5\uad6c</li> </ul>"},{"location":"#_7","title":"\ud83d\udcca \uc131\ub2a5 \uc9c0\ud45c","text":"\uba54\ud2b8\ub9ad \uac12 \ube44\uace0 \uc2dc\uc791 \uc2dc\uac04 ~50ms CLI \ucd08\uae30\ud654 \uba54\ubaa8\ub9ac \uc0ac\uc6a9 ~25MB \uae30\ubcf8 \uc2e4\ud589 \uc751\ub2f5 \uc2dc\uac04 &lt;100ms API \ud638\ucd9c \ucc98\ub9ac\ub7c9 1200 RPS \ubca4\uce58\ub9c8\ud06c \uc644\uc131\ub3c4 93% v4.3.0"},{"location":"#_8","title":"\ud83d\ude80 \ube60\ub978 \uc2dc\uc791","text":""},{"location":"#_9","title":"\uc124\uce58","text":"PyPIGitHub <pre><code># \uae30\ubcf8 \uc124\uce58\npip install rfs-framework\n\n# \ubaa8\ub4e0 \uae30\ub2a5 \ud3ec\ud568\npip install rfs-framework[all]\n</code></pre> <pre><code># \ucd5c\uc2e0 \ubc84\uc804 \uc124\uce58\npip install git+https://github.com/interactord/rfs-framework.git\n</code></pre>"},{"location":"#_10","title":"\uccab \ubc88\uc9f8 \uc608\uc81c","text":"<pre><code>from rfs import Result, Success, Failure\n\ndef divide(a: int, b: int) -&gt; Result[float, str]:\n    \"\"\"\uc548\uc804\ud55c \ub098\ub217\uc148 \uc5f0\uc0b0\"\"\"\n    if b == 0:\n        return Failure(\"Cannot divide by zero\")\n    return Success(a / b)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nresult = divide(10, 2)\nif result.is_success:\n    print(f\"\uacb0\uacfc: {result.unwrap()}\")  # \uacb0\uacfc: 5.0\nelse:\n    print(f\"\uc624\ub958: {result.unwrap_err()}\")\n</code></pre>"},{"location":"#_11","title":"\ud83d\udcda \ubb38\uc11c \uad6c\uc870","text":"<ul> <li> <p> \ud575\uc2ec \uac1c\ub150</p> <p>Result \ud328\ud134, \uc758\uc874\uc131 \uc8fc\uc785, \uc124\uc815 \uad00\ub9ac \ub4f1 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \ud575\uc2ec \uac1c\ub150\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.</p> <p> \ud575\uc2ec \uac1c\ub150 \ubcf4\uae30</p> </li> <li> <p> \ud504\ub85c\ub355\uc158</p> <p>\ubc30\ud3ec, \ubaa8\ub2c8\ud130\ub9c1, \ub864\ubc31 \ub4f1 \ud504\ub85c\ub355\uc158 \uc6b4\uc601\uc5d0 \ud544\uc694\ud55c \ubaa8\ub4e0 \uae30\ub2a5\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p> <p> \ud504\ub85c\ub355\uc158 \uac00\uc774\ub4dc</p> </li> <li> <p> \ubcf4\uc548</p> <p>\uc778\uc99d, \uc778\uac00, \ubcf4\uc548 \uac15\ud654 \ub4f1 \uc5d4\ud130\ud504\ub77c\uc774\uc988 \ubcf4\uc548 \uae30\ub2a5\uc744 \uc124\uba85\ud569\ub2c8\ub2e4.</p> <p> \ubcf4\uc548 \ubb38\uc11c</p> </li> <li> <p> API \ub808\ud37c\ub7f0\uc2a4</p> <p>\ubaa8\ub4e0 \ud074\ub798\uc2a4, \ud568\uc218, \uba54\uc11c\ub4dc\uc758 \uc0c1\uc138\ud55c API \ubb38\uc11c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p> <p> API \ubb38\uc11c</p> </li> </ul>"},{"location":"#_12","title":"\ud83d\udee0\ufe0f \uae30\uc220 \uc2a4\ud0dd","text":"<ul> <li>\uc5b8\uc5b4: Python 3.10+</li> <li>\ud0c0\uc785 \uccb4\ud06c: mypy, Pydantic v2</li> <li>\ud14c\uc2a4\ud2b8: pytest, pytest-asyncio</li> <li>\ud3ec\ub9f7\ud305: black, isort</li> <li>\ubb38\uc11c\ud654: MkDocs Material</li> <li>CI/CD: GitHub Actions</li> <li>\ud074\ub77c\uc6b0\ub4dc: Google Cloud Run</li> </ul>"},{"location":"#_13","title":"\ud83e\udd1d \uae30\uc5ec\ud558\uae30","text":"<p>RFS Framework\ub294 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc785\ub2c8\ub2e4. \uae30\uc5ec\ub97c \ud658\uc601\ud569\ub2c8\ub2e4!</p> <ul> <li>\uae30\uc5ec \uac00\uc774\ub4dc</li> <li>\uc774\uc288 \ubcf4\uace0</li> <li>\ud1a0\ub860 \ucc38\uc5ec</li> </ul>"},{"location":"#_14","title":"\ud83d\udcc4 \ub77c\uc774\uc120\uc2a4","text":"<p>MIT License - \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 LICENSE \ud30c\uc77c\uc744 \ucc38\uc870\ud558\uc138\uc694.</p> Made with \u2764\ufe0f by the RFS Framework Team"},{"location":"01-core-patterns/","title":"\ud575\uc2ec \ud328\ud134 (Core Patterns)","text":""},{"location":"01-core-patterns/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \ud575\uc2ec\uc740 \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 Result \ud328\ud134\uc785\ub2c8\ub2e4. \uc774 \ud328\ud134\uc744 \ud1b5\ud574 \uc608\uc678 \ucc98\ub9ac \uc5c6\uc774 \uc548\uc804\ud558\uace0 \uba85\uc2dc\uc801\uc778 \uc5d0\ub7ec \ucc98\ub9ac\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p>"},{"location":"01-core-patterns/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"01-core-patterns/#result","title":"Result \ud328\ud134","text":"<ul> <li>Result[T, E]: \uc131\uacf5(Success) \ub610\ub294 \uc2e4\ud328(Failure)\ub97c \ub098\ud0c0\ub0b4\ub294 \ucee8\ud14c\uc774\ub108</li> <li>Railway Oriented Programming: \uc5d0\ub7ec\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784</li> <li>\ud0c0\uc785 \uc548\uc804\uc131: \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \uc5d0\ub7ec \ucc98\ub9ac \ubcf4\uc7a5</li> </ul>"},{"location":"01-core-patterns/#monads","title":"\ubaa8\ub098\ub4dc (Monads)","text":"<ul> <li>Either: \ub450 \uac00\uc9c0 \uac00\ub2a5\ud55c \uac12 \uc911 \ud558\ub098</li> <li>Maybe: \uac12\uc774 \uc788\uac70\ub098 \uc5c6\uc74c\uc744 \ud45c\ud604</li> <li>ResultAsync: \ube44\ub3d9\uae30 Result \ud328\ud134</li> </ul>"},{"location":"01-core-patterns/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"01-core-patterns/#result_1","title":"Result \ud074\ub798\uc2a4","text":"<pre><code>from rfs.core.result import Result, Success, Failure\n\n# \ud0c0\uc785 \uc815\uc758\nResult[T, E]  # T: \uc131\uacf5 \ud0c0\uc785, E: \uc5d0\ub7ec \ud0c0\uc785\n</code></pre>"},{"location":"01-core-patterns/#_3","title":"\uc8fc\uc694 \uba54\uc11c\ub4dc","text":"\uba54\uc11c\ub4dc \uc124\uba85 \ubc18\ud658 \ud0c0\uc785 <code>map(func)</code> \uc131\uacf5 \uac12\uc744 \ubcc0\ud658 <code>Result[U, E]</code> <code>bind(func)</code> \uccb4\uc774\ub2dd (flatMap) <code>Result[U, E]</code> <code>map_error(func)</code> \uc5d0\ub7ec \uac12\uc744 \ubcc0\ud658 <code>Result[T, F]</code> <code>unwrap()</code> \uac12 \ucd94\ucd9c (\uc704\ud5d8) <code>T</code> <code>unwrap_or(default)</code> \uc548\uc804\ud55c \uac12 \ucd94\ucd9c <code>T</code> <code>is_success()</code> \uc131\uacf5 \uc5ec\ubd80 \ud655\uc778 <code>bool</code> <code>is_failure()</code> \uc2e4\ud328 \uc5ec\ubd80 \ud655\uc778 <code>bool</code>"},{"location":"01-core-patterns/#_4","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"01-core-patterns/#_5","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from rfs.core.result import Result, Success, Failure\n\ndef divide(a: float, b: float) -&gt; Result[float, str]:\n    \"\"\"\uc548\uc804\ud55c \ub098\ub217\uc148\"\"\"\n    if b == 0:\n        return Failure(\"0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n    return Success(a / b)\n\n# \uc0ac\uc6a9\nresult = divide(10, 2)\nif result.is_success():\n    print(f\"\uacb0\uacfc: {result.unwrap()}\")  # \uacb0\uacfc: 5.0\nelse:\n    print(f\"\uc5d0\ub7ec: {result.error}\")\n</code></pre>"},{"location":"01-core-patterns/#railway-pattern","title":"\uccb4\uc774\ub2dd (Railway Pattern)","text":"<pre><code>from rfs.core.result import Result, Success, Failure\n\ndef parse_int(s: str) -&gt; Result[int, str]:\n    try:\n        return Success(int(s))\n    except ValueError:\n        return Failure(f\"'{s}'\ub294 \uc720\ud6a8\ud55c \uc815\uc218\uac00 \uc544\ub2d9\ub2c8\ub2e4\")\n\ndef validate_positive(n: int) -&gt; Result[int, str]:\n    if n &gt; 0:\n        return Success(n)\n    return Failure(\"\uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n\ndef double(n: int) -&gt; Result[int, str]:\n    return Success(n * 2)\n\n# \ud30c\uc774\ud504\ub77c\uc778\nresult = (\n    parse_int(\"10\")\n    .bind(validate_positive)\n    .bind(double)\n)\n\nprint(result)  # Success(20)\n</code></pre>"},{"location":"01-core-patterns/#map-bind","title":"map\uacfc bind\uc758 \ucc28\uc774","text":"<pre><code># map: \uc77c\ubc18 \ud568\uc218\ub97c Result \ub0b4\ubd80 \uac12\uc5d0 \uc801\uc6a9\ndef add_10(x: int) -&gt; int:\n    return x + 10\n\nresult = Success(5).map(add_10)  # Success(15)\n\n# bind: Result\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uccb4\uc774\ub2dd\ndef safe_sqrt(x: float) -&gt; Result[float, str]:\n    if x &lt; 0:\n        return Failure(\"\uc74c\uc218\uc758 \uc81c\uacf1\uadfc\uc740 \uacc4\uc0b0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n    return Success(x ** 0.5)\n\nresult = Success(16.0).bind(safe_sqrt)  # Success(4.0)\n</code></pre>"},{"location":"01-core-patterns/#either","title":"Either \ud328\ud134","text":"<pre><code>from rfs.core.result import Either, Left, Right\n\ndef process_data(data: str) -&gt; Either[dict, str]:\n    \"\"\"Left: \uc5d0\ub7ec, Right: \uc131\uacf5\"\"\"\n    if not data:\n        return Left(\"\ub370\uc774\ud130\uac00 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4\")\n\n    try:\n        import json\n        parsed = json.loads(data)\n        return Right(parsed)\n    except json.JSONDecodeError as e:\n        return Left(f\"JSON \ud30c\uc2f1 \uc2e4\ud328: {e}\")\n\n# \uc0ac\uc6a9\nresult = process_data('{\"name\": \"RFS\"}')\nresult.map_right(lambda x: x[\"name\"])  # Right(\"RFS\")\n</code></pre>"},{"location":"01-core-patterns/#maybe","title":"Maybe \ud328\ud134","text":"<pre><code>from rfs.core.result import Maybe, Some, Nothing\n\ndef find_user(user_id: str) -&gt; Maybe[dict]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ucc3e\uae30\"\"\"\n    users = {\n        \"1\": {\"name\": \"\uae40\ucca0\uc218\", \"age\": 30},\n        \"2\": {\"name\": \"\uc774\uc601\ud76c\", \"age\": 25}\n    }\n\n    user = users.get(user_id)\n    return Some(user) if user else Nothing()\n\n# \uc0ac\uc6a9\nuser = find_user(\"1\")\nname = user.map(lambda u: u[\"name\"]).unwrap_or(\"Unknown\")\nprint(name)  # \uae40\ucca0\uc218\n</code></pre>"},{"location":"01-core-patterns/#resultasync-","title":"ResultAsync - \ube44\ub3d9\uae30 \ucc98\ub9ac","text":"<pre><code>from rfs.core.result import ResultAsync, Success, Failure\nimport asyncio\n\nasync def fetch_data(url: str) -&gt; Result[dict, str]:\n    \"\"\"\ube44\ub3d9\uae30 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30\"\"\"\n    try:\n        # \uc2e4\uc81c\ub85c\ub294 aiohttp \ub4f1 \uc0ac\uc6a9\n        await asyncio.sleep(0.1)  # \uc2dc\ubbac\ub808\uc774\uc158\n        return Success({\"data\": \"fetched\"})\n    except Exception as e:\n        return Failure(f\"Fetch \uc2e4\ud328: {e}\")\n\nasync def process_async():\n    result = await ResultAsync.from_coroutine(\n        fetch_data(\"https://api.example.com\")\n    )\n\n    # \ube44\ub3d9\uae30 \uccb4\uc774\ub2dd\n    processed = await result.map_async(\n        lambda data: process_data_async(data)\n    )\n\n    return processed\n</code></pre>"},{"location":"01-core-patterns/#_6","title":"\ubcf5\uc7a1\ud55c \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc608\uc81c","text":"<pre><code>from rfs.core.result import Result, Success, Failure\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Order:\n    id: str\n    items: List[str]\n    total: float\n\nclass OrderService:\n    def create_order(self, data: dict) -&gt; Result[Order, str]:\n        \"\"\"\uc8fc\ubb38 \uc0dd\uc131 with \uac80\uc99d\"\"\"\n        return (\n            self._validate_order_data(data)\n            .bind(self._check_inventory)\n            .bind(self._calculate_price)\n            .bind(self._create_order_entity)\n            .bind(self._save_to_database)\n        )\n\n    def _validate_order_data(self, data: dict) -&gt; Result[dict, str]:\n        if not data.get(\"items\"):\n            return Failure(\"\uc8fc\ubb38 \ud56d\ubaa9\uc774 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        if len(data[\"items\"]) &gt; 10:\n            return Failure(\"\ud55c \ubc88\uc5d0 10\uac1c \uc774\uc0c1 \uc8fc\ubb38\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n        return Success(data)\n\n    def _check_inventory(self, data: dict) -&gt; Result[dict, str]:\n        # \uc7ac\uace0 \ud655\uc778 \ub85c\uc9c1\n        for item in data[\"items\"]:\n            if not self._has_stock(item):\n                return Failure(f\"{item}\uc758 \uc7ac\uace0\uac00 \ubd80\uc871\ud569\ub2c8\ub2e4\")\n        return Success(data)\n\n    def _calculate_price(self, data: dict) -&gt; Result[dict, str]:\n        total = sum(self._get_price(item) for item in data[\"items\"])\n        data[\"total\"] = total\n        return Success(data)\n\n    def _create_order_entity(self, data: dict) -&gt; Result[Order, str]:\n        order = Order(\n            id=self._generate_id(),\n            items=data[\"items\"],\n            total=data[\"total\"]\n        )\n        return Success(order)\n\n    def _save_to_database(self, order: Order) -&gt; Result[Order, str]:\n        # DB \uc800\uc7a5 \ub85c\uc9c1\n        try:\n            # save to db\n            return Success(order)\n        except Exception as e:\n            return Failure(f\"DB \uc800\uc7a5 \uc2e4\ud328: {e}\")\n</code></pre>"},{"location":"01-core-patterns/#_7","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"01-core-patterns/#1-result","title":"1. \uc608\uc678 \ub300\uc2e0 Result \uc0ac\uc6a9","text":"<pre><code># \u274c \ub098\uc05c \uc608\ndef get_user(id: str) -&gt; dict:\n    user = db.find(id)\n    if not user:\n        raise UserNotFoundError(f\"User {id} not found\")\n    return user\n\n# \u2705 \uc88b\uc740 \uc608\ndef get_user(id: str) -&gt; Result[dict, str]:\n    user = db.find(id)\n    if not user:\n        return Failure(f\"User {id} not found\")\n    return Success(user)\n</code></pre>"},{"location":"01-core-patterns/#2","title":"2. \uc5d0\ub7ec \ud0c0\uc785 \uba85\uc2dc","text":"<pre><code>from enum import Enum\n\nclass ErrorType(Enum):\n    VALIDATION_ERROR = \"validation_error\"\n    NOT_FOUND = \"not_found\"\n    PERMISSION_DENIED = \"permission_denied\"\n\n@dataclass\nclass AppError:\n    type: ErrorType\n    message: str\n    details: dict = None\n\ndef process(data: dict) -&gt; Result[dict, AppError]:\n    if not data:\n        return Failure(AppError(\n            type=ErrorType.VALIDATION_ERROR,\n            message=\"\ub370\uc774\ud130\uac00 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4\"\n        ))\n    return Success(data)\n</code></pre>"},{"location":"01-core-patterns/#3","title":"3. \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131","text":"<pre><code>from rfs.core.result import pipe\n\n# \ud568\uc218 \ud30c\uc774\ud504\ub77c\uc778\nresult = pipe(\n    input_data,\n    validate,\n    transform,\n    save_to_db,\n    send_notification\n)\n\n# \ub610\ub294 \uba54\uc11c\ub4dc \uccb4\uc774\ub2dd\nresult = (\n    validate(input_data)\n    .bind(transform)\n    .bind(save_to_db)\n    .bind(send_notification)\n)\n</code></pre>"},{"location":"01-core-patterns/#_8","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"01-core-patterns/#1-unwrap","title":"1. unwrap() \uc0ac\uc6a9 \uc8fc\uc758","text":"<ul> <li><code>unwrap()</code>\uc740 \uc2e4\ud328 \uc2dc \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0b4</li> <li>\ud56d\uc0c1 <code>is_success()</code> \ud655\uc778 \ub610\ub294 <code>unwrap_or()</code> \uc0ac\uc6a9 \uad8c\uc7a5</li> </ul>"},{"location":"01-core-patterns/#2_1","title":"2. \uc5d0\ub7ec \uc815\ubcf4 \ubcf4\uc874","text":"<ul> <li>\uc5d0\ub7ec \uccb4\uc774\ub2dd \uc2dc \uc6d0\ub798 \uc5d0\ub7ec \uc815\ubcf4 \uc720\uc9c0</li> <li>\ub514\ubc84\uae45\uc744 \uc704\ud55c \ucda9\ubd84\ud55c \ucee8\ud14d\uc2a4\ud2b8 \uc81c\uacf5</li> </ul>"},{"location":"01-core-patterns/#3_1","title":"3. \ud0c0\uc785 \ud78c\ud2b8 \ud65c\uc6a9","text":"<ul> <li>\ud56d\uc0c1 Result\uc758 \ud0c0\uc785 \ud30c\ub77c\ubbf8\ud130 \uba85\uc2dc</li> <li>IDE\uc758 \uc790\ub3d9\uc644\uc131\uacfc \ud0c0\uc785 \uccb4\ud06c \ud65c\uc6a9</li> </ul>"},{"location":"01-core-patterns/#functional-programming","title":"\ud83e\uddee Functional Programming","text":"<p>RFS Framework\ub294 \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784\uc744 \uc9c0\uc6d0\ud558\uba70, \uace0\ucc28 \ud568\uc218\uc640 \ubaa8\ub098\ub4dc \ud328\ud134\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"01-core-patterns/#_9","title":"\ud575\uc2ec \uac1c\ub150","text":"<ul> <li>Pure Functions: \ubd80\uc218 \ud6a8\uacfc \uc5c6\ub294 \uc21c\uc218 \ud568\uc218</li> <li>Immutability: \ubd88\ubcc0\uc131 \ubcf4\uc7a5</li> <li>Higher-Order Functions: \ud568\uc218\ub97c \uc778\uc790\ub85c \ubc1b\uac70\ub098 \ubc18\ud658\ud558\ub294 \ud568\uc218</li> <li>Monads: \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ud575\uc2ec \ud328\ud134</li> </ul>"},{"location":"01-core-patterns/#higher-order-functions","title":"\uace0\ucc28 \ud568\uc218 (Higher-Order Functions)","text":"<pre><code>from rfs.hof import map_list, filter_list, reduce_list\n\n# \ub9ac\uc2a4\ud2b8 \ubcc0\ud658\nnumbers = [1, 2, 3, 4, 5]\nsquared = map_list(lambda x: x ** 2, numbers)  # [1, 4, 9, 16, 25]\n\n# \ud544\ud130\ub9c1\nevens = filter_list(lambda x: x % 2 == 0, numbers)  # [2, 4]\n\n# \ucd95\uc57d\ntotal = reduce_list(lambda acc, x: acc + x, 0, numbers)  # 15\n</code></pre>"},{"location":"01-core-patterns/#_10","title":"\ubaa8\ub098\ub4dc \ud328\ud134","text":"<pre><code>from rfs.hof.monads import Maybe, Either, Some, Nothing, Left, Right\n\n# Maybe \ubaa8\ub098\ub4dc\ndef safe_divide(a: int, b: int) -&gt; Maybe[float]:\n    if b == 0:\n        return Nothing()\n    return Some(a / b)\n\nresult = safe_divide(10, 2).map(lambda x: x * 2)  # Some(10.0)\n\n# Either \ubaa8\ub098\ub4dc\ndef validate_age(age: int) -&gt; Either[str, int]:\n    if age &lt; 0:\n        return Left(\"Age cannot be negative\")\n    return Right(age)\n\nresult = validate_age(25).map(lambda age: f\"Age: {age}\")  # Right(\"Age: 25\")\n</code></pre>"},{"location":"01-core-patterns/#reactive-programming","title":"\ud83c\udf0a Reactive Programming","text":"<p>\ub9ac\uc561\ud2f0\ube0c \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ube44\ub3d9\uae30 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc\uc744 \ub2e4\ub8e8\ub294 \ud328\ub7ec\ub2e4\uc784\uc785\ub2c8\ub2e4.</p>"},{"location":"01-core-patterns/#_11","title":"\ud575\uc2ec \uac1c\ub150","text":"<ul> <li>Observable Streams: \uc2dc\uac04\uc5d0 \ub530\ub77c \ubcc0\ud558\ub294 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc</li> <li>Operators: \uc2a4\ud2b8\ub9bc\uc744 \ubcc0\ud658\ud558\uace0 \uc870\uc791\ud558\ub294 \ud568\uc218\ub4e4</li> <li>Backpressure: \ub370\uc774\ud130 \uc0dd\uc0b0\uacfc \uc18c\ube44 \uc18d\ub3c4 \uc870\uc808</li> <li>Schedulers: \ube44\ub3d9\uae30 \uc791\uc5c5 \uc2e4\ud589 \ud658\uacbd</li> </ul>"},{"location":"01-core-patterns/#mono-flux","title":"Mono\uc640 Flux","text":"<pre><code>from rfs.reactive import Mono, Flux\n\n# Mono - \ub2e8\uc77c \uac12 \uc2a4\ud2b8\ub9bc\nmono = Mono.just(42).map(lambda x: x * 2)\nresult = mono.block()  # 84\n\n# Flux - \ub2e4\uc911 \uac12 \uc2a4\ud2b8\ub9bc\nflux = Flux.from_iterable([1, 2, 3, 4, 5])\neven_numbers = flux.filter(lambda x: x % 2 == 0).collect_list().block()  # [2, 4]\n</code></pre>"},{"location":"01-core-patterns/#_12","title":"\ube44\ub3d9\uae30 \ucc98\ub9ac","text":"<pre><code>import asyncio\nfrom rfs.reactive import Mono, Flux\n\nasync def async_operation(value: int) -&gt; int:\n    await asyncio.sleep(0.1)\n    return value * 2\n\n# \ube44\ub3d9\uae30 \ubcc0\ud658\nmono = Mono.just(21).flat_map(lambda x: Mono.from_future(async_operation(x)))\nresult = await mono.to_future()  # 42\n</code></pre>"},{"location":"01-core-patterns/#_13","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>HOF Library - Higher-Order Functions\uc640 \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc720\ud2f8\ub9ac\ud2f0</li> <li>\uc758\uc874\uc131 \uc8fc\uc785</li> <li>\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac</li> <li>\uc5d0\ub7ec \ucc98\ub9ac \ud328\ud134</li> </ul>"},{"location":"02-dependency-injection/","title":"\uc758\uc874\uc131 \uc8fc\uc785 (Dependency Injection)","text":""},{"location":"02-dependency-injection/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\ub294 \ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98\ub97c \uc9c0\uc6d0\ud558\ub294 \uac15\ub825\ud55c \uc5b4\ub178\ud14c\uc774\uc158 \uae30\ubc18 \uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ub290\uc2a8\ud55c \uacb0\ud569\uacfc \ub192\uc740 \uc751\uc9d1\ub3c4\ub97c \uac00\uc9c4 \ud074\ub9b0 \uc544\ud0a4\ud14d\ucc98\ub97c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"02-dependency-injection/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"02-dependency-injection/#_3","title":"\ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98","text":"<ul> <li>Port: \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc758 \uc778\ud130\ud398\uc774\uc2a4 (\ucd94\uc0c1\ud654)</li> <li>Adapter: Port\uc758 \uad6c\uccb4\uc801\uc778 \uad6c\ud604</li> <li>UseCase: \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 (Application Service)</li> <li>Controller: \ud504\ub808\uc820\ud14c\uc774\uc158 \uacc4\uce35</li> </ul>"},{"location":"02-dependency-injection/#_4","title":"\uc11c\ube44\uc2a4 \uc0dd\uba85\uc8fc\uae30","text":"<ul> <li>Singleton: \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc804\uccb4\uc5d0\uc11c \ud558\ub098\uc758 \uc778\uc2a4\ud134\uc2a4</li> <li>Prototype: \uc694\uccad\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \uc778\uc2a4\ud134\uc2a4</li> <li>Request: HTTP \uc694\uccad\ub2f9 \ud558\ub098\uc758 \uc778\uc2a4\ud134\uc2a4</li> </ul>"},{"location":"02-dependency-injection/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"02-dependency-injection/#_5","title":"\uc8fc\uc694 \ub370\ucf54\ub808\uc774\ud130","text":"\ub370\ucf54\ub808\uc774\ud130 \uc6a9\ub3c4 \uacc4\uce35 <code>@Port</code> \ub3c4\uba54\uc778 \uc778\ud130\ud398\uc774\uc2a4 \uc815\uc758 Domain <code>@Adapter</code> Port \uad6c\ud604\uccb4 Infrastructure <code>@UseCase</code> \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 Application <code>@Controller</code> HTTP \uc5d4\ub4dc\ud3ec\uc778\ud2b8 Presentation <code>@Component</code> \uc77c\ubc18 \ucef4\ud3ec\ub10c\ud2b8 Any <code>@inject</code> \uc758\uc874\uc131 \uc8fc\uc785 Any"},{"location":"02-dependency-injection/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"02-dependency-injection/#_7","title":"\uae30\ubcf8 \uc758\uc874\uc131 \uc8fc\uc785","text":"<pre><code>from rfs.core.annotations import Component, inject\nfrom rfs.core.registry import ServiceScope\n\n@Component(name=\"logger\", scope=ServiceScope.SINGLETON)\nclass Logger:\n    def log(self, message: str):\n        print(f\"[LOG] {message}\")\n\n@Component(name=\"user_service\")\nclass UserService:\n    @inject\n    def __init__(self, logger: Logger):\n        self.logger = logger\n\n    def create_user(self, name: str):\n        self.logger.log(f\"Creating user: {name}\")\n        return {\"id\": \"1\", \"name\": name}\n\n# \uc0ac\uc6a9\nfrom rfs.core.registry import get_registry\n\nregistry = get_registry()\nuser_service = registry.get(\"user_service\")\nuser_service.create_user(\"\uae40\ucca0\uc218\")\n</code></pre>"},{"location":"02-dependency-injection/#_8","title":"\ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98 \uad6c\ud604","text":"<pre><code>from abc import ABC, abstractmethod\nfrom rfs.core.annotations import Port, Adapter, UseCase, Controller\nfrom rfs.core.registry import ServiceScope\nfrom rfs.core.result import Result, Success, Failure\n\n# 1. Port \uc815\uc758 (\ub3c4\uba54\uc778 \uacc4\uce35)\n@Port(name=\"user_repository\")\nclass UserRepository(ABC):\n    \"\"\"\uc0ac\uc6a9\uc790 \uc800\uc7a5\uc18c \uc778\ud130\ud398\uc774\uc2a4\"\"\"\n\n    @abstractmethod\n    async def find_by_id(self, user_id: str) -&gt; Result[dict, str]:\n        pass\n\n    @abstractmethod\n    async def save(self, user: dict) -&gt; Result[dict, str]:\n        pass\n\n    @abstractmethod\n    async def delete(self, user_id: str) -&gt; Result[bool, str]:\n        pass\n\n# 2. Adapter \uad6c\ud604 (\uc778\ud504\ub77c \uacc4\uce35)\n@Adapter(port=\"user_repository\", scope=ServiceScope.SINGLETON)\nclass PostgresUserRepository(UserRepository):\n    \"\"\"PostgreSQL \uc0ac\uc6a9\uc790 \uc800\uc7a5\uc18c \uad6c\ud604\"\"\"\n\n    def __init__(self):\n        # \uc2e4\uc81c\ub85c\ub294 DB \uc5f0\uacb0 \uc124\uc815\n        self.db = {}  # \uc2dc\ubbac\ub808\uc774\uc158\uc6a9\n\n    async def find_by_id(self, user_id: str) -&gt; Result[dict, str]:\n        user = self.db.get(user_id)\n        if user:\n            return Success(user)\n        return Failure(f\"\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {user_id}\")\n\n    async def save(self, user: dict) -&gt; Result[dict, str]:\n        self.db[user[\"id\"]] = user\n        return Success(user)\n\n    async def delete(self, user_id: str) -&gt; Result[bool, str]:\n        if user_id in self.db:\n            del self.db[user_id]\n            return Success(True)\n        return Failure(f\"\uc0ad\uc81c\ud560 \uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {user_id}\")\n\n# 3. UseCase \uc815\uc758 (\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uacc4\uce35)\n@UseCase(dependencies=[\"user_repository\", \"email_service\"])\nclass CreateUserUseCase:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc720\uc2a4\ucf00\uc774\uc2a4\"\"\"\n\n    def __init__(self, user_repository: UserRepository, email_service):\n        self.user_repository = user_repository\n        self.email_service = email_service\n\n    async def execute(self, user_data: dict) -&gt; Result[dict, str]:\n        # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n        if not user_data.get(\"email\"):\n            return Failure(\"\uc774\uba54\uc77c\uc740 \ud544\uc218\uc785\ub2c8\ub2e4\")\n\n        # \uc0ac\uc6a9\uc790 \uc800\uc7a5\n        user = {\n            \"id\": self._generate_id(),\n            **user_data\n        }\n\n        result = await self.user_repository.save(user)\n\n        if result.is_success():\n            # \uc774\uba54\uc77c \ubc1c\uc1a1\n            await self.email_service.send_welcome_email(user[\"email\"])\n\n        return result\n\n    def _generate_id(self) -&gt; str:\n        import uuid\n        return str(uuid.uuid4())\n\n# 4. Controller \uc815\uc758 (\ud504\ub808\uc820\ud14c\uc774\uc158 \uacc4\uce35)\n@Controller(route=\"/users\", method=\"POST\")\nclass UserController:\n    \"\"\"\uc0ac\uc6a9\uc790 API \ucee8\ud2b8\ub864\ub7ec\"\"\"\n\n    def __init__(self, create_user_use_case: CreateUserUseCase):\n        self.create_user_use_case = create_user_use_case\n\n    async def create_user(self, request_data: dict) -&gt; dict:\n        result = await self.create_user_use_case.execute(request_data)\n\n        if result.is_success():\n            return {\n                \"status\": \"success\",\n                \"data\": result.unwrap()\n            }\n        else:\n            return {\n                \"status\": \"error\",\n                \"message\": result.error\n            }\n</code></pre>"},{"location":"02-dependency-injection/#_9","title":"\ud504\ub85c\ud30c\uc77c \uae30\ubc18 \uc124\uc815","text":"<pre><code>from rfs.core.annotations import Adapter, Component\nfrom rfs.core.registry import ServiceScope\n\n# \uac1c\ubc1c \ud658\uacbd\uc6a9 \uc5b4\ub311\ud130\n@Adapter(\n    port=\"payment_gateway\",\n    scope=ServiceScope.SINGLETON,\n    profile=\"development\"\n)\nclass MockPaymentGateway:\n    async def process_payment(self, amount: float) -&gt; Result:\n        print(f\"[MOCK] Processing payment: ${amount}\")\n        return Success({\"transaction_id\": \"mock_123\"})\n\n# \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc6a9 \uc5b4\ub311\ud130\n@Adapter(\n    port=\"payment_gateway\",\n    scope=ServiceScope.SINGLETON,\n    profile=\"production\"\n)\nclass StripePaymentGateway:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n\n    async def process_payment(self, amount: float) -&gt; Result:\n        # \uc2e4\uc81c Stripe API \ud638\ucd9c\n        return Success({\"transaction_id\": \"stripe_abc\"})\n\n# \ud658\uacbd\uc5d0 \ub530\ub77c \uc790\ub3d9\uc73c\ub85c \uc62c\ubc14\ub978 \uad6c\ud604\uccb4 \uc120\ud0dd\nimport os\nos.environ[\"PROFILE\"] = \"development\"  # \ub610\ub294 \"production\"\n</code></pre>"},{"location":"02-dependency-injection/#_10","title":"\uace0\uae09 \uc758\uc874\uc131 \uc8fc\uc785 \ud328\ud134","text":"<pre><code>from rfs.core.annotations import Component, inject\nfrom typing import List\n\n# 1. \ud329\ud1a0\ub9ac \ud328\ud134\n@Component(name=\"database_factory\")\nclass DatabaseFactory:\n    def create_connection(self, db_type: str):\n        if db_type == \"postgres\":\n            return PostgresConnection()\n        elif db_type == \"mongodb\":\n            return MongoConnection()\n        else:\n            raise ValueError(f\"Unknown database type: {db_type}\")\n\n# 2. \ub370\ucf54\ub808\uc774\ud130 \ud328\ud134\n@Component(name=\"cached_user_service\")\nclass CachedUserService:\n    @inject\n    def __init__(self, user_service: UserService, cache_service):\n        self.user_service = user_service\n        self.cache = cache_service\n\n    async def get_user(self, user_id: str) -&gt; Result:\n        # \uce90\uc2dc \ud655\uc778\n        cached = await self.cache.get(f\"user:{user_id}\")\n        if cached:\n            return Success(cached)\n\n        # \uce90\uc2dc \ubbf8\uc2a4 \uc2dc \uc2e4\uc81c \uc11c\ube44\uc2a4 \ud638\ucd9c\n        result = await self.user_service.get_user(user_id)\n        if result.is_success():\n            await self.cache.set(f\"user:{user_id}\", result.value)\n\n        return result\n\n# 3. \ub2e4\uc911 \uc758\uc874\uc131 \uc8fc\uc785\n@Component(name=\"notification_service\")\nclass NotificationService:\n    @inject\n    def __init__(\n        self,\n        email_service,\n        sms_service,\n        push_service,\n        user_preference_service\n    ):\n        self.email = email_service\n        self.sms = sms_service\n        self.push = push_service\n        self.preferences = user_preference_service\n\n    async def notify(self, user_id: str, message: str):\n        prefs = await self.preferences.get(user_id)\n\n        tasks = []\n        if prefs.email_enabled:\n            tasks.append(self.email.send(user_id, message))\n        if prefs.sms_enabled:\n            tasks.append(self.sms.send(user_id, message))\n        if prefs.push_enabled:\n            tasks.append(self.push.send(user_id, message))\n\n        await asyncio.gather(*tasks)\n</code></pre>"},{"location":"02-dependency-injection/#_11","title":"\uc21c\ud658 \uc758\uc874\uc131 \ud574\uacb0","text":"<pre><code>from rfs.core.annotations import Component, inject\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from .service_b import ServiceB\n\n@Component(name=\"service_a\")\nclass ServiceA:\n    def __init__(self):\n        self._service_b = None\n\n    @property\n    def service_b(self) -&gt; 'ServiceB':\n        if not self._service_b:\n            from rfs.core.registry import get_registry\n            self._service_b = get_registry().get(\"service_b\")\n        return self._service_b\n\n    def do_something(self):\n        return \"A\"\n</code></pre>"},{"location":"02-dependency-injection/#_12","title":"\uc870\uac74\ubd80 \uc758\uc874\uc131 \uc8fc\uc785","text":"<pre><code>from rfs.core.annotations import Component\nfrom rfs.core.registry import ConditionalRegistration\n\n@Component(\n    name=\"feature_service\",\n    condition=lambda: os.getenv(\"FEATURE_ENABLED\") == \"true\"\n)\nclass FeatureService:\n    \"\"\"\ud2b9\uc815 \uae30\ub2a5\uc774 \ud65c\uc131\ud654\ub41c \uacbd\uc6b0\uc5d0\ub9cc \ub4f1\ub85d\"\"\"\n    pass\n\n# \ub610\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\uc73c\ub85c\nregistry = get_registry()\n\nif config.is_premium_tier:\n    registry.register(\n        \"premium_service\",\n        PremiumService,\n        scope=ServiceScope.SINGLETON\n    )\n</code></pre>"},{"location":"02-dependency-injection/#_13","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"02-dependency-injection/#1-isp","title":"1. \uc778\ud130\ud398\uc774\uc2a4 \ubd84\ub9ac \uc6d0\uce59 (ISP)","text":"<pre><code># \u274c \ub098\uc05c \uc608 - \ub108\ubb34 \ud070 \uc778\ud130\ud398\uc774\uc2a4\n@Port(name=\"user_service\")\nclass UserService(ABC):\n    @abstractmethod\n    def create_user(self, data): pass\n    @abstractmethod\n    def delete_user(self, id): pass\n    @abstractmethod\n    def send_email(self, user): pass  # SRP \uc704\ubc18\n    @abstractmethod\n    def generate_report(self): pass  # \uad00\ub828 \uc5c6\ub294 \uae30\ub2a5\n\n# \u2705 \uc88b\uc740 \uc608 - \ubd84\ub9ac\ub41c \uc778\ud130\ud398\uc774\uc2a4\n@Port(name=\"user_repository\")\nclass UserRepository(ABC):\n    @abstractmethod\n    def create(self, data): pass\n    @abstractmethod\n    def delete(self, id): pass\n\n@Port(name=\"email_service\")\nclass EmailService(ABC):\n    @abstractmethod\n    def send(self, to, subject, body): pass\n</code></pre>"},{"location":"02-dependency-injection/#2-dip","title":"2. \uc758\uc874\uc131 \uc5ed\uc804 \uc6d0\uce59 (DIP)","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ucd94\uc0c1\ud654\uc5d0 \uc758\uc874\n@UseCase(dependencies=[\"user_repository\"])  # Port\uc5d0 \uc758\uc874\nclass GetUserUseCase:\n    def __init__(self, user_repository: UserRepository):  # \uc778\ud130\ud398\uc774\uc2a4\n        self.repo = user_repository\n</code></pre>"},{"location":"02-dependency-injection/#3","title":"3. \ud14c\uc2a4\ud2b8 \uc6a9\uc774\uc131","text":"<pre><code># \ud14c\uc2a4\ud2b8\uc6a9 Mock Adapter\n@Adapter(port=\"user_repository\", profile=\"test\")\nclass MockUserRepository(UserRepository):\n    def __init__(self):\n        self.users = {}\n\n    async def find_by_id(self, user_id: str) -&gt; Result:\n        return Success(self.users.get(user_id))\n\n# \ud14c\uc2a4\ud2b8\nasync def test_create_user():\n    registry = get_registry()\n    registry.set_profile(\"test\")\n\n    use_case = registry.get(\"create_user_use_case\")\n    result = await use_case.execute({\"name\": \"\ud14c\uc2a4\ud2b8\"})\n\n    assert result.is_success()\n</code></pre>"},{"location":"02-dependency-injection/#_14","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"02-dependency-injection/#1","title":"1. \uc21c\ud658 \uc758\uc874\uc131","text":"<ul> <li>\uc21c\ud658 \uc758\uc874\uc131 \ubc1c\uc0dd \uc2dc \uc9c0\uc5f0 \ub85c\ub529 \uc0ac\uc6a9</li> <li>\uac00\ub2a5\ud558\uba74 \uc124\uacc4\ub97c \uc7ac\uac80\ud1a0\ud558\uc5ec \uc21c\ud658 \uc758\uc874\uc131 \uc81c\uac70</li> </ul>"},{"location":"02-dependency-injection/#2","title":"2. \uc2a4\ucf54\ud504 \uad00\ub9ac","text":"<ul> <li>Singleton\uc740 \uc0c1\ud0dc\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758</li> <li>Request \uc2a4\ucf54\ud504\ub294 \uc6f9 \ucee8\ud14d\uc2a4\ud2b8\uc5d0\uc11c\ub9cc \uc0ac\uc6a9</li> </ul>"},{"location":"02-dependency-injection/#3_1","title":"3. \uba54\ubaa8\ub9ac \ub204\uc218","text":"<ul> <li>\uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108 \ub4f1\ub85d \uc2dc \uc801\uc808\ud55c \ud574\uc81c</li> <li>\ud070 \uac1d\uccb4\ub294 WeakRef \uc0ac\uc6a9 \uace0\ub824</li> </ul>"},{"location":"02-dependency-injection/#_15","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ud575\uc2ec \ud328\ud134</li> <li>\uc124\uc815 \uad00\ub9ac</li> <li>\ud2b8\ub79c\uc7ad\uc158</li> </ul>"},{"location":"03-configuration/","title":"\uc124\uc815 \uad00\ub9ac (Configuration Management)","text":""},{"location":"03-configuration/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\ub294 \ud658\uacbd\ubcc4 \uc124\uc815, \ub3d9\uc801 \uc124\uc815 \ubcc0\uacbd, \uc554\ud638\ud654\ub41c \ube44\ubc00 \uad00\ub9ac\ub97c \uc9c0\uc6d0\ud558\ub294 \uac15\ub825\ud55c \uc124\uc815 \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Pydantic v2\ub97c \uae30\ubc18\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\uc131\uacfc \uc790\ub3d9 \uac80\uc99d\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4.</p>"},{"location":"03-configuration/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"03-configuration/#_3","title":"\uc124\uc815 \uacc4\uce35","text":"<ul> <li>\ud658\uacbd \ud504\ub85c\ud30c\uc77c: development, staging, production, cloud_run</li> <li>\uc124\uc815 \uc18c\uc2a4: \ud658\uacbd \ubcc0\uc218, \ud30c\uc77c, Secret Manager, ConfigMap</li> <li>\uc6b0\uc120\uc21c\uc704: \ud658\uacbd \ubcc0\uc218 &gt; \ud30c\uc77c \uc124\uc815 &gt; \uae30\ubcf8\uac12</li> </ul>"},{"location":"03-configuration/#_4","title":"\ud0c0\uc785 \uc548\uc804\uc131","text":"<ul> <li>Pydantic \ubaa8\ub378: \uc790\ub3d9 \uac80\uc99d \ubc0f \ud0c0\uc785 \ubcc0\ud658</li> <li>\ud658\uacbd\ubcc4 \uac80\uc99d: \ud504\ub85c\ud30c\uc77c\ubcc4 \ud544\uc218 \ud544\ub4dc \uac80\uc99d</li> <li>\ub7f0\ud0c0\uc784 \uc7ac\ub85c\ub529: \uc124\uc815 \ubcc0\uacbd \uc2dc \uc790\ub3d9 \uc7ac\ub85c\ub529</li> </ul>"},{"location":"03-configuration/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"03-configuration/#configmanager","title":"ConfigManager \ud074\ub798\uc2a4","text":"<pre><code>from rfs.core.config import (\n    ConfigManager,\n    BaseConfig,\n    EnvironmentProfile,\n    ConfigSource\n)\n</code></pre>"},{"location":"03-configuration/#_5","title":"\uc8fc\uc694 \uc124\uc815 \ud0c0\uc785","text":"\ud0c0\uc785 \uc124\uba85 \uc0ac\uc6a9 \uc608 <code>BaseConfig</code> \uae30\ubcf8 \uc124\uc815 \ud074\ub798\uc2a4 \ubaa8\ub4e0 \uc124\uc815\uc758 \ubd80\ubaa8 \ud074\ub798\uc2a4 <code>DatabaseConfig</code> DB \uc5f0\uacb0 \uc124\uc815 \uc5f0\uacb0 \ud480, \ud0c0\uc784\uc544\uc6c3 <code>CacheConfig</code> \uce90\uc2dc \uc124\uc815 Redis, Memcached <code>SecurityConfig</code> \ubcf4\uc548 \uc124\uc815 JWT, \uc554\ud638\ud654 \ud0a4 <code>CloudRunConfig</code> Cloud Run \uc124\uc815 \uc790\ub3d9 \uc2a4\ucf00\uc77c\ub9c1, \ub9ac\uc804"},{"location":"03-configuration/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"03-configuration/#_7","title":"\uae30\ubcf8 \uc124\uc815 \uc815\uc758","text":"<pre><code>from pydantic import BaseSettings, Field, SecretStr\nfrom rfs.core.config import BaseConfig, EnvironmentProfile\nfrom typing import Optional\nimport os\n\nclass AppConfig(BaseConfig):\n    \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815\"\"\"\n\n    # \uae30\ubcf8 \uc124\uc815\n    app_name: str = Field(\"RFS App\", description=\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc774\ub984\")\n    version: str = Field(\"1.0.0\", description=\"\ubc84\uc804\")\n    debug: bool = Field(False, description=\"\ub514\ubc84\uadf8 \ubaa8\ub4dc\")\n\n    # \uc11c\ubc84 \uc124\uc815\n    host: str = Field(\"0.0.0.0\", description=\"\uc11c\ubc84 \ud638\uc2a4\ud2b8\")\n    port: int = Field(8000, description=\"\uc11c\ubc84 \ud3ec\ud2b8\")\n    workers: int = Field(4, description=\"\uc6cc\ucee4 \uc218\")\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\n    database_url: str = Field(\n        \"postgresql://localhost/rfs\",\n        description=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 URL\"\n    )\n    database_pool_size: int = Field(20, description=\"\uc5f0\uacb0 \ud480 \ud06c\uae30\")\n\n    # \ubcf4\uc548\n    secret_key: SecretStr = Field(..., description=\"\ube44\ubc00 \ud0a4\")\n    jwt_algorithm: str = Field(\"HS256\", description=\"JWT \uc54c\uace0\ub9ac\uc998\")\n    jwt_expire_minutes: int = Field(30, description=\"JWT \ub9cc\ub8cc \uc2dc\uac04\")\n\n    # \ud658\uacbd\ubcc4 \uac80\uc99d\n    @validator(\"workers\")\n    def validate_workers(cls, v, values):\n        if values.get(\"profile\") == EnvironmentProfile.PRODUCTION:\n            if v &lt; 2:\n                raise ValueError(\"\ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \ucd5c\uc18c 2\uac1c\uc758 \uc6cc\ucee4 \ud544\uc694\")\n        return v\n\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        case_sensitive = False\n</code></pre>"},{"location":"03-configuration/#_8","title":"\ud658\uacbd\ubcc4 \uc124\uc815","text":"<pre><code>from rfs.core.config import ConfigManager, EnvironmentProfile\n\n# \uac1c\ubc1c \ud658\uacbd \uc124\uc815\nclass DevelopmentConfig(AppConfig):\n    \"\"\"\uac1c\ubc1c \ud658\uacbd \uc124\uc815\"\"\"\n    debug: bool = True\n    host: str = \"localhost\"\n    workers: int = 1\n    database_url: str = \"postgresql://localhost/rfs_dev\"\n\n# \ud504\ub85c\ub355\uc158 \uc124\uc815\nclass ProductionConfig(AppConfig):\n    \"\"\"\ud504\ub85c\ub355\uc158 \ud658\uacbd \uc124\uc815\"\"\"\n    debug: bool = False\n    workers: int = 8\n    database_pool_size: int = 50\n\n    # SSL \uc124\uc815\n    ssl_cert_path: str = Field(..., description=\"SSL \uc778\uc99d\uc11c \uacbd\ub85c\")\n    ssl_key_path: str = Field(..., description=\"SSL \ud0a4 \uacbd\ub85c\")\n\n    # \ubaa8\ub2c8\ud130\ub9c1\n    enable_monitoring: bool = True\n    metrics_port: int = 9090\n\n# \uc124\uc815 \ub9e4\ub2c8\uc800 \ucd08\uae30\ud654\nconfig_manager = ConfigManager()\n\n# \ud658\uacbd\uc5d0 \ub530\ub978 \uc124\uc815 \ub85c\ub4dc\nif os.getenv(\"ENVIRONMENT\") == \"production\":\n    config = config_manager.load(ProductionConfig)\nelse:\n    config = config_manager.load(DevelopmentConfig)\n</code></pre>"},{"location":"03-configuration/#secret-manager","title":"Secret Manager \ud1b5\ud569","text":"<pre><code>from rfs.core.config import SecretManager\nfrom google.cloud import secretmanager\nimport json\n\nclass CloudSecretManager(SecretManager):\n    \"\"\"Google Cloud Secret Manager \ud1b5\ud569\"\"\"\n\n    def __init__(self, project_id: str):\n        self.client = secretmanager.SecretManagerServiceClient()\n        self.project_id = project_id\n\n    async def get_secret(self, secret_id: str) -&gt; str:\n        \"\"\"\ube44\ubc00 \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        name = f\"projects/{self.project_id}/secrets/{secret_id}/versions/latest\"\n        response = self.client.access_secret_version(request={\"name\": name})\n        return response.payload.data.decode(\"UTF-8\")\n\n    async def set_secret(self, secret_id: str, value: str):\n        \"\"\"\ube44\ubc00 \uac12 \uc124\uc815\"\"\"\n        parent = f\"projects/{self.project_id}\"\n        secret = self.client.create_secret(\n            request={\n                \"parent\": parent,\n                \"secret_id\": secret_id,\n                \"secret\": {\"replication\": {\"automatic\": {}}}\n            }\n        )\n\n        self.client.add_secret_version(\n            request={\n                \"parent\": secret.name,\n                \"payload\": {\"data\": value.encode(\"UTF-8\")}\n            }\n        )\n\n# \uc0ac\uc6a9 \uc608\uc81c\nasync def load_secure_config():\n    secret_manager = CloudSecretManager(\"my-project\")\n\n    # \ube44\ubc00 \uac12 \ub85c\ub4dc\n    db_password = await secret_manager.get_secret(\"db-password\")\n    api_key = await secret_manager.get_secret(\"api-key\")\n\n    # \uc124\uc815\uc5d0 \uc801\uc6a9\n    config = AppConfig(\n        database_url=f\"postgresql://user:{db_password}@host/db\",\n        secret_key=api_key\n    )\n\n    return config\n</code></pre>"},{"location":"03-configuration/#_9","title":"\ub3d9\uc801 \uc124\uc815 \uc7ac\ub85c\ub529","text":"<pre><code>from rfs.core.config import ConfigReloader, ConfigWatcher\nimport asyncio\n\nclass DynamicConfigManager:\n    \"\"\"\ub3d9\uc801 \uc124\uc815 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self, config_path: str):\n        self.config_path = config_path\n        self.config = None\n        self.reloader = ConfigReloader()\n        self.watcher = ConfigWatcher(config_path)\n        self.callbacks = []\n\n    async def start(self):\n        \"\"\"\uc124\uc815 \uac10\uc2dc \uc2dc\uc791\"\"\"\n        # \ucd08\uae30 \ub85c\ub4dc\n        self.config = await self.load_config()\n\n        # \ubcc0\uacbd \uac10\uc2dc\n        self.watcher.on_change(self.on_config_change)\n        await self.watcher.start()\n\n    async def load_config(self) -&gt; AppConfig:\n        \"\"\"\uc124\uc815 \ud30c\uc77c \ub85c\ub4dc\"\"\"\n        import yaml\n\n        with open(self.config_path) as f:\n            data = yaml.safe_load(f)\n\n        return AppConfig(**data)\n\n    async def on_config_change(self, event):\n        \"\"\"\uc124\uc815 \ubcc0\uacbd \ucc98\ub9ac\"\"\"\n        print(f\"\uc124\uc815 \ud30c\uc77c \ubcc0\uacbd \uac10\uc9c0: {event}\")\n\n        try:\n            # \uc0c8 \uc124\uc815 \ub85c\ub4dc\n            new_config = await self.load_config()\n\n            # \uac80\uc99d\n            if self.validate_config(new_config):\n                old_config = self.config\n                self.config = new_config\n\n                # \ucf5c\ubc31 \uc2e4\ud589\n                for callback in self.callbacks:\n                    await callback(old_config, new_config)\n\n                print(\"\uc124\uc815 \uc7ac\ub85c\ub529 \uc644\ub8cc\")\n            else:\n                print(\"\uc124\uc815 \uac80\uc99d \uc2e4\ud328\")\n\n        except Exception as e:\n            print(f\"\uc124\uc815 \uc7ac\ub85c\ub529 \uc2e4\ud328: {e}\")\n\n    def validate_config(self, config: AppConfig) -&gt; bool:\n        \"\"\"\uc124\uc815 \uac80\uc99d\"\"\"\n        # \ucee4\uc2a4\ud140 \uac80\uc99d \ub85c\uc9c1\n        if config.workers &lt; 1:\n            return False\n\n        if config.port &lt; 1024 and not config.debug:\n            return False\n\n        return True\n\n    def on_reload(self, callback):\n        \"\"\"\uc7ac\ub85c\ub529 \ucf5c\ubc31 \ub4f1\ub85d\"\"\"\n        self.callbacks.append(callback)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nasync def main():\n    manager = DynamicConfigManager(\"config.yaml\")\n\n    # \uc7ac\ub85c\ub529 \ucf5c\ubc31 \ub4f1\ub85d\n    async def on_config_reload(old, new):\n        print(f\"\uc124\uc815 \ubcc0\uacbd: {old.workers} -&gt; {new.workers} workers\")\n        # \uc6cc\ucee4 \uc7ac\uc2dc\uc791 \ub4f1\uc758 \uc791\uc5c5\n\n    manager.on_reload(on_config_reload)\n\n    # \uac10\uc2dc \uc2dc\uc791\n    await manager.start()\n\n    # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2e4\ud589\n    while True:\n        print(f\"\ud604\uc7ac \uc124\uc815: {manager.config.app_name}\")\n        await asyncio.sleep(10)\n</code></pre>"},{"location":"03-configuration/#feature-flags","title":"Feature Flags (\uae30\ub2a5 \ud50c\ub798\uadf8)","text":"<pre><code>from rfs.core.config import FeatureFlags\nfrom enum import Enum\nfrom typing import Dict, Any\n\nclass Feature(str, Enum):\n    \"\"\"\uae30\ub2a5 \ud50c\ub798\uadf8 \uc815\uc758\"\"\"\n    NEW_UI = \"new_ui\"\n    BETA_API = \"beta_api\"\n    ADVANCED_SEARCH = \"advanced_search\"\n    DARK_MODE = \"dark_mode\"\n\nclass FeatureFlagManager:\n    \"\"\"\uae30\ub2a5 \ud50c\ub798\uadf8 \uad00\ub9ac\"\"\"\n\n    def __init__(self):\n        self.flags: Dict[Feature, bool] = {}\n        self.user_overrides: Dict[str, Dict[Feature, bool]] = {}\n        self.rollout_percentages: Dict[Feature, int] = {}\n\n    def set_flag(self, feature: Feature, enabled: bool):\n        \"\"\"\uc804\uc5ed \ud50c\ub798\uadf8 \uc124\uc815\"\"\"\n        self.flags[feature] = enabled\n\n    def set_rollout(self, feature: Feature, percentage: int):\n        \"\"\"\uc810\uc9c4\uc801 \ub864\uc544\uc6c3 \uc124\uc815\"\"\"\n        self.rollout_percentages[feature] = percentage\n\n    def is_enabled(\n        self,\n        feature: Feature,\n        user_id: Optional[str] = None,\n        context: Optional[Dict[str, Any]] = None\n    ) -&gt; bool:\n        \"\"\"\uae30\ub2a5 \ud65c\uc131\ud654 \uc5ec\ubd80 \ud655\uc778\"\"\"\n\n        # \uc0ac\uc6a9\uc790\ubcc4 \uc624\ubc84\ub77c\uc774\ub4dc \ud655\uc778\n        if user_id and user_id in self.user_overrides:\n            if feature in self.user_overrides[user_id]:\n                return self.user_overrides[user_id][feature]\n\n        # \ub864\uc544\uc6c3 \ud37c\uc13c\ud2f0\uc9c0 \ud655\uc778\n        if feature in self.rollout_percentages:\n            percentage = self.rollout_percentages[feature]\n            if user_id:\n                # \uc0ac\uc6a9\uc790 ID \uae30\ubc18 \ud574\uc2dc\ub85c \uc77c\uad00\ub41c \ub864\uc544\uc6c3\n                import hashlib\n                hash_val = int(hashlib.md5(\n                    f\"{feature}:{user_id}\".encode()\n                ).hexdigest(), 16)\n                return (hash_val % 100) &lt; percentage\n\n        # \uc804\uc5ed \ud50c\ub798\uadf8 \ud655\uc778\n        return self.flags.get(feature, False)\n\n    def enable_for_user(self, user_id: str, feature: Feature):\n        \"\"\"\ud2b9\uc815 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uae30\ub2a5 \ud65c\uc131\ud654\"\"\"\n        if user_id not in self.user_overrides:\n            self.user_overrides[user_id] = {}\n        self.user_overrides[user_id][feature] = True\n\n# \uc0ac\uc6a9 \uc608\uc81c\nflags = FeatureFlagManager()\n\n# \uc804\uc5ed \uc124\uc815\nflags.set_flag(Feature.DARK_MODE, True)\n\n# \uc810\uc9c4\uc801 \ub864\uc544\uc6c3 (30% \uc0ac\uc6a9\uc790)\nflags.set_rollout(Feature.NEW_UI, 30)\n\n# \ubca0\ud0c0 \ud14c\uc2a4\ud130\uc5d0\uac8c\ub9cc \ud65c\uc131\ud654\nflags.enable_for_user(\"beta_user_123\", Feature.BETA_API)\n\n# \ud655\uc778\nif flags.is_enabled(Feature.NEW_UI, user_id=\"user_456\"):\n    print(\"\uc0c8 UI \ud45c\uc2dc\")\nelse:\n    print(\"\uae30\uc874 UI \ud45c\uc2dc\")\n</code></pre>"},{"location":"03-configuration/#_10","title":"\uc124\uc815 \uac80\uc99d \ubc0f \uc2a4\ud0a4\ub9c8","text":"<pre><code>from pydantic import validator, root_validator\nfrom typing import Optional\n\nclass ValidatedConfig(BaseConfig):\n    \"\"\"\uac80\uc99d\ub41c \uc124\uc815\"\"\"\n\n    # \ud544\ub4dc \uc815\uc758\n    email: str\n    url: str\n    port: int\n    rate_limit: int\n\n    # \uc774\uba54\uc77c \uac80\uc99d\n    @validator(\"email\")\n    def validate_email(cls, v):\n        import re\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n        if not re.match(pattern, v):\n            raise ValueError(f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c: {v}\")\n        return v\n\n    # URL \uac80\uc99d\n    @validator(\"url\")\n    def validate_url(cls, v):\n        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 URL: {v}\")\n        return v\n\n    # \ud3ec\ud2b8 \ubc94\uc704 \uac80\uc99d\n    @validator(\"port\")\n    def validate_port(cls, v):\n        if not 1 &lt;= v &lt;= 65535:\n            raise ValueError(f\"\ud3ec\ud2b8\ub294 1-65535 \ubc94\uc704\uc5ec\uc57c \ud568: {v}\")\n        return v\n\n    # \ubcf5\ud569 \uac80\uc99d\n    @root_validator\n    def validate_combination(cls, values):\n        port = values.get(\"port\")\n        url = values.get(\"url\")\n\n        if port and url:\n            if port &lt; 1024 and not url.startswith(\"https://\"):\n                raise ValueError(\"1024 \ubbf8\ub9cc \ud3ec\ud2b8\ub294 HTTPS \ud544\uc694\")\n\n        return values\n</code></pre>"},{"location":"03-configuration/#_11","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"03-configuration/#1","title":"1. \ud658\uacbd \ubd84\ub9ac","text":"<pre><code># \ud658\uacbd\ubcc4 \uc124\uc815 \ud30c\uc77c\n# config/\n#   \u251c\u2500\u2500 base.py      # \uacf5\ud1b5 \uc124\uc815\n#   \u251c\u2500\u2500 dev.py       # \uac1c\ubc1c \ud658\uacbd\n#   \u251c\u2500\u2500 staging.py   # \uc2a4\ud14c\uc774\uc9d5\n#   \u2514\u2500\u2500 prod.py      # \ud504\ub85c\ub355\uc158\n\n# base.py\nclass BaseConfig:\n    APP_NAME = \"RFS\"\n    VERSION = \"1.0.0\"\n\n# dev.py\nfrom .base import BaseConfig\n\nclass DevelopmentConfig(BaseConfig):\n    DEBUG = True\n    DATABASE_URL = \"sqlite:///dev.db\"\n\n# prod.py\nfrom .base import BaseConfig\n\nclass ProductionConfig(BaseConfig):\n    DEBUG = False\n    DATABASE_URL = os.getenv(\"DATABASE_URL\")\n</code></pre>"},{"location":"03-configuration/#2","title":"2. \ube44\ubc00 \uad00\ub9ac","text":"<pre><code># \u274c \ub098\uc05c \uc608 - \ud558\ub4dc\ucf54\ub529\nAPI_KEY = \"sk-1234567890abcdef\"\n\n# \u2705 \uc88b\uc740 \uc608 - \ud658\uacbd \ubcc0\uc218/Secret Manager\nAPI_KEY = os.getenv(\"API_KEY\")\n# \ub610\ub294\nAPI_KEY = await secret_manager.get_secret(\"api-key\")\n</code></pre>"},{"location":"03-configuration/#3","title":"3. \uc124\uc815 \uce90\uc2f1","text":"<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=1)\ndef get_config() -&gt; AppConfig:\n    \"\"\"\uc124\uc815 \uc2f1\uae00\ud1a4\"\"\"\n    return AppConfig()\n\n# \uc0ac\uc6a9\nconfig = get_config()\n</code></pre>"},{"location":"03-configuration/#_12","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"03-configuration/#1_1","title":"1. \ube44\ubc00 \ub178\ucd9c \ubc29\uc9c0","text":"<ul> <li>\uc808\ub300 \ube44\ubc00 \ud0a4\ub97c \ucf54\ub4dc\uc5d0 \ud558\ub4dc\ucf54\ub529\ud558\uc9c0 \uc54a\uc74c</li> <li>.env \ud30c\uc77c\uc744 .gitignore\uc5d0 \ucd94\uac00</li> <li>\ub85c\uadf8\uc5d0 \ube44\ubc00 \uc815\ubcf4 \ucd9c\ub825 \uae08\uc9c0</li> </ul>"},{"location":"03-configuration/#2_1","title":"2. \ud0c0\uc785 \uc548\uc804\uc131","text":"<ul> <li>\ubaa8\ub4e0 \uc124\uc815 \ud544\ub4dc\uc5d0 \ud0c0\uc785 \ud78c\ud2b8 \uc0ac\uc6a9</li> <li>Pydantic \uac80\uc99d \ud65c\uc6a9</li> <li>\ub7f0\ud0c0\uc784 \ud0c0\uc785 \uccb4\ud06c</li> </ul>"},{"location":"03-configuration/#3_1","title":"3. \uc124\uc815 \uc7ac\ub85c\ub529","text":"<ul> <li>\uc7ac\ub85c\ub529 \uc2dc \uc11c\ube44\uc2a4 \uc911\ub2e8 \ucd5c\uc18c\ud654</li> <li>\ub864\ubc31 \uba54\ucee4\ub2c8\uc998 \uc900\ube44</li> <li>\uc124\uc815 \ubcc0\uacbd \uc774\ub825 \uad00\ub9ac</li> </ul>"},{"location":"03-configuration/#_13","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ud658\uacbd \ud504\ub85c\ud30c\uc77c</li> <li>\ube44\ubc00 \uad00\ub9ac</li> <li>\ubaa8\ub2c8\ud130\ub9c1</li> </ul>"},{"location":"04-transactions/","title":"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac (Transaction Management)","text":""},{"location":"04-transactions/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158, \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158, Saga \ud328\ud134\uc744 \uc9c0\uc6d0\ud558\ub294 \ud3ec\uad04\uc801\uc778 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Result \ud328\ud134\uacfc \ud1b5\ud569\ub418\uc5b4 \uc548\uc804\ud558\uace0 \uba85\uc2dc\uc801\uc778 \ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p>"},{"location":"04-transactions/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"04-transactions/#_3","title":"\ud2b8\ub79c\uc7ad\uc158 \ud328\ud134","text":"<ul> <li>\ub85c\uceec \ud2b8\ub79c\uc7ad\uc158: \ub2e8\uc77c \ub370\uc774\ud130\ubca0\uc774\uc2a4 ACID \ubcf4\uc7a5</li> <li>\ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158: 2PC (Two-Phase Commit) \ud504\ub85c\ud1a0\ucf5c</li> <li>Saga \ud328\ud134: \uc774\ubca4\ud2b8 \uae30\ubc18 \ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158</li> <li>Outbox \ud328\ud134: \ud2b8\ub79c\uc7ad\uc158\uacfc \uc774\ubca4\ud2b8 \ubc1c\ud589 \uc77c\uad00\uc131</li> </ul>"},{"location":"04-transactions/#acid","title":"ACID \uc18d\uc131","text":"<ul> <li>Atomicity: \ubaa8\ub450 \uc131\uacf5\ud558\uac70\ub098 \ubaa8\ub450 \uc2e4\ud328</li> <li>Consistency: \ub370\uc774\ud130 \ubb34\uacb0\uc131 \uc720\uc9c0</li> <li>Isolation: \ud2b8\ub79c\uc7ad\uc158 \uac04 \uaca9\ub9ac</li> <li>Durability: \uc601\uad6c \uc800\uc7a5 \ubcf4\uc7a5</li> </ul>"},{"location":"04-transactions/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"04-transactions/#transactionmanager","title":"TransactionManager \ud074\ub798\uc2a4","text":"<pre><code>from rfs.core.transactions import (\n    TransactionManager,\n    Transaction,\n    TransactionScope,\n    IsolationLevel,\n    TransactionResult\n)\n</code></pre>"},{"location":"04-transactions/#_4","title":"\uc8fc\uc694 \uaca9\ub9ac \uc218\uc900","text":"\ub808\ubca8 \uc124\uba85 \uc0ac\uc6a9 \uc2dc\uae30 <code>READ_UNCOMMITTED</code> \ucee4\ubc0b\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130 \uc77d\uae30 \uac00\ub2a5 \uac70\uc758 \uc0ac\uc6a9 \uc548 \ud568 <code>READ_COMMITTED</code> \ucee4\ubc0b\ub41c \ub370\uc774\ud130\ub9cc \uc77d\uae30 \uae30\ubcf8\uac12 <code>REPEATABLE_READ</code> \ud2b8\ub79c\uc7ad\uc158 \uc911 \uac19\uc740 \ub370\uc774\ud130 \ubcf4\uc7a5 \uc77c\uad00\uc131 \uc911\uc694 <code>SERIALIZABLE</code> \uc644\uc804\ud55c \uaca9\ub9ac \ucd5c\uace0 \uc218\uc900 \uaca9\ub9ac"},{"location":"04-transactions/#_5","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"04-transactions/#_6","title":"\uae30\ubcf8 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac","text":"<pre><code>from rfs.core.transactions import TransactionManager, transactional\nfrom rfs.core.result import Result, Success, Failure\nfrom typing import Optional\nimport asyncpg\n\nclass DatabaseTransaction:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\"\"\"\n\n    def __init__(self, connection_pool):\n        self.pool = connection_pool\n        self.transaction_manager = TransactionManager()\n\n    @transactional\n    async def transfer_money(\n        self,\n        from_account: str,\n        to_account: str,\n        amount: float\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uacc4\uc88c \uc774\uccb4 \ud2b8\ub79c\uc7ad\uc158\"\"\"\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                try:\n                    # 1. \ucd9c\uae08 \uacc4\uc88c \ud655\uc778\n                    sender = await conn.fetchrow(\n                        \"SELECT balance FROM accounts WHERE id = $1\",\n                        from_account\n                    )\n\n                    if not sender:\n                        return Failure(\"\ucd9c\uae08 \uacc4\uc88c\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n                    if sender['balance'] &lt; amount:\n                        return Failure(\"\uc794\uc561 \ubd80\uc871\")\n\n                    # 2. \ucd9c\uae08\n                    await conn.execute(\n                        \"UPDATE accounts SET balance = balance - $1 WHERE id = $2\",\n                        amount, from_account\n                    )\n\n                    # 3. \uc785\uae08\n                    await conn.execute(\n                        \"UPDATE accounts SET balance = balance + $1 WHERE id = $2\",\n                        amount, to_account\n                    )\n\n                    # 4. \uac70\ub798 \uae30\ub85d\n                    transaction_id = await conn.fetchval(\n                        \"\"\"INSERT INTO transactions \n                           (from_account, to_account, amount, status)\n                           VALUES ($1, $2, $3, 'completed')\n                           RETURNING id\"\"\",\n                        from_account, to_account, amount\n                    )\n\n                    return Success({\n                        \"transaction_id\": transaction_id,\n                        \"amount\": amount,\n                        \"status\": \"completed\"\n                    })\n\n                except Exception as e:\n                    # \uc790\ub3d9 \ub864\ubc31\n                    return Failure(f\"\ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328: {str(e)}\")\n</code></pre>"},{"location":"04-transactions/#2pc","title":"\ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 (2PC)","text":"<pre><code>from rfs.core.transactions import DistributedTransaction, Participant\nfrom enum import Enum\n\nclass TransactionPhase(Enum):\n    PREPARE = \"prepare\"\n    COMMIT = \"commit\"\n    ROLLBACK = \"rollback\"\n\nclass TwoPhaseCommitManager:\n    \"\"\"2PC \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.participants = []\n        self.transaction_log = []\n\n    async def execute_distributed_transaction(\n        self,\n        operations: list\n    ) -&gt; Result[dict, str]:\n        \"\"\"\ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud589\"\"\"\n\n        transaction_id = self.generate_transaction_id()\n        prepared_participants = []\n\n        try:\n            # Phase 1: Prepare\n            for operation in operations:\n                participant = operation['participant']\n                action = operation['action']\n\n                prepare_result = await participant.prepare(\n                    transaction_id,\n                    action\n                )\n\n                if prepare_result.is_failure():\n                    # Prepare \uc2e4\ud328 - \ubaa8\ub450 \ub864\ubc31\n                    await self._rollback_all(prepared_participants, transaction_id)\n                    return Failure(f\"Prepare \uc2e4\ud328: {prepare_result.error}\")\n\n                prepared_participants.append(participant)\n                self.log_phase(transaction_id, participant, TransactionPhase.PREPARE)\n\n            # Phase 2: Commit\n            commit_results = []\n            for participant in prepared_participants:\n                commit_result = await participant.commit(transaction_id)\n\n                if commit_result.is_failure():\n                    # Commit \uc2e4\ud328 - \ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \ud544\uc694\n                    return await self._handle_commit_failure(\n                        transaction_id,\n                        prepared_participants,\n                        participant\n                    )\n\n                commit_results.append(commit_result.value)\n                self.log_phase(transaction_id, participant, TransactionPhase.COMMIT)\n\n            return Success({\n                \"transaction_id\": transaction_id,\n                \"status\": \"committed\",\n                \"results\": commit_results\n            })\n\n        except Exception as e:\n            await self._rollback_all(prepared_participants, transaction_id)\n            return Failure(f\"\ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328: {str(e)}\")\n\n    async def _rollback_all(\n        self,\n        participants: list,\n        transaction_id: str\n    ):\n        \"\"\"\ubaa8\ub4e0 \ucc38\uc5ec\uc790 \ub864\ubc31\"\"\"\n        for participant in participants:\n            try:\n                await participant.rollback(transaction_id)\n                self.log_phase(transaction_id, participant, TransactionPhase.ROLLBACK)\n            except Exception as e:\n                # \ub864\ubc31 \uc2e4\ud328 \ub85c\uae45\n                print(f\"\ub864\ubc31 \uc2e4\ud328: {participant.name} - {e}\")\n\n    def generate_transaction_id(self) -&gt; str:\n        import uuid\n        return str(uuid.uuid4())\n\n    def log_phase(\n        self,\n        transaction_id: str,\n        participant,\n        phase: TransactionPhase\n    ):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \ub85c\uadf8 \uae30\ub85d\"\"\"\n        self.transaction_log.append({\n            \"transaction_id\": transaction_id,\n            \"participant\": participant.name,\n            \"phase\": phase.value,\n            \"timestamp\": datetime.now()\n        })\n</code></pre>"},{"location":"04-transactions/#saga","title":"Saga \ud328\ud134 \uad6c\ud604","text":"<pre><code>from rfs.core.transactions import Saga, SagaStep, CompensationAction\nfrom typing import List, Callable\nimport asyncio\n\nclass OrderSaga:\n    \"\"\"\uc8fc\ubb38 \ucc98\ub9ac Saga\"\"\"\n\n    def __init__(self):\n        self.steps: List[SagaStep] = []\n        self.compensation_stack = []\n\n    async def execute_order(\n        self,\n        order_data: dict\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uc8fc\ubb38 Saga \uc2e4\ud589\"\"\"\n\n        # Saga \ub2e8\uacc4 \uc815\uc758\n        self.steps = [\n            SagaStep(\n                name=\"reserve_inventory\",\n                action=self.reserve_inventory,\n                compensation=self.cancel_inventory_reservation\n            ),\n            SagaStep(\n                name=\"process_payment\",\n                action=self.process_payment,\n                compensation=self.refund_payment\n            ),\n            SagaStep(\n                name=\"create_shipment\",\n                action=self.create_shipment,\n                compensation=self.cancel_shipment\n            ),\n            SagaStep(\n                name=\"send_notification\",\n                action=self.send_notification,\n                compensation=None  # \ubcf4\uc0c1 \ubd88\ud544\uc694\n            )\n        ]\n\n        context = {\"order\": order_data}\n\n        # Saga \uc2e4\ud589\n        for step in self.steps:\n            result = await step.action(context)\n\n            if result.is_success():\n                # \uc131\uacf5 - \ubcf4\uc0c1 \uc561\uc158 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\n                if step.compensation:\n                    self.compensation_stack.append(\n                        (step.compensation, context.copy())\n                    )\n\n                # \ucee8\ud14d\uc2a4\ud2b8 \uc5c5\ub370\uc774\ud2b8\n                context.update(result.value)\n            else:\n                # \uc2e4\ud328 - \ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud589\n                await self.compensate()\n                return Failure(f\"Saga \uc2e4\ud328: {step.name} - {result.error}\")\n\n        return Success({\n            \"order_id\": context.get(\"order_id\"),\n            \"status\": \"completed\",\n            \"details\": context\n        })\n\n    async def compensate(self):\n        \"\"\"\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud589\"\"\"\n        print(\"\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791...\")\n\n        # \uc5ed\uc21c\uc73c\ub85c \ubcf4\uc0c1 \uc2e4\ud589\n        while self.compensation_stack:\n            compensation_action, context = self.compensation_stack.pop()\n            try:\n                await compensation_action(context)\n                print(f\"\ubcf4\uc0c1 \uc644\ub8cc: {compensation_action.__name__}\")\n            except Exception as e:\n                print(f\"\ubcf4\uc0c1 \uc2e4\ud328: {compensation_action.__name__} - {e}\")\n                # \ubcf4\uc0c1 \uc2e4\ud328\ub294 \ub85c\uae45\ud558\uace0 \uacc4\uc18d \uc9c4\ud589\n\n    # Saga \uc561\uc158\ub4e4\n    async def reserve_inventory(self, context: dict) -&gt; Result:\n        \"\"\"\uc7ac\uace0 \uc608\uc57d\"\"\"\n        order = context[\"order\"]\n        # \uc7ac\uace0 \uc11c\ube44\uc2a4 \ud638\ucd9c\n        print(f\"\uc7ac\uace0 \uc608\uc57d: {order['product_id']}\")\n        return Success({\"reservation_id\": \"res_123\"})\n\n    async def cancel_inventory_reservation(self, context: dict):\n        \"\"\"\uc7ac\uace0 \uc608\uc57d \ucde8\uc18c\"\"\"\n        reservation_id = context.get(\"reservation_id\")\n        print(f\"\uc7ac\uace0 \uc608\uc57d \ucde8\uc18c: {reservation_id}\")\n\n    async def process_payment(self, context: dict) -&gt; Result:\n        \"\"\"\uacb0\uc81c \ucc98\ub9ac\"\"\"\n        order = context[\"order\"]\n        print(f\"\uacb0\uc81c \ucc98\ub9ac: {order['amount']}\")\n        return Success({\"payment_id\": \"pay_456\"})\n\n    async def refund_payment(self, context: dict):\n        \"\"\"\uacb0\uc81c \ud658\ubd88\"\"\"\n        payment_id = context.get(\"payment_id\")\n        print(f\"\uacb0\uc81c \ud658\ubd88: {payment_id}\")\n\n    async def create_shipment(self, context: dict) -&gt; Result:\n        \"\"\"\ubc30\uc1a1 \uc0dd\uc131\"\"\"\n        print(\"\ubc30\uc1a1 \uc900\ube44\")\n        return Success({\"shipment_id\": \"ship_789\"})\n\n    async def cancel_shipment(self, context: dict):\n        \"\"\"\ubc30\uc1a1 \ucde8\uc18c\"\"\"\n        shipment_id = context.get(\"shipment_id\")\n        print(f\"\ubc30\uc1a1 \ucde8\uc18c: {shipment_id}\")\n\n    async def send_notification(self, context: dict) -&gt; Result:\n        \"\"\"\uc54c\ub9bc \ubc1c\uc1a1\"\"\"\n        print(\"\uc8fc\ubb38 \uc644\ub8cc \uc54c\ub9bc \ubc1c\uc1a1\")\n        return Success({\"notification_sent\": True})\n</code></pre>"},{"location":"04-transactions/#outbox","title":"Outbox \ud328\ud134","text":"<pre><code>from rfs.core.transactions import OutboxPattern\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport json\n\n@dataclass\nclass OutboxEvent:\n    \"\"\"Outbox \uc774\ubca4\ud2b8\"\"\"\n    id: str\n    aggregate_id: str\n    event_type: str\n    payload: dict\n    created_at: datetime\n    processed: bool = False\n\nclass TransactionalOutbox:\n    \"\"\"\ud2b8\ub79c\uc7ad\uc154\ub110 \uc544\uc6c3\ubc15\uc2a4 \ud328\ud134\"\"\"\n\n    def __init__(self, db_connection):\n        self.conn = db_connection\n\n    async def execute_with_events(\n        self,\n        business_logic: Callable,\n        events: List[dict]\n    ) -&gt; Result[dict, str]:\n        \"\"\"\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uacfc \uc774\ubca4\ud2b8\ub97c \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac\"\"\"\n\n        async with self.conn.transaction():\n            try:\n                # 1. \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc2e4\ud589\n                result = await business_logic()\n\n                if result.is_failure():\n                    raise Exception(result.error)\n\n                # 2. Outbox\uc5d0 \uc774\ubca4\ud2b8 \uc800\uc7a5\n                for event in events:\n                    await self.conn.execute(\n                        \"\"\"INSERT INTO outbox_events \n                           (id, aggregate_id, event_type, payload, created_at)\n                           VALUES ($1, $2, $3, $4, $5)\"\"\",\n                        event['id'],\n                        event['aggregate_id'],\n                        event['event_type'],\n                        json.dumps(event['payload']),\n                        datetime.now()\n                    )\n\n                return Success({\n                    \"result\": result.value,\n                    \"events_queued\": len(events)\n                })\n\n            except Exception as e:\n                # \ud2b8\ub79c\uc7ad\uc158 \uc790\ub3d9 \ub864\ubc31\n                return Failure(f\"\ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328: {str(e)}\")\n\n    async def process_outbox_events(self):\n        \"\"\"Outbox \uc774\ubca4\ud2b8 \ucc98\ub9ac (\ubcc4\ub3c4 \ud504\ub85c\uc138\uc2a4)\"\"\"\n\n        while True:\n            # \ubbf8\ucc98\ub9ac \uc774\ubca4\ud2b8 \uc870\ud68c\n            events = await self.conn.fetch(\n                \"\"\"SELECT * FROM outbox_events \n                   WHERE processed = false \n                   ORDER BY created_at \n                   LIMIT 100\"\"\"\n            )\n\n            for event in events:\n                try:\n                    # \uc774\ubca4\ud2b8 \ubc1c\ud589\n                    await self.publish_event(event)\n\n                    # \ucc98\ub9ac \uc644\ub8cc \ud45c\uc2dc\n                    await self.conn.execute(\n                        \"UPDATE outbox_events SET processed = true WHERE id = $1\",\n                        event['id']\n                    )\n\n                except Exception as e:\n                    print(f\"\uc774\ubca4\ud2b8 \ubc1c\ud589 \uc2e4\ud328: {event['id']} - {e}\")\n                    # \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\n\n            await asyncio.sleep(1)  # 1\ucd08 \ub300\uae30\n\n    async def publish_event(self, event):\n        \"\"\"\uc774\ubca4\ud2b8 \ubc1c\ud589\"\"\"\n        # \uba54\uc2dc\uc9c0 \ud050\uc5d0 \ubc1c\ud589\n        print(f\"\uc774\ubca4\ud2b8 \ubc1c\ud589: {event['event_type']}\")\n</code></pre>"},{"location":"04-transactions/#_7","title":"\ud2b8\ub79c\uc7ad\uc158 \uc2a4\ucf54\ud504","text":"<pre><code>from rfs.core.transactions import TransactionScope, transaction_scope\nfrom contextlib import asynccontextmanager\n\nclass TransactionalService:\n    \"\"\"\ud2b8\ub79c\uc7ad\uc154\ub110 \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self, db_pool):\n        self.pool = db_pool\n\n    @asynccontextmanager\n    async def transaction_scope(\n        self,\n        isolation_level=IsolationLevel.READ_COMMITTED\n    ):\n        \"\"\"\ud2b8\ub79c\uc7ad\uc158 \uc2a4\ucf54\ud504 \uad00\ub9ac\"\"\"\n        conn = await self.pool.acquire()\n        transaction = conn.transaction(isolation=isolation_level)\n\n        try:\n            await transaction.start()\n            yield conn\n            await transaction.commit()\n        except Exception:\n            await transaction.rollback()\n            raise\n        finally:\n            await self.pool.release(conn)\n\n    async def complex_operation(self) -&gt; Result:\n        \"\"\"\ubcf5\uc7a1\ud55c \ud2b8\ub79c\uc7ad\uc158 \uc791\uc5c5\"\"\"\n\n        async with self.transaction_scope() as conn:\n            # \uc5ec\ub7ec \uc791\uc5c5\uc744 \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c\n\n            # 1. \uc0ac\uc6a9\uc790 \uc0dd\uc131\n            user_id = await conn.fetchval(\n                \"INSERT INTO users (name) VALUES ($1) RETURNING id\",\n                \"\ud64d\uae38\ub3d9\"\n            )\n\n            # 2. \ud504\ub85c\ud544 \uc0dd\uc131\n            await conn.execute(\n                \"INSERT INTO profiles (user_id, bio) VALUES ($1, $2)\",\n                user_id, \"\uc548\ub155\ud558\uc138\uc694\"\n            )\n\n            # 3. \uae30\ubcf8 \uc124\uc815 \uc0dd\uc131\n            await conn.execute(\n                \"INSERT INTO settings (user_id, theme) VALUES ($1, $2)\",\n                user_id, \"dark\"\n            )\n\n            return Success({\"user_id\": user_id})\n</code></pre>"},{"location":"04-transactions/#_8","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"04-transactions/#1","title":"1. \ud2b8\ub79c\uc7ad\uc158 \ubc94\uc704 \ucd5c\uc18c\ud654","text":"<pre><code># \u274c \ub098\uc05c \uc608 - \uae34 \ud2b8\ub79c\uc7ad\uc158\nasync with transaction():\n    data = await fetch_external_api()  # \uc678\ubd80 API \ud638\ucd9c\n    await process_data(data)\n    await save_to_db(data)\n\n# \u2705 \uc88b\uc740 \uc608 - \uc9e7\uc740 \ud2b8\ub79c\uc7ad\uc158\ndata = await fetch_external_api()\nprocessed = await process_data(data)\n\nasync with transaction():\n    await save_to_db(processed)\n</code></pre>"},{"location":"04-transactions/#2","title":"2. \uc801\uc808\ud55c \uaca9\ub9ac \uc218\uc900 \uc120\ud0dd","text":"<pre><code># \uc77d\uae30 \uc804\uc6a9 \uc791\uc5c5\nasync with transaction(isolation=IsolationLevel.READ_COMMITTED):\n    data = await read_data()\n\n# \uc77c\uad00\uc131\uc774 \uc911\uc694\ud55c \uc791\uc5c5\nasync with transaction(isolation=IsolationLevel.SERIALIZABLE):\n    await critical_update()\n</code></pre>"},{"location":"04-transactions/#3","title":"3. \ub370\ub4dc\ub77d \ubc29\uc9c0","text":"<pre><code># \ud56d\uc0c1 \uac19\uc740 \uc21c\uc11c\ub85c \ud14c\uc774\ube14 \uc811\uadfc\nasync def transfer(from_id: int, to_id: int):\n    # ID \uc21c\uc11c\ub85c \uc815\ub82c\ud558\uc5ec \ub370\ub4dc\ub77d \ubc29\uc9c0\n    if from_id &gt; to_id:\n        from_id, to_id = to_id, from_id\n\n    async with transaction():\n        await lock_account(from_id)\n        await lock_account(to_id)\n        # \uc774\uccb4 \ucc98\ub9ac\n</code></pre>"},{"location":"04-transactions/#_9","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"04-transactions/#1_1","title":"1. \ud2b8\ub79c\uc7ad\uc158 \ud0c0\uc784\uc544\uc6c3","text":"<ul> <li>\uae34 \ud2b8\ub79c\uc7ad\uc158\uc740 \ud0c0\uc784\uc544\uc6c3 \uc124\uc815</li> <li>\ub370\ub4dc\ub77d \uac10\uc9c0 \ubc0f \uc7ac\uc2dc\ub3c4 \uba54\ucee4\ub2c8\uc998</li> </ul>"},{"location":"04-transactions/#2_1","title":"2. \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158","text":"<ul> <li>\ub124\ud2b8\uc6cc\ud06c \ubd84\ud560 \uace0\ub824</li> <li>\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \uc900\ube44</li> <li>\uc774\ubca4\ud2b8 \uc21c\uc11c \ubcf4\uc7a5</li> </ul>"},{"location":"04-transactions/#3_1","title":"3. \uc131\ub2a5 \uace0\ub824\uc0ac\ud56d","text":"<ul> <li>\ubc30\uce58 \ucc98\ub9ac \ud65c\uc6a9</li> <li>\ube44\ub3d9\uae30 \ucc98\ub9ac \uace0\ub824</li> <li>\uc778\ub371\uc2a4 \ucd5c\uc801\ud654</li> </ul>"},{"location":"04-transactions/#_10","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c</li> <li>\uc0c1\ud0dc \uba38\uc2e0</li> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud328\ud134</li> </ul>"},{"location":"05-deployment/","title":"\ubc30\ud3ec \uc804\ub7b5 (Deployment Strategies)","text":""},{"location":"05-deployment/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\ub294 \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc744 \uc704\ud55c \ub2e4\uc591\ud55c \ubc30\ud3ec \uc804\ub7b5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Blue-Green, Canary, Rolling \ub4f1\uc758 \uc804\ub7b5\uc744 \ud1b5\ud574 \ubb34\uc911\ub2e8 \ubc30\ud3ec\uc640 \uc548\uc804\ud55c \ub864\ubc31\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.</p>"},{"location":"05-deployment/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"05-deployment/#_3","title":"\ubc30\ud3ec \uc804\ub7b5 \uc885\ub958","text":"<ul> <li>Blue-Green: \ub450 \uac1c\uc758 \ub3d9\uc77c\ud55c \ud658\uacbd\uc744 \uc0ac\uc6a9\ud55c \uc989\uc2dc \uc804\ud658</li> <li>Canary: \uc810\uc9c4\uc801\uc73c\ub85c \ud2b8\ub798\ud53d\uc744 \uc99d\uac00\uc2dc\ud0a4\ub294 \ubc30\ud3ec</li> <li>Rolling: \uc778\uc2a4\ud134\uc2a4\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8</li> <li>A/B Testing: \ub450 \ubc84\uc804\uc744 \ub3d9\uc2dc\uc5d0 \uc6b4\uc601\ud558\uba70 \ud14c\uc2a4\ud2b8</li> </ul>"},{"location":"05-deployment/#_4","title":"\ubc30\ud3ec \ub2e8\uacc4","text":"<ol> <li>\uc900\ube44: \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131, \ud5ec\uc2a4\uccb4\ud06c</li> <li>\ubc30\ud3ec: \uc120\ud0dd\ub41c \uc804\ub7b5\uc5d0 \ub530\ub978 \ubc30\ud3ec \uc2e4\ud589</li> <li>\uac80\uc99d: \uba54\ud2b8\ub9ad \uc218\uc9d1 \ubc0f \uac80\uc99d</li> <li>\uc644\ub8cc/\ub864\ubc31: \uc131\uacf5 \uc2dc \uc644\ub8cc, \uc2e4\ud328 \uc2dc \uc790\ub3d9 \ub864\ubc31</li> </ol>"},{"location":"05-deployment/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"05-deployment/#deploymentstrategy","title":"DeploymentStrategy \ud074\ub798\uc2a4","text":"<pre><code>from rfs.production.strategies import (\n    DeploymentStrategy,\n    DeploymentConfig,\n    DeploymentType,\n    DeploymentMetrics\n)\n</code></pre>"},{"location":"05-deployment/#_5","title":"\uc8fc\uc694 \uc124\uc815 \uc635\uc158","text":"\uc635\uc158 \uc124\uba85 \uae30\ubcf8\uac12 <code>deployment_type</code> \ubc30\ud3ec \uc804\ub7b5 \ud0c0\uc785 BLUE_GREEN <code>health_check_interval</code> \ud5ec\uc2a4\uccb4\ud06c \uac04\uaca9 30\ucd08 <code>max_deployment_time</code> \ucd5c\ub300 \ubc30\ud3ec \uc2dc\uac04 600\ucd08 <code>auto_rollback</code> \uc790\ub3d9 \ub864\ubc31 \ud65c\uc131\ud654 True <code>rollback_on_error_rate</code> \ub864\ubc31 \ud2b8\ub9ac\uac70 \uc5d0\ub7ec\uc728 5%"},{"location":"05-deployment/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"05-deployment/#blue-green","title":"Blue-Green \ubc30\ud3ec","text":"<pre><code>from rfs.production.strategies import (\n    DeploymentStrategyFactory,\n    DeploymentConfig,\n    DeploymentType\n)\nfrom rfs.production.deployment import ProductionDeployer\n\n# Blue-Green \ubc30\ud3ec \uc124\uc815\nconfig = DeploymentConfig(\n    deployment_type=DeploymentType.BLUE_GREEN,\n    switch_delay=60,  # \ud2b8\ub798\ud53d \uc804\ud658 \uc804 60\ucd08 \ub300\uae30\n    health_check_interval=30,\n    auto_rollback=True,\n    rollback_on_error_rate=0.05  # 5% \uc5d0\ub7ec\uc728 \uc2dc \ub864\ubc31\n)\n\n# \ubc30\ud3ec \uc804\ub7b5 \uc0dd\uc131\nstrategy = DeploymentStrategyFactory.create(\n    DeploymentType.BLUE_GREEN,\n    config\n)\n\n# \ubc30\ud3ec \uc2e4\ud589\nasync def deploy_blue_green():\n    result = await strategy.deploy(\n        service_name=\"api-service\",\n        new_version=\"v2.0.0\"\n    )\n\n    if result.is_success():\n        metrics = result.value\n        print(f\"\ubc30\ud3ec \uc131\uacf5!\")\n        print(f\"\uc18c\uc694 \uc2dc\uac04: {metrics.deployment_duration}\")\n        print(f\"\uc131\uacf5\ub960: {metrics.success_rate:.2%}\")\n    else:\n        print(f\"\ubc30\ud3ec \uc2e4\ud328: {result.error}\")\n</code></pre>"},{"location":"05-deployment/#canary","title":"Canary \ubc30\ud3ec","text":"<pre><code>from rfs.production.strategies import CanaryStrategy\n\n# Canary \ubc30\ud3ec \uc124\uc815\nconfig = DeploymentConfig(\n    deployment_type=DeploymentType.CANARY,\n    canary_percentage=10,      # \ucd08\uae30 10% \ud2b8\ub798\ud53d\n    canary_increment=10,        # 10%\uc529 \uc99d\uac00\n    canary_interval=60,         # 60\ucd08\ub9c8\ub2e4 \uc99d\uac00\n    auto_rollback=True,\n    rollback_on_error_rate=0.02  # 2% \uc5d0\ub7ec\uc728 \uc2dc \ub864\ubc31\n)\n\nstrategy = CanaryStrategy(config)\n\nasync def deploy_canary():\n    \"\"\"\uc810\uc9c4\uc801 Canary \ubc30\ud3ec\"\"\"\n    result = await strategy.deploy(\n        service_name=\"api-service\",\n        new_version=\"v2.0.0\"\n    )\n\n    # \ubc30\ud3ec \uacfc\uc815 \ubaa8\ub2c8\ud130\ub9c1\n    # 10% -&gt; 20% -&gt; 30% -&gt; ... -&gt; 100%\n    # \uac01 \ub2e8\uacc4\uc5d0\uc11c \uba54\ud2b8\ub9ad \ud655\uc778 \ud6c4 \uc790\ub3d9 \uc9c4\ud589\n</code></pre>"},{"location":"05-deployment/#rolling","title":"Rolling \ubc30\ud3ec","text":"<pre><code>from rfs.production.strategies import RollingStrategy\n\n# Rolling \ubc30\ud3ec \uc124\uc815\nconfig = DeploymentConfig(\n    deployment_type=DeploymentType.ROLLING,\n    batch_size=2,              # \ud55c \ubc88\uc5d0 2\uac1c \uc778\uc2a4\ud134\uc2a4 \uc5c5\ub370\uc774\ud2b8\n    batch_interval=30,          # \ubc30\uce58 \uac04 30\ucd08 \ub300\uae30\n    health_check_timeout=10,\n    auto_rollback=True\n)\n\nstrategy = RollingStrategy(config)\n\nasync def deploy_rolling():\n    \"\"\"\uc21c\ucc28\uc801 Rolling \ubc30\ud3ec\"\"\"\n    result = await strategy.deploy(\n        service_name=\"api-service\",\n        new_version=\"v2.0.0\",\n        instance_count=10  # \ucd1d 10\uac1c \uc778\uc2a4\ud134\uc2a4\n    )\n\n    if result.is_success():\n        metrics = result.value\n        print(f\"\ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4 \uc5c5\ub370\uc774\ud2b8 \uc644\ub8cc\")\n        print(f\"\uac74\uac15\ud55c \uc778\uc2a4\ud134\uc2a4: {metrics.healthy_instances}/{metrics.instance_count}\")\n</code></pre>"},{"location":"05-deployment/#productiondeployer","title":"ProductionDeployer \ud1b5\ud569 \uc0ac\uc6a9","text":"<pre><code>from rfs.production.deployment import (\n    ProductionDeployer,\n    DeploymentConfig,\n    DeploymentStrategy\n)\n\n# \ud1b5\ud569 \ubc30\ud3ec \uad00\ub9ac\uc790\ndeployer_config = DeploymentConfig(\n    strategy=DeploymentStrategy.BLUE_GREEN,\n    target_environment=\"production\",\n    health_check_url=\"/health\",\n    rollback_on_failure=True,\n    max_rollback_attempts=3,\n    deployment_timeout=1800  # 30\ubd84\n)\n\ndeployer = ProductionDeployer(deployer_config)\n\n# \ubc30\ud3ec \ud6c5 \uc124\uc815\nasync def pre_deployment_hook(result):\n    \"\"\"\ubc30\ud3ec \uc804 \uc2e4\ud589\"\"\"\n    print(\"\ubc30\ud3ec \uc804 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158...\")\n    # \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub85c\uc9c1\n\nasync def post_deployment_hook(result):\n    \"\"\"\ubc30\ud3ec \ud6c4 \uc2e4\ud589\"\"\"\n    print(\"\uce90\uc2dc \ucd08\uae30\ud654...\")\n    # \uce90\uc2dc \ud074\ub9ac\uc5b4 \ub85c\uc9c1\n\ndeployer.config.pre_deployment_hooks.append(pre_deployment_hook)\ndeployer.config.post_deployment_hooks.append(post_deployment_hook)\n\n# \ubc30\ud3ec \uc2e4\ud589\nasync def deploy_to_production():\n    result = await deployer.deploy(\n        version=\"v2.0.0\",\n        environment=\"production\",\n        strategy=DeploymentStrategy.CANARY\n    )\n\n    if result.is_success():\n        deployment = result.value\n        print(f\"\ubc30\ud3ec ID: {deployment.deployment_id}\")\n        print(f\"\uc0c1\ud0dc: {deployment.status}\")\n        print(f\"\ubc84\uc804: {deployment.version}\")\n\n        # \ubc30\ud3ec \ud788\uc2a4\ud1a0\ub9ac \uc870\ud68c\n        history = deployer.get_deployment_history()\n        for dep in history[:5]:\n            print(f\"- {dep.deployment_id}: {dep.status}\")\n</code></pre>"},{"location":"05-deployment/#_7","title":"\ucee4\uc2a4\ud140 \ubc30\ud3ec \uc804\ub7b5","text":"<pre><code>from rfs.production.strategies import DeploymentStrategy\n\nclass CustomStrategy(DeploymentStrategy):\n    \"\"\"\ucee4\uc2a4\ud140 \ubc30\ud3ec \uc804\ub7b5\"\"\"\n\n    async def deploy(\n        self,\n        service_name: str,\n        new_version: str,\n        **kwargs\n    ) -&gt; Result[DeploymentMetrics, str]:\n        self.metrics = DeploymentMetrics(start_time=datetime.now())\n\n        try:\n            # 1. \ucee4\uc2a4\ud140 \ubc30\ud3ec \ub85c\uc9c1\n            print(f\"\ucee4\uc2a4\ud140 \ubc30\ud3ec \uc2dc\uc791: {service_name} -&gt; {new_version}\")\n\n            # 2. \ud5ec\uc2a4\uccb4\ud06c\n            health_result = await self.health_check(service_name, new_version)\n            if health_result != HealthStatus.HEALTHY:\n                return Failure(\"\ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328\")\n\n            # 3. \uba54\ud2b8\ub9ad \uc218\uc9d1\n            metrics_result = await self.collect_metrics(service_name, new_version)\n            if self.should_rollback(metrics_result.value):\n                await self.rollback(service_name)\n                return Failure(\"\uba54\ud2b8\ub9ad \uae30\uc900 \ubbf8\ub2ec\")\n\n            # 4. \uc644\ub8cc\n            self.metrics.end_time = datetime.now()\n            self.metrics.success_rate = 0.99\n\n            return Success(self.metrics)\n\n        except Exception as e:\n            return Failure(f\"\ubc30\ud3ec \uc2e4\ud328: {str(e)}\")\n</code></pre>"},{"location":"05-deployment/#_8","title":"\ubc30\ud3ec \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.production.deployment import get_production_deployer\nimport asyncio\n\nasync def monitor_deployment(deployment_id: str):\n    \"\"\"\uc2e4\uc2dc\uac04 \ubc30\ud3ec \ubaa8\ub2c8\ud130\ub9c1\"\"\"\n    deployer = get_production_deployer()\n\n    while True:\n        result = deployer.get_deployment_status(deployment_id)\n\n        if not result:\n            print(\"\ubc30\ud3ec\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n            break\n\n        print(f\"\uc0c1\ud0dc: {result.status}\")\n        print(f\"\uc9c4\ud589\ub960: {calculate_progress(result)}%\")\n\n        if result.status in [DeploymentStatus.COMPLETED, \n                            DeploymentStatus.FAILED,\n                            DeploymentStatus.ROLLED_BACK]:\n            print(f\"\ubc30\ud3ec \uc885\ub8cc: {result.status}\")\n            if result.errors:\n                print(f\"\uc5d0\ub7ec: {result.errors}\")\n            break\n\n        await asyncio.sleep(5)  # 5\ucd08\ub9c8\ub2e4 \uccb4\ud06c\n\ndef calculate_progress(deployment) -&gt; int:\n    \"\"\"\ubc30\ud3ec \uc9c4\ud589\ub960 \uacc4\uc0b0\"\"\"\n    if deployment.status == DeploymentStatus.PENDING:\n        return 0\n    elif deployment.status == DeploymentStatus.IN_PROGRESS:\n        # \uba54\ud2b8\ub9ad \uae30\ubc18 \uc9c4\ud589\ub960 \uacc4\uc0b0\n        return 50\n    elif deployment.status == DeploymentStatus.VALIDATING:\n        return 80\n    else:\n        return 100\n</code></pre>"},{"location":"05-deployment/#_9","title":"\ubc30\ud3ec \uac80\uc99d","text":"<pre><code>from rfs.production.strategies import DeploymentConfig\nimport aiohttp\n\nclass DeploymentValidator:\n    \"\"\"\ubc30\ud3ec \uac80\uc99d \ub3c4\uad6c\"\"\"\n\n    async def validate_deployment(\n        self,\n        service_url: str,\n        expected_version: str\n    ) -&gt; bool:\n        \"\"\"\ubc30\ud3ec \uac80\uc99d\"\"\"\n        checks = [\n            self.check_version(service_url, expected_version),\n            self.check_health(service_url),\n            self.check_critical_endpoints(service_url),\n            self.run_smoke_tests(service_url)\n        ]\n\n        results = await asyncio.gather(*checks, return_exceptions=True)\n\n        for i, result in enumerate(results):\n            if isinstance(result, Exception):\n                print(f\"\uac80\uc99d \uc2e4\ud328 {i+1}: {result}\")\n                return False\n\n        return all(results)\n\n    async def check_version(self, url: str, version: str) -&gt; bool:\n        \"\"\"\ubc84\uc804 \ud655\uc778\"\"\"\n        async with aiohttp.ClientSession() as session:\n            async with session.get(f\"{url}/version\") as resp:\n                data = await resp.json()\n                return data.get(\"version\") == version\n\n    async def check_health(self, url: str) -&gt; bool:\n        \"\"\"\ud5ec\uc2a4\uccb4\ud06c\"\"\"\n        async with aiohttp.ClientSession() as session:\n            async with session.get(f\"{url}/health\") as resp:\n                return resp.status == 200\n\n    async def check_critical_endpoints(self, url: str) -&gt; bool:\n        \"\"\"\ud575\uc2ec \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ud655\uc778\"\"\"\n        endpoints = [\"/api/users\", \"/api/products\", \"/api/orders\"]\n\n        async with aiohttp.ClientSession() as session:\n            for endpoint in endpoints:\n                async with session.get(f\"{url}{endpoint}\") as resp:\n                    if resp.status &gt;= 500:\n                        return False\n        return True\n\n    async def run_smoke_tests(self, url: str) -&gt; bool:\n        \"\"\"\uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8\"\"\"\n        # \uae30\ubcf8 \uc2dc\ub098\ub9ac\uc624 \ud14c\uc2a4\ud2b8\n        return True\n</code></pre>"},{"location":"05-deployment/#_10","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"05-deployment/#1","title":"1. \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131","text":"<pre><code># \ubc30\ud3ec \uc804 \ud56d\uc0c1 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131\nfrom rfs.production.rollback import RollbackManager\n\nrollback_manager = RollbackManager()\n\ncheckpoint = await rollback_manager.create_checkpoint(\n    service_name=\"api-service\",\n    version=\"v1.0.0\",\n    configuration=current_config,\n    environment_variables=os.environ.copy()\n)\n</code></pre>"},{"location":"05-deployment/#2","title":"2. \ub2e8\uacc4\ubcc4 \uac80\uc99d","text":"<pre><code># \uac01 \ubc30\ud3ec \ub2e8\uacc4\ub9c8\ub2e4 \uac80\uc99d\nconfig = DeploymentConfig(\n    # \uac80\uc99d \uc124\uc815\n    validation_duration=300,  # 5\ubd84\uac04 \uac80\uc99d\n    health_check_interval=30,\n\n    # \uc790\ub3d9 \ub864\ubc31 \uc870\uac74\n    auto_rollback=True,\n    rollback_on_error_rate=0.05,\n    rollback_on_latency=2.0  # 2\ucd08 \uc774\uc0c1 \uc9c0\uc5f0\n)\n</code></pre>"},{"location":"05-deployment/#3","title":"3. \uba54\ud2b8\ub9ad \uae30\ubc18 \uacb0\uc815","text":"<pre><code># \uba54\ud2b8\ub9ad \uae30\ubc18 \uc790\ub3d9 \ub864\ubc31\nif metrics.error_rate &gt; 0.05:\n    await rollback()\nelif metrics.p99_latency &gt; 2000:  # 2\ucd08\n    await rollback()\nelif metrics.cpu_usage &gt; 90:\n    await rollback()\n</code></pre>"},{"location":"05-deployment/#_11","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"05-deployment/#1_1","title":"1. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158","text":"<ul> <li>\ubc30\ud3ec \uc804 \ud56d\uc0c1 \ubc31\uc5c5</li> <li>\uc5ed\ubc29\ud5a5 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc900\ube44</li> <li>Blue-Green\uc5d0\uc11c\ub294 \uc591\ucabd \ubc84\uc804 \ud638\ud658\uc131 \ud655\ubcf4</li> </ul>"},{"location":"05-deployment/#2_1","title":"2. \uc0c1\ud0dc \uad00\ub9ac","text":"<ul> <li>Stateless \uc11c\ube44\uc2a4 \uc6b0\uc120</li> <li>\uc138\uc158 \ub370\uc774\ud130\ub294 \uc678\ubd80 \uc800\uc7a5\uc18c \uc0ac\uc6a9</li> <li>\uce90\uc2dc \ubb34\ud6a8\ud654 \uc804\ub7b5 \uc218\ub9bd</li> </ul>"},{"location":"05-deployment/#3_1","title":"3. \ubaa8\ub2c8\ud130\ub9c1","text":"<ul> <li>\uc2e4\uc2dc\uac04 \uba54\ud2b8\ub9ad \uc218\uc9d1</li> <li>\uc54c\ub78c \uc124\uc815</li> <li>\ub85c\uadf8 \uc9d1\uacc4 \ubc0f \ubd84\uc11d</li> </ul>"},{"location":"05-deployment/#_12","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ub864\ubc31 \uad00\ub9ac</li> <li>\ubaa8\ub2c8\ud130\ub9c1</li> <li>\ub85c\ub4dc \ubc38\ub7f0\uc2f1</li> </ul>"},{"location":"06-rollback/","title":"\ub864\ubc31 \uad00\ub9ac (Rollback Management)","text":""},{"location":"06-rollback/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\ub294 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uae30\ubc18\uc758 \ud3ec\uad04\uc801\uc778 \ub864\ubc31 \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ubc30\ud3ec \uc2e4\ud328, \uc124\uc815 \uc624\ub958, \ub370\uc774\ud130 \uc190\uc0c1 \ub4f1\uc758 \uc0c1\ud669\uc5d0\uc11c \uc548\uc804\ud558\uac8c \uc774\uc804 \uc0c1\ud0dc\ub85c \ubcf5\uc6d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"06-rollback/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"06-rollback/#_3","title":"\ub864\ubc31 \uc804\ub7b5","text":"<ul> <li>\uccb4\ud06c\ud3ec\uc778\ud2b8 \uae30\ubc18: \ud2b9\uc815 \uc2dc\uc810\uc758 \uc0c1\ud0dc \uc800\uc7a5 \ubc0f \ubcf5\uc6d0</li> <li>\uc99d\ubd84 \ub864\ubc31: \ubcc0\uacbd\uc0ac\ud56d\ub9cc \ub418\ub3cc\ub9ac\uae30</li> <li>\uc804\uccb4 \ub864\ubc31: \uc644\uc804\ud55c \uc774\uc804 \ubc84\uc804\uc73c\ub85c \ubcf5\uc6d0</li> <li>\uc120\ud0dd\uc801 \ub864\ubc31: \ud2b9\uc815 \ucef4\ud3ec\ub10c\ud2b8\ub9cc \ub864\ubc31</li> </ul>"},{"location":"06-rollback/#_4","title":"\uccb4\ud06c\ud3ec\uc778\ud2b8 \ud0c0\uc785","text":"<ul> <li>\uc790\ub3d9 \uccb4\ud06c\ud3ec\uc778\ud2b8: \ubc30\ud3ec \uc804 \uc790\ub3d9 \uc0dd\uc131</li> <li>\uc218\ub3d9 \uccb4\ud06c\ud3ec\uc778\ud2b8: \uad00\ub9ac\uc790\uac00 \uba85\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131</li> <li>\uc608\uc57d \uccb4\ud06c\ud3ec\uc778\ud2b8: \uc8fc\uae30\uc801\uc73c\ub85c \uc790\ub3d9 \uc0dd\uc131</li> <li>\uc870\uac74\ubd80 \uccb4\ud06c\ud3ec\uc778\ud2b8: \ud2b9\uc815 \uc870\uac74 \ucda9\uc871 \uc2dc \uc0dd\uc131</li> </ul>"},{"location":"06-rollback/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"06-rollback/#rollbackmanager","title":"RollbackManager \ud074\ub798\uc2a4","text":"<pre><code>from rfs.production.rollback import (\n    RollbackManager,\n    DeploymentCheckpoint,\n    RollbackRecord,\n    CheckpointType,\n    RollbackStrategy\n)\n</code></pre>"},{"location":"06-rollback/#_5","title":"\uc8fc\uc694 \ub864\ubc31 \uc804\ub7b5","text":"\uc804\ub7b5 \uc124\uba85 \uc0ac\uc6a9 \uc2dc\uae30 <code>IMMEDIATE</code> \uc989\uc2dc \ub864\ubc31 \uae34\uae09 \uc0c1\ud669 <code>GRADUAL</code> \uc810\uc9c4\uc801 \ub864\ubc31 \ubd80\ubd84 \ubb38\uc81c <code>SCHEDULED</code> \uc608\uc57d \ub864\ubc31 \uacc4\ud68d\ub41c \ubcf5\uc6d0 <code>CONDITIONAL</code> \uc870\uac74\ubd80 \ub864\ubc31 \uba54\ud2b8\ub9ad \uae30\ubc18"},{"location":"06-rollback/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"06-rollback/#_7","title":"\uae30\ubcf8 \ub864\ubc31 \uad00\ub9ac","text":"<pre><code>from rfs.production.rollback import RollbackManager\nfrom rfs.core.result import Result, Success, Failure\nfrom datetime import datetime\nimport json\n\nclass DeploymentRollbackManager:\n    \"\"\"\ubc30\ud3ec \ub864\ubc31 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.rollback_manager = RollbackManager()\n        self.checkpoints = []\n        self.rollback_history = []\n\n    async def create_checkpoint(\n        self,\n        deployment_id: str,\n        metadata: dict\n    ) -&gt; Result[str, str]:\n        \"\"\"\uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131\"\"\"\n\n        try:\n            # \ud604\uc7ac \uc0c1\ud0dc \uc218\uc9d1\n            current_state = await self.collect_system_state()\n\n            # \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131\n            checkpoint = DeploymentCheckpoint(\n                checkpoint_id=self.generate_checkpoint_id(),\n                deployment_id=deployment_id,\n                created_at=datetime.now(),\n                state=current_state,\n                metadata=metadata\n            )\n\n            # \uc800\uc7a5\n            await self.save_checkpoint(checkpoint)\n            self.checkpoints.append(checkpoint)\n\n            print(f\"\uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131: {checkpoint.checkpoint_id}\")\n\n            return Success(checkpoint.checkpoint_id)\n\n        except Exception as e:\n            return Failure(f\"\uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n    async def rollback_to_checkpoint(\n        self,\n        checkpoint_id: str,\n        reason: str\n    ) -&gt; Result[dict, str]:\n        \"\"\"\ud2b9\uc815 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub85c \ub864\ubc31\"\"\"\n\n        # \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc870\ud68c\n        checkpoint = self.find_checkpoint(checkpoint_id)\n        if not checkpoint:\n            return Failure(f\"\uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {checkpoint_id}\")\n\n        print(f\"\ub864\ubc31 \uc2dc\uc791: {checkpoint_id}\")\n\n        try:\n            # \ud604\uc7ac \uc0c1\ud0dc \ubc31\uc5c5 (\ub864\ubc31\uc758 \ub864\ubc31\uc744 \uc704\ud574)\n            backup = await self.create_backup()\n\n            # \ub864\ubc31 \uc2e4\ud589\n            result = await self.execute_rollback(checkpoint)\n\n            if result.is_success():\n                # \ub864\ubc31 \uae30\ub85d\n                record = RollbackRecord(\n                    rollback_id=self.generate_rollback_id(),\n                    checkpoint_id=checkpoint_id,\n                    reason=reason,\n                    executed_at=datetime.now(),\n                    status=\"completed\",\n                    backup_id=backup\n                )\n\n                self.rollback_history.append(record)\n\n                return Success({\n                    \"rollback_id\": record.rollback_id,\n                    \"status\": \"completed\",\n                    \"rolled_back_to\": checkpoint_id\n                })\n            else:\n                # \ub864\ubc31 \uc2e4\ud328 - \ubc31\uc5c5\uc5d0\uc11c \ubcf5\uc6d0\n                await self.restore_from_backup(backup)\n                return Failure(f\"\ub864\ubc31 \uc2e4\ud328: {result.error}\")\n\n        except Exception as e:\n            return Failure(f\"\ub864\ubc31 \uc911 \uc624\ub958: {str(e)}\")\n\n    async def collect_system_state(self) -&gt; dict:\n        \"\"\"\uc2dc\uc2a4\ud15c \uc0c1\ud0dc \uc218\uc9d1\"\"\"\n        return {\n            \"configuration\": await self.get_configuration(),\n            \"database_schema\": await self.get_database_schema(),\n            \"deployed_services\": await self.get_deployed_services(),\n            \"environment_variables\": await self.get_environment_variables(),\n            \"file_checksums\": await self.calculate_file_checksums()\n        }\n\n    async def execute_rollback(\n        self,\n        checkpoint: DeploymentCheckpoint\n    ) -&gt; Result:\n        \"\"\"\ub864\ubc31 \uc2e4\ud589\"\"\"\n\n        # 1. \uc11c\ube44\uc2a4 \uc911\uc9c0\n        await self.stop_services()\n\n        # 2. \uc0c1\ud0dc \ubcf5\uc6d0\n        await self.restore_configuration(checkpoint.state[\"configuration\"])\n        await self.restore_database(checkpoint.state[\"database_schema\"])\n        await self.restore_files(checkpoint.state[\"file_checksums\"])\n\n        # 3. \uc11c\ube44\uc2a4 \uc7ac\uc2dc\uc791\n        await self.start_services()\n\n        # 4. \ud5ec\uc2a4\uccb4\ud06c\n        health = await self.health_check()\n        if not health:\n            return Failure(\"\ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328\")\n\n        return Success(None)\n</code></pre>"},{"location":"06-rollback/#_8","title":"\uc870\uac74\ubd80 \uc790\ub3d9 \ub864\ubc31","text":"<pre><code>from rfs.production.rollback import ConditionalRollback\nfrom typing import Callable\n\nclass AutoRollbackManager:\n    \"\"\"\uc790\ub3d9 \ub864\ubc31 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self):\n        self.rollback_manager = RollbackManager()\n        self.conditions = []\n        self.monitoring_active = False\n\n    def add_rollback_condition(\n        self,\n        name: str,\n        condition: Callable,\n        threshold: float,\n        action: str = \"rollback\"\n    ):\n        \"\"\"\ub864\ubc31 \uc870\uac74 \ucd94\uac00\"\"\"\n        self.conditions.append({\n            \"name\": name,\n            \"condition\": condition,\n            \"threshold\": threshold,\n            \"action\": action\n        })\n\n    async def start_monitoring(self):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791\"\"\"\n        self.monitoring_active = True\n\n        while self.monitoring_active:\n            for condition in self.conditions:\n                # \uc870\uac74 \ud3c9\uac00\n                metric_value = await condition[\"condition\"]()\n\n                if self.should_rollback(metric_value, condition[\"threshold\"]):\n                    print(f\"\ub864\ubc31 \uc870\uac74 \ucda9\uc871: {condition['name']}\")\n\n                    if condition[\"action\"] == \"rollback\":\n                        # \uc790\ub3d9 \ub864\ubc31 \uc2e4\ud589\n                        await self.execute_auto_rollback(condition[\"name\"])\n                    elif condition[\"action\"] == \"alert\":\n                        # \uc54c\ub9bc\ub9cc \ubc1c\uc1a1\n                        await self.send_alert(condition[\"name\"], metric_value)\n\n            await asyncio.sleep(30)  # 30\ucd08\ub9c8\ub2e4 \uccb4\ud06c\n\n    def should_rollback(self, value: float, threshold: float) -&gt; bool:\n        \"\"\"\ub864\ubc31 \uc5ec\ubd80 \uacb0\uc815\"\"\"\n        return value &gt; threshold\n\n    async def execute_auto_rollback(self, reason: str):\n        \"\"\"\uc790\ub3d9 \ub864\ubc31 \uc2e4\ud589\"\"\"\n        # \uac00\uc7a5 \ucd5c\uadfc \uccb4\ud06c\ud3ec\uc778\ud2b8\ub85c \ub864\ubc31\n        latest_checkpoint = await self.get_latest_checkpoint()\n\n        if latest_checkpoint:\n            result = await self.rollback_manager.rollback_to_checkpoint(\n                latest_checkpoint.checkpoint_id,\n                reason=f\"\uc790\ub3d9 \ub864\ubc31: {reason}\"\n            )\n\n            if result.is_success():\n                print(f\"\uc790\ub3d9 \ub864\ubc31 \uc131\uacf5: {result.value}\")\n            else:\n                print(f\"\uc790\ub3d9 \ub864\ubc31 \uc2e4\ud328: {result.error}\")\n                # \uc218\ub3d9 \uac1c\uc785 \ud544\uc694 \uc54c\ub9bc\n\n# \uc0ac\uc6a9 \uc608\uc81c\nauto_rollback = AutoRollbackManager()\n\n# \uc5d0\ub7ec\uc728 \uae30\ubc18 \ub864\ubc31\nauto_rollback.add_rollback_condition(\n    name=\"high_error_rate\",\n    condition=lambda: get_error_rate(),\n    threshold=0.05,  # 5% \uc774\uc0c1\n    action=\"rollback\"\n)\n\n# \uc751\ub2f5 \uc2dc\uac04 \uae30\ubc18 \ub864\ubc31\nauto_rollback.add_rollback_condition(\n    name=\"slow_response\",\n    condition=lambda: get_p99_latency(),\n    threshold=2000,  # 2\ucd08 \uc774\uc0c1\n    action=\"rollback\"\n)\n\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uc54c\ub9bc\nauto_rollback.add_rollback_condition(\n    name=\"high_memory\",\n    condition=lambda: get_memory_usage(),\n    threshold=90,  # 90% \uc774\uc0c1\n    action=\"alert\"\n)\n\n# \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791\nawait auto_rollback.start_monitoring()\n</code></pre>"},{"location":"06-rollback/#_9","title":"\uc99d\ubd84 \ub864\ubc31","text":"<pre><code>class IncrementalRollback:\n    \"\"\"\uc99d\ubd84 \ub864\ubc31 \uc2dc\uc2a4\ud15c\"\"\"\n\n    def __init__(self):\n        self.change_log = []\n        self.rollback_stack = []\n\n    async def track_change(\n        self,\n        component: str,\n        change_type: str,\n        old_value: any,\n        new_value: any\n    ):\n        \"\"\"\ubcc0\uacbd\uc0ac\ud56d \ucd94\uc801\"\"\"\n        change = {\n            \"timestamp\": datetime.now(),\n            \"component\": component,\n            \"type\": change_type,\n            \"old_value\": old_value,\n            \"new_value\": new_value\n        }\n\n        self.change_log.append(change)\n\n        # \ub864\ubc31 \uc561\uc158 \uc0dd\uc131\n        rollback_action = self.create_rollback_action(change)\n        self.rollback_stack.append(rollback_action)\n\n    def create_rollback_action(self, change: dict) -&gt; Callable:\n        \"\"\"\ub864\ubc31 \uc561\uc158 \uc0dd\uc131\"\"\"\n        component = change[\"component\"]\n        old_value = change[\"old_value\"]\n\n        async def rollback():\n            if component == \"configuration\":\n                await self.restore_config(old_value)\n            elif component == \"database\":\n                await self.restore_database_record(old_value)\n            elif component == \"file\":\n                await self.restore_file(old_value)\n\n        return rollback\n\n    async def rollback_last_n_changes(self, n: int) -&gt; Result:\n        \"\"\"\ucd5c\uadfc N\uac1c \ubcc0\uacbd\uc0ac\ud56d \ub864\ubc31\"\"\"\n\n        if n &gt; len(self.rollback_stack):\n            return Failure(f\"\ub864\ubc31 \uac00\ub2a5\ud55c \ubcc0\uacbd\uc0ac\ud56d\uc774 {len(self.rollback_stack)}\uac1c\ubfd0\uc785\ub2c8\ub2e4\")\n\n        rolled_back = []\n\n        for _ in range(n):\n            if self.rollback_stack:\n                rollback_action = self.rollback_stack.pop()\n                try:\n                    await rollback_action()\n                    change = self.change_log.pop()\n                    rolled_back.append(change)\n                except Exception as e:\n                    return Failure(f\"\ub864\ubc31 \uc2e4\ud328: {str(e)}\")\n\n        return Success({\n            \"rolled_back_count\": n,\n            \"changes\": rolled_back\n        })\n\n    async def rollback_component(\n        self,\n        component: str\n    ) -&gt; Result:\n        \"\"\"\ud2b9\uc815 \ucef4\ud3ec\ub10c\ud2b8\ub9cc \ub864\ubc31\"\"\"\n\n        component_changes = [\n            (i, change) for i, change in enumerate(self.change_log)\n            if change[\"component\"] == component\n        ]\n\n        if not component_changes:\n            return Failure(f\"\ucef4\ud3ec\ub10c\ud2b8 {component}\uc758 \ubcc0\uacbd\uc0ac\ud56d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        # \uc5ed\uc21c\uc73c\ub85c \ub864\ubc31\n        for index, change in reversed(component_changes):\n            rollback_action = self.create_rollback_action(change)\n            await rollback_action()\n\n            # \ub85c\uadf8\uc5d0\uc11c \uc81c\uac70\n            del self.change_log[index]\n            del self.rollback_stack[index]\n\n        return Success({\n            \"component\": component,\n            \"rolled_back_count\": len(component_changes)\n        })\n</code></pre>"},{"location":"06-rollback/#_10","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub864\ubc31","text":"<pre><code>class DatabaseRollbackManager:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub864\ubc31 \uad00\ub9ac\"\"\"\n\n    def __init__(self, connection):\n        self.conn = connection\n        self.migration_history = []\n\n    async def create_database_checkpoint(\n        self,\n        checkpoint_name: str\n    ) -&gt; Result[str, str]:\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131\"\"\"\n\n        try:\n            # 1. \uc2a4\ud0a4\ub9c8 \ub364\ud504\n            schema = await self.dump_schema()\n\n            # 2. \ub370\uc774\ud130 \uc2a4\ub0c5\uc0f7 (\uc911\uc694 \ud14c\uc774\ube14\ub9cc)\n            snapshot = await self.create_data_snapshot()\n\n            # 3. \uc800\uc7a5\n            checkpoint_id = await self.conn.fetchval(\n                \"\"\"INSERT INTO db_checkpoints \n                   (name, schema_dump, data_snapshot, created_at)\n                   VALUES ($1, $2, $3, $4) RETURNING id\"\"\",\n                checkpoint_name,\n                schema,\n                json.dumps(snapshot),\n                datetime.now()\n            )\n\n            return Success(checkpoint_id)\n\n        except Exception as e:\n            return Failure(f\"DB \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n    async def rollback_database(\n        self,\n        checkpoint_id: str\n    ) -&gt; Result[dict, str]:\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub864\ubc31\"\"\"\n\n        # \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc870\ud68c\n        checkpoint = await self.conn.fetchrow(\n            \"SELECT * FROM db_checkpoints WHERE id = $1\",\n            checkpoint_id\n        )\n\n        if not checkpoint:\n            return Failure(f\"\uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {checkpoint_id}\")\n\n        try:\n            # 1. \ud604\uc7ac \ub370\uc774\ud130 \ubc31\uc5c5\n            backup = await self.backup_current_state()\n\n            # 2. \uc2a4\ud0a4\ub9c8 \ubcf5\uc6d0\n            await self.restore_schema(checkpoint['schema_dump'])\n\n            # 3. \ub370\uc774\ud130 \ubcf5\uc6d0\n            snapshot = json.loads(checkpoint['data_snapshot'])\n            await self.restore_data(snapshot)\n\n            # 4. \uac80\uc99d\n            if await self.validate_database():\n                return Success({\n                    \"checkpoint_id\": checkpoint_id,\n                    \"backup_id\": backup,\n                    \"status\": \"completed\"\n                })\n            else:\n                # \uac80\uc99d \uc2e4\ud328 - \ubc31\uc5c5\uc5d0\uc11c \ubcf5\uc6d0\n                await self.restore_from_backup(backup)\n                return Failure(\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac80\uc99d \uc2e4\ud328\")\n\n        except Exception as e:\n            return Failure(f\"DB \ub864\ubc31 \uc2e4\ud328: {str(e)}\")\n\n    async def rollback_migration(\n        self,\n        migration_version: str\n    ) -&gt; Result:\n        \"\"\"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31\"\"\"\n\n        # \ub864\ubc31\ud560 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ucc3e\uae30\n        migrations = await self.get_migrations_after(migration_version)\n\n        for migration in reversed(migrations):\n            print(f\"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31: {migration['version']}\")\n\n            # down \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589\n            if migration.get('down_script'):\n                await self.conn.execute(migration['down_script'])\n\n            # \uae30\ub85d \uc5c5\ub370\uc774\ud2b8\n            await self.conn.execute(\n                \"DELETE FROM migration_history WHERE version = $1\",\n                migration['version']\n            )\n\n        return Success(f\"{len(migrations)}\uac1c \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31 \uc644\ub8cc\")\n</code></pre>"},{"location":"06-rollback/#_11","title":"\uc124\uc815 \ub864\ubc31","text":"<pre><code>class ConfigurationRollback:\n    \"\"\"\uc124\uc815 \ub864\ubc31 \uad00\ub9ac\"\"\"\n\n    def __init__(self):\n        self.config_history = []\n        self.current_config = None\n\n    async def save_config_version(\n        self,\n        config: dict,\n        version: str,\n        description: str = \"\"\n    ):\n        \"\"\"\uc124\uc815 \ubc84\uc804 \uc800\uc7a5\"\"\"\n        config_version = {\n            \"version\": version,\n            \"config\": config.copy(),\n            \"description\": description,\n            \"created_at\": datetime.now(),\n            \"hash\": self.calculate_hash(config)\n        }\n\n        self.config_history.append(config_version)\n\n        # \ud30c\uc77c\ub85c\ub3c4 \uc800\uc7a5\n        await self.persist_config_version(config_version)\n\n    async def rollback_config(\n        self,\n        target_version: str\n    ) -&gt; Result[dict, str]:\n        \"\"\"\ud2b9\uc815 \ubc84\uc804\uc73c\ub85c \uc124\uc815 \ub864\ubc31\"\"\"\n\n        # \ub300\uc0c1 \ubc84\uc804 \ucc3e\uae30\n        target_config = None\n        for config in self.config_history:\n            if config[\"version\"] == target_version:\n                target_config = config\n                break\n\n        if not target_config:\n            return Failure(f\"\uc124\uc815 \ubc84\uc804\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {target_version}\")\n\n        # \ud604\uc7ac \uc124\uc815 \ubc31\uc5c5\n        await self.save_config_version(\n            self.current_config,\n            f\"backup_{datetime.now().isoformat()}\",\n            \"\ub864\ubc31 \uc804 \uc790\ub3d9 \ubc31\uc5c5\"\n        )\n\n        # \uc124\uc815 \uc801\uc6a9\n        self.current_config = target_config[\"config\"].copy()\n\n        # \uc124\uc815 \uc7ac\ub85c\ub4dc \ud2b8\ub9ac\uac70\n        await self.reload_configuration()\n\n        return Success({\n            \"rolled_back_to\": target_version,\n            \"previous_version\": self.config_history[-2][\"version\"]\n        })\n\n    def calculate_hash(self, config: dict) -&gt; str:\n        \"\"\"\uc124\uc815 \ud574\uc2dc \uacc4\uc0b0\"\"\"\n        import hashlib\n        config_str = json.dumps(config, sort_keys=True)\n        return hashlib.sha256(config_str.encode()).hexdigest()\n</code></pre>"},{"location":"06-rollback/#_12","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"06-rollback/#1","title":"1. \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc804\ub7b5","text":"<pre><code># \ubc30\ud3ec \uc804 \ud56d\uc0c1 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131\ncheckpoint = await create_checkpoint(\n    deployment_id=\"deploy_123\",\n    metadata={\n        \"type\": \"pre_deployment\",\n        \"version\": \"v2.0.0\",\n        \"auto_rollback\": True\n    }\n)\n\n# \uc8fc\uae30\uc801 \uccb4\ud06c\ud3ec\uc778\ud2b8\nschedule_checkpoint(interval=timedelta(hours=6))\n</code></pre>"},{"location":"06-rollback/#2","title":"2. \ub864\ubc31 \ud14c\uc2a4\ud2b8","text":"<pre><code># \ub864\ubc31 \uc2dc\ubbac\ub808\uc774\uc158\nasync def test_rollback():\n    # \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc5d0\uc11c \ub864\ubc31 \uac80\uc99d\n    checkpoint = await create_test_checkpoint()\n    make_changes()\n    result = await rollback_to_checkpoint(checkpoint)\n    assert result.is_success()\n</code></pre>"},{"location":"06-rollback/#3","title":"3. \ub864\ubc31 \uc815\ucc45","text":"<pre><code>rollback_policy = {\n    \"auto_rollback\": True,\n    \"max_rollback_time\": 300,  # 5\ubd84\n    \"health_check_required\": True,\n    \"approval_required\": False  # \uae34\uae09 \uc0c1\ud669\n}\n</code></pre>"},{"location":"06-rollback/#_13","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"06-rollback/#1_1","title":"1. \ub370\uc774\ud130 \uc77c\uad00\uc131","text":"<ul> <li>\ud2b8\ub79c\uc7ad\uc158 \uc911\uac04\uc5d0 \ub864\ubc31 \uae08\uc9c0</li> <li>\uc678\ubd80 \uc2dc\uc2a4\ud15c\uacfc\uc758 \ub3d9\uae30\ud654 \uace0\ub824</li> <li>\ub864\ubc31 \ubd88\uac00\ub2a5\ud55c \uc791\uc5c5 \uc2dd\ubcc4</li> </ul>"},{"location":"06-rollback/#2_1","title":"2. \uc131\ub2a5 \uc601\ud5a5","text":"<ul> <li>\uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131 \uc624\ubc84\ud5e4\ub4dc</li> <li>\ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ub864\ubc31 \uc2dc\uac04</li> <li>\uc11c\ube44\uc2a4 \uc911\ub2e8 \ucd5c\uc18c\ud654</li> </ul>"},{"location":"06-rollback/#3_1","title":"3. \ub864\ubc31 \ud55c\uacc4","text":"<ul> <li>\uc678\ubd80 API \ud638\ucd9c\uc740 \ub864\ubc31 \ubd88\uac00</li> <li>\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc190\uc2e4 \ubc29\uc9c0</li> <li>\ub864\ubc31 \uc774\ub825 \uad00\ub9ac</li> </ul>"},{"location":"06-rollback/#_14","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ubc30\ud3ec \uc804\ub7b5</li> <li>\ud2b8\ub79c\uc7ad\uc158</li> <li>\ubaa8\ub2c8\ud130\ub9c1</li> </ul>"},{"location":"07-logging/","title":"\ub85c\uae45 \ub370\ucf54\ub808\uc774\ud130 (Logging Decorators)","text":""},{"location":"07-logging/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \ub85c\uae45 \uc2dc\uc2a4\ud15c\uc740 \ub370\ucf54\ub808\uc774\ud130 \uae30\ubc18\uc73c\ub85c \uc791\uc5c5 \ub808\ubca8 \ub85c\uae45\uacfc \uac10\uc0ac \ub85c\uae45\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ubbfc\uac10\ud55c \ub370\uc774\ud130 \uc790\ub3d9 \ub9c8\uc2a4\ud0b9\uacfc \uad6c\uc870\ud654\ub41c \ub85c\uadf8 \ud3ec\ub9f7\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.</p>"},{"location":"07-logging/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"07-logging/#_3","title":"\ub85c\uae45 \ub370\ucf54\ub808\uc774\ud130 \uc885\ub958","text":"<ul> <li>@LoggedOperation: \uc791\uc5c5 \ub808\ubca8 \ub85c\uae45</li> <li>@AuditLogged: \uac10\uc0ac \ub85c\uadf8 \uc0dd\uc131</li> <li>@ErrorLogged: \uc5d0\ub7ec \uc790\ub3d9 \ub85c\uae45</li> <li>@PerformanceLogged: \uc131\ub2a5 \uba54\ud2b8\ub9ad \ub85c\uae45</li> </ul>"},{"location":"07-logging/#_4","title":"\ub85c\uadf8 \ub808\ubca8","text":"<ul> <li>DEBUG: \ub514\ubc84\uae45 \uc815\ubcf4</li> <li>INFO: \uc77c\ubc18 \uc815\ubcf4</li> <li>WARNING: \uacbd\uace0</li> <li>ERROR: \uc5d0\ub7ec</li> <li>CRITICAL: \uce58\uba85\uc801 \uc5d0\ub7ec</li> </ul>"},{"location":"07-logging/#_5","title":"\uac10\uc0ac \uc774\ubca4\ud2b8 \ud0c0\uc785","text":"<ul> <li>CREATE/READ/UPDATE/DELETE: CRUD \uc791\uc5c5</li> <li>LOGIN/LOGOUT: \uc778\uc99d \uc774\ubca4\ud2b8</li> <li>SECURITY_EVENT: \ubcf4\uc548 \uad00\ub828 \uc774\ubca4\ud2b8</li> <li>API_CALL: API \ud638\ucd9c</li> </ul>"},{"location":"07-logging/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"07-logging/#loggedoperation","title":"@LoggedOperation \ub370\ucf54\ub808\uc774\ud130","text":"<pre><code>from rfs.core.logging_decorators import LoggedOperation, LogLevel\n\n@LoggedOperation(\n    level=LogLevel.INFO,\n    include_args=True,\n    include_result=False,\n    include_timing=True,\n    include_errors=True,\n    tags={\"service\": \"user_service\"}\n)\n</code></pre> \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 \uae30\ubcf8\uac12 \uc124\uba85 <code>level</code> <code>LogLevel</code> <code>INFO</code> \ub85c\uadf8 \ub808\ubca8 <code>include_args</code> <code>bool</code> <code>True</code> \uc778\uc790 \ud3ec\ud568 \uc5ec\ubd80 <code>include_result</code> <code>bool</code> <code>False</code> \uacb0\uacfc \ud3ec\ud568 \uc5ec\ubd80 <code>include_timing</code> <code>bool</code> <code>True</code> \uc2e4\ud589 \uc2dc\uac04 \ud3ec\ud568 <code>include_errors</code> <code>bool</code> <code>True</code> \uc5d0\ub7ec \ud3ec\ud568 \uc5ec\ubd80 <code>tags</code> <code>dict</code> <code>None</code> \ucd94\uac00 \ud0dc\uadf8"},{"location":"07-logging/#auditlogged","title":"@AuditLogged \ub370\ucf54\ub808\uc774\ud130","text":"<pre><code>from rfs.core.logging_decorators import AuditLogged, AuditEventType\n\n@AuditLogged(\n    event_type=AuditEventType.UPDATE,\n    resource_type=\"user\",\n    include_changes=True,\n    include_user_info=True,\n    custom_message=\"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8\"\n)\n</code></pre> \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785 \uae30\ubcf8\uac12 \uc124\uba85 <code>event_type</code> <code>AuditEventType</code> \ud544\uc218 \uac10\uc0ac \uc774\ubca4\ud2b8 \ud0c0\uc785 <code>resource_type</code> <code>str</code> \ud544\uc218 \ub9ac\uc18c\uc2a4 \ud0c0\uc785 <code>include_changes</code> <code>bool</code> <code>True</code> \ubcc0\uacbd\uc0ac\ud56d \ud3ec\ud568 <code>include_user_info</code> <code>bool</code> <code>True</code> \uc0ac\uc6a9\uc790 \uc815\ubcf4 \ud3ec\ud568 <code>custom_message</code> <code>str</code> <code>None</code> \ucee4\uc2a4\ud140 \uba54\uc2dc\uc9c0"},{"location":"07-logging/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"07-logging/#_7","title":"\uae30\ubcf8 \uc791\uc5c5 \ub85c\uae45","text":"<pre><code>from rfs.core.logging_decorators import LoggedOperation, LogLevel\nfrom rfs.core.result import Result, Success, Failure\n\n@LoggedOperation(\n    level=LogLevel.INFO,\n    include_timing=True,\n    tags={\"module\": \"user_service\"}\n)\nasync def create_user(user_data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc0dd\uc131\"\"\"\n    try:\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ub85c\uc9c1\n        new_user = {\n            \"id\": \"user123\",\n            \"name\": user_data[\"name\"],\n            \"email\": user_data[\"email\"]\n        }\n        return Success(new_user)\n    except Exception as e:\n        return Failure(f\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n# \uc2e4\ud589 \uc2dc \ub85c\uadf8 \ucd9c\ub825:\n# [abc12345] Starting operation: user_service.create_user | Args: ({'name': 'John', 'email': 'jo***@example.com'},) | Kwargs: {}\n# [abc12345] Completed operation: user_service.create_user | Duration: 15.30ms\n</code></pre>"},{"location":"07-logging/#_8","title":"\uac10\uc0ac \ub85c\uae45","text":"<pre><code>from rfs.core.logging_decorators import AuditLogged, AuditEventType\n\n@AuditLogged(\n    event_type=AuditEventType.UPDATE,\n    resource_type=\"user\",\n    include_changes=True\n)\nasync def update_user(user_id: str, updates: dict, user_id: str) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8\"\"\"\n    try:\n        # \uae30\uc874 \uc0ac\uc6a9\uc790 \uc870\ud68c\n        existing_user = await get_user(user_id)\n\n        # \uc5c5\ub370\uc774\ud2b8 \uc2e4\ud589\n        updated_user = await update_user_in_db(user_id, updates)\n\n        return Success(updated_user)\n    except Exception as e:\n        return Failure(f\"\uc0ac\uc6a9\uc790 \uc5c5\ub370\uc774\ud2b8 \uc2e4\ud328: {str(e)}\")\n\n# \uac10\uc0ac \ub85c\uadf8 \uc0dd\uc131:\n# {\n#   \"audit_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n#   \"timestamp\": \"2025-01-15T10:30:00Z\",\n#   \"event_type\": \"UPDATE\",\n#   \"user_id\": \"user123\",\n#   \"resource_type\": \"user\",\n#   \"resource_id\": \"target_user456\",\n#   \"action\": \"update_user\",\n#   \"result\": \"SUCCESS\",\n#   \"changes\": {\"updated_fields\": [\"name\", \"email\"]}\n# }\n</code></pre>"},{"location":"07-logging/#_9","title":"\uc5d0\ub7ec \uc790\ub3d9 \ub85c\uae45","text":"<pre><code>from rfs.core.logging_decorators import ErrorLogged, LogLevel\n\n@ErrorLogged(\n    include_stack_trace=True,\n    notify=True,  # \uc54c\ub9bc \ud544\uc694\n    severity=LogLevel.ERROR\n)\nasync def critical_operation() -&gt; Result[str, str]:\n    \"\"\"\uc911\uc694\ud55c \uc791\uc5c5\"\"\"\n    try:\n        # \uc911\uc694\ud55c \ub85c\uc9c1 \uc2e4\ud589\n        result = await perform_critical_task()\n        return Success(result)\n    except Exception as e:\n        # \uc790\ub3d9\uc73c\ub85c \uc5d0\ub7ec \ub85c\uadf8 \uc0dd\uc131\ub428\n        return Failure(str(e))\n\n# \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \ub85c\uadf8:\n# ERROR: Error ID: def67890 | Function: service.critical_operation | Error: Database connection failed\n# DEBUG: [def67890] Stack trace: ...\n# CRITICAL: NOTIFICATION REQUIRED: Error ID: def67890 | Function: service.critical_operation | Error: Database connection failed\n</code></pre>"},{"location":"07-logging/#_10","title":"\ubcf5\ud569 \ub85c\uae45 \uc2dc\uc2a4\ud15c","text":"<pre><code>from rfs.core.logging_decorators import (\n    LoggedOperation, \n    AuditLogged, \n    ErrorLogged,\n    LogLevel, \n    AuditEventType\n)\n\nclass UserService:\n    @LoggedOperation(\n        level=LogLevel.INFO,\n        include_timing=True,\n        tags={\"service\": \"user\", \"version\": \"v1\"}\n    )\n    @AuditLogged(\n        event_type=AuditEventType.CREATE,\n        resource_type=\"user\",\n        include_changes=False\n    )\n    @ErrorLogged(\n        include_stack_trace=True,\n        severity=LogLevel.ERROR\n    )\n    async def register_user(\n        self, \n        registration_data: dict,\n        user_id: str = None  # \uac10\uc0ac \ub85c\uadf8\uc6a9\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d (\ub2e4\uc911 \ub85c\uae45 \uc801\uc6a9)\"\"\"\n        try:\n            # \uc720\ud6a8\uc131 \uac80\uc0ac\n            validation_result = await self._validate_registration(registration_data)\n            if validation_result.is_failure():\n                return validation_result\n\n            # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n            user = await self._create_user_in_db(registration_data)\n\n            # \ud658\uc601 \uc774\uba54\uc77c \ubc1c\uc1a1\n            await self._send_welcome_email(user)\n\n            return Success(user)\n\n        except Exception as e:\n            # ErrorLogged\uac00 \uc790\ub3d9\uc73c\ub85c \uc5d0\ub7ec \ub85c\uae45\n            return Failure(f\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \uc2e4\ud328: {str(e)}\")\n</code></pre>"},{"location":"07-logging/#_11","title":"\ubbfc\uac10\ud55c \ub370\uc774\ud130 \ub9c8\uc2a4\ud0b9","text":"<pre><code>from rfs.core.logging_decorators import LoggedOperation\n\n@LoggedOperation(\n    include_args=True,\n    include_result=True\n)\nasync def login_user(email: str, password: str, api_key: str) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub85c\uadf8\uc778 (\ubbfc\uac10\ud55c \ub370\uc774\ud130 \uc790\ub3d9 \ub9c8\uc2a4\ud0b9)\"\"\"\n    try:\n        # \ub85c\uadf8\uc778 \ub85c\uc9c1\n        user_token = await authenticate_user(email, password, api_key)\n        return Success({\"token\": user_token, \"email\": email})\n    except Exception as e:\n        return Failure(str(e))\n\n# \ub85c\uadf8 \ucd9c\ub825 (\uc790\ub3d9 \ub9c8\uc2a4\ud0b9):\n# [xyz98765] Starting operation: auth.login_user | Args: ('us***@example.com', '***MASKED***', '***MASKED***')\n# [xyz98765] Completed operation: auth.login_user | Result: {'token': '***MASKED***', 'email': 'us***@example.com'}\n</code></pre>"},{"location":"07-logging/#_12","title":"\uac10\uc0ac \ub85c\uadf8 \uc870\ud68c","text":"<pre><code>from rfs.core.logging_decorators import get_audit_logger, AuditEventType\nfrom datetime import datetime, timedelta\n\n# \uac10\uc0ac \ub85c\uac70 \uac00\uc838\uc624\uae30\naudit_logger = get_audit_logger()\n\n# \ud2b9\uc815 \uc0ac\uc6a9\uc790\uc758 \uac10\uc0ac \ub85c\uadf8 \uc870\ud68c\nuser_logs = audit_logger.get_logs(\n    user_id=\"user123\",\n    start_time=datetime.now() - timedelta(days=7),\n    limit=50\n)\n\n# \ud2b9\uc815 \uc774\ubca4\ud2b8 \ud0c0\uc785\uc758 \ub85c\uadf8 \uc870\ud68c\ncreate_logs = audit_logger.get_logs(\n    event_type=AuditEventType.CREATE,\n    limit=100\n)\n\n# \uac10\uc0ac \ub85c\uadf8 \ud30c\uc77c \uc124\uc815\nfrom rfs.core.logging_decorators import set_audit_log_file\nset_audit_log_file(\"/var/log/rfs/audit.log\")\n</code></pre>"},{"location":"07-logging/#_13","title":"\ucee4\uc2a4\ud140 \ub85c\uae45 \ucee8\ud14d\uc2a4\ud2b8","text":"<pre><code>from rfs.core.logging_decorators import LoggedOperation, OperationContext\nfrom datetime import datetime\n\n@LoggedOperation(\n    level=LogLevel.INFO,\n    tags={\"component\": \"payment\"}\n)\nasync def process_payment(\n    payment_data: dict,\n    trace_id: str = None  # \ubd84\uc0b0 \ud2b8\ub808\uc774\uc2f1\uc6a9\n) -&gt; Result[dict, str]:\n    \"\"\"\uacb0\uc81c \ucc98\ub9ac\"\"\"\n    # \ucee8\ud14d\uc2a4\ud2b8 \uc815\ubcf4\ub294 \uc790\ub3d9\uc73c\ub85c \ub85c\uadf8\uc5d0 \ud3ec\ud568\ub428\n    try:\n        result = await execute_payment(payment_data)\n        return Success(result)\n    except Exception as e:\n        return Failure(str(e))\n\n# \uc2e4\ud589\nawait process_payment(\n    {\"amount\": 1000, \"currency\": \"KRW\"},\n    trace_id=\"trace-123\"\n)\n</code></pre>"},{"location":"07-logging/#_14","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"07-logging/#1","title":"1. \ub85c\uae45 \ub808\ubca8 \uc120\ud0dd","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc801\uc808\ud55c \ub808\ubca8 \uc0ac\uc6a9\n@LoggedOperation(level=LogLevel.INFO)  # \uc77c\ubc18\uc801\uc778 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\nasync def get_user_profile(user_id: str):\n    pass\n\n@LoggedOperation(level=LogLevel.WARNING)  # \uc7a0\uc7ac\uc801 \ubb38\uc81c\nasync def retry_failed_operation():\n    pass\n\n@LoggedOperation(level=LogLevel.ERROR)  # \uc911\uc694\ud55c \uc2e4\ud328\nasync def handle_critical_error():\n    pass\n</code></pre>"},{"location":"07-logging/#2","title":"2. \uac10\uc0ac \ub85c\uadf8 \uc801\uc808\ud55c \uc0ac\uc6a9","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc911\uc694\ud55c \uc791\uc5c5\ub9cc \uac10\uc0ac \ub85c\uadf8\n@AuditLogged(\n    event_type=AuditEventType.DELETE,\n    resource_type=\"user_data\",\n    include_changes=True\n)\nasync def delete_user_data(user_id: str):\n    \"\"\"\uc911\uc694\ud55c \ub370\uc774\ud130 \uc0ad\uc81c - \uac10\uc0ac \ud544\uc694\"\"\"\n    pass\n\n# \u274c \ub098\uc05c \uc608 - \ub2e8\uc21c\ud55c \uc870\ud68c\uc5d0 \uac10\uc0ac \ub85c\uadf8\n@AuditLogged(event_type=AuditEventType.READ, resource_type=\"user\")\nasync def get_user_list():\n    \"\"\"\ub2e8\uc21c \uc870\ud68c - \uac10\uc0ac \ubd88\ud544\uc694\"\"\"\n    pass\n</code></pre>"},{"location":"07-logging/#3","title":"3. \uc131\ub2a5 \uace0\ub824\uc0ac\ud56d","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc131\ub2a5 \uc601\ud5a5 \ucd5c\uc18c\ud654\n@LoggedOperation(\n    include_result=False,  # \ud070 \uacb0\uacfc\ub294 \uc81c\uc678\n    include_args=False     # \ubbfc\uac10\ud55c \ub300\uc6a9\ub7c9 \uc778\uc790 \uc81c\uc678\n)\nasync def process_large_dataset(data: list):\n    pass\n</code></pre>"},{"location":"07-logging/#4","title":"4. \ud0dc\uadf8 \ud65c\uc6a9","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc758\ubbf8\uc788\ub294 \ud0dc\uadf8 \uc0ac\uc6a9\n@LoggedOperation(tags={\n    \"service\": \"user_management\",\n    \"version\": \"v2\",\n    \"feature\": \"registration\",\n    \"environment\": \"production\"\n})\nasync def register_user(user_data: dict):\n    pass\n</code></pre>"},{"location":"07-logging/#_15","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"07-logging/#1_1","title":"1. \ubbfc\uac10\ud55c \ub370\uc774\ud130 \ubcf4\ud638","text":"<ul> <li>\ube44\ubc00\ubc88\ud638, API \ud0a4, \uac1c\uc778\uc815\ubcf4\ub294 \uc790\ub3d9\uc73c\ub85c \ub9c8\uc2a4\ud0b9\ub428</li> <li>\ucd94\uac00 \ubbfc\uac10 \ud544\ub4dc\uac00 \uc788\ub2e4\uba74 \ub9c8\uc2a4\ud0b9 \ub85c\uc9c1 \ud655\uc7a5 \ud544\uc694</li> </ul>"},{"location":"07-logging/#2_1","title":"2. \ub85c\uadf8 \uc800\uc7a5\uc18c \uc6a9\ub7c9 \uad00\ub9ac","text":"<ul> <li>\uac10\uc0ac \ub85c\uadf8\ub294 \uc9c0\uc18d\uc801\uc73c\ub85c \ub204\uc801\ub428</li> <li>\uc815\uae30\uc801\uc778 \uc544\uce74\uc774\ube0c \ubc0f \uc815\ub9ac \uc815\ucc45 \uc218\ub9bd \ud544\uc694</li> </ul>"},{"location":"07-logging/#3_1","title":"3. \uc131\ub2a5 \uc601\ud5a5 \uace0\ub824","text":"<ul> <li><code>include_result=True</code>\ub294 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \uc904 \uc218 \uc788\uc74c</li> <li>\ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac \uc2dc \ub85c\uae45 \ucd5c\uc18c\ud654</li> </ul>"},{"location":"07-logging/#4_1","title":"4. \ube44\ub3d9\uae30 \ud568\uc218 \uc9c0\uc6d0","text":"<ul> <li>\ub3d9\uae30/\ube44\ub3d9\uae30 \ud568\uc218 \ubaa8\ub450 \uc9c0\uc6d0</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \uad00\ub9ac\uac00 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac\ub428</li> </ul>"},{"location":"07-logging/#_16","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ud575\uc2ec \ud328\ud134 - Result \ud328\ud134\uacfc \ub85c\uae45 \ud1b5\ud569</li> <li>\ubaa8\ub2c8\ud130\ub9c1 - \uc131\ub2a5 \uba54\ud2b8\ub9ad \ub85c\uae45</li> <li>\ubcf4\uc548 - \ubcf4\uc548 \uac10\uc0ac \ub85c\uae45</li> <li>\uc811\uadfc \uc81c\uc5b4 - \uc778\uc99d/\uc778\uac00 \uc774\ubca4\ud2b8 \ub85c\uae45</li> </ul>"},{"location":"08-monitoring/","title":"\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 (Performance Monitoring)","text":""},{"location":"08-monitoring/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c\uc740 \uba54\ud2b8\ub9ad\uc2a4 \uc218\uc9d1, \uc131\ub2a5 \uce21\uc815, \uc54c\ub9bc \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Prometheus\uc640 \ud638\ud658\ub418\uba70 \uc2e4\uc2dc\uac04 \uc131\ub2a5 \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"08-monitoring/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"08-monitoring/#_3","title":"\uba54\ud2b8\ub9ad \uc720\ud615","text":"<ul> <li>Counter: \ub2e8\uc870 \uc99d\uac00\ud558\ub294 \ub204\uc801 \uba54\ud2b8\ub9ad (\uc694\uccad \uc218, \uc5d0\ub7ec \uc218)</li> <li>Gauge: \uc99d\uac00/\uac10\uc18c \uac00\ub2a5\ud55c \uc21c\uac04\uac12 (\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9, \uc5f0\uacb0 \uc218)</li> <li>Histogram: \ubd84\ud3ec\ub97c \uce21\uc815\ud558\ub294 \uba54\ud2b8\ub9ad (\uc751\ub2f5 \uc2dc\uac04 \ubd84\ud3ec)</li> <li>Summary: \ubd84\uc704\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uba54\ud2b8\ub9ad (P95, P99 \uc751\ub2f5 \uc2dc\uac04)</li> </ul>"},{"location":"08-monitoring/#_4","title":"\uc131\ub2a5 \uba54\ud2b8\ub9ad","text":"<ul> <li>\uc751\ub2f5 \uc2dc\uac04: API \uc751\ub2f5 \uc2dc\uac04, \ud568\uc218 \uc2e4\ud589 \uc2dc\uac04</li> <li>\ucc98\ub9ac\ub7c9: \ucd08\ub2f9 \uc694\uccad \uc218, \ucc98\ub9ac\ub41c \uc791\uc5c5 \uc218</li> <li>\uc5d0\ub7ec\uc728: \uc2e4\ud328\ud55c \uc694\uccad\uc758 \ube44\uc728</li> <li>\ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub7c9: CPU, \uba54\ubaa8\ub9ac, \ub514\uc2a4\ud06c, \ub124\ud2b8\uc6cc\ud06c</li> </ul>"},{"location":"08-monitoring/#_5","title":"\uc800\uc7a5\uc18c \uc720\ud615","text":"<ul> <li>\uba54\ubaa8\ub9ac \uc800\uc7a5\uc18c: \uac1c\ubc1c/\ud14c\uc2a4\ud2b8\uc6a9 \ud718\ubc1c\uc131 \uc800\uc7a5\uc18c</li> <li>Prometheus: \ud504\ub85c\ub355\uc158\uc6a9 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\ubca0\uc774\uc2a4</li> <li>\ud30c\uc77c \uc800\uc7a5\uc18c: \ub85c\uceec \ud30c\uc77c \uae30\ubc18 \uc800\uc7a5</li> </ul>"},{"location":"08-monitoring/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"08-monitoring/#_6","title":"\uba54\ud2b8\ub9ad \uc218\uc9d1\uae30","text":"<pre><code>from rfs.monitoring.metrics import MetricsCollector, MemoryMetricsStorage\n\n# \uba54\ud2b8\ub9ad \uc218\uc9d1\uae30 \uc0dd\uc131\ncollector = MetricsCollector(storage=MemoryMetricsStorage())\n</code></pre>"},{"location":"08-monitoring/#api_1","title":"\uba54\ud2b8\ub9ad \ud0c0\uc785\ubcc4 API","text":""},{"location":"08-monitoring/#counter","title":"Counter (\uce74\uc6b4\ud130)","text":"<pre><code># \uce74\uc6b4\ud130 \uc0dd\uc131\ncounter = collector.counter(\n    name=\"http_requests_total\",\n    description=\"\ucd1d HTTP \uc694\uccad \uc218\",\n    labels={\"method\": \"GET\", \"endpoint\": \"/api/users\"}\n)\n\n# \uac12 \uc99d\uac00\ncounter.increment()        # 1\uc529 \uc99d\uac00\ncounter.increment(5)       # 5\ub9cc\ud07c \uc99d\uac00\n\n# \ud604\uc7ac \uac12 \uc870\ud68c\ncurrent_value = counter.get_value()\n</code></pre>"},{"location":"08-monitoring/#gauge","title":"Gauge (\uac8c\uc774\uc9c0)","text":"<pre><code># \uac8c\uc774\uc9c0 \uc0dd\uc131\ngauge = collector.gauge(\n    name=\"active_connections\",\n    description=\"\ud65c\uc131 \uc5f0\uacb0 \uc218\",\n    labels={\"service\": \"database\"}\n)\n\n# \uac12 \uc124\uc815\ngauge.set(10)              # \uac12\uc744 10\uc73c\ub85c \uc124\uc815\ngauge.increment(2)         # 2\ub9cc\ud07c \uc99d\uac00\ngauge.decrement(1)         # 1\ub9cc\ud07c \uac10\uc18c\n</code></pre>"},{"location":"08-monitoring/#histogram","title":"Histogram (\ud788\uc2a4\ud1a0\uadf8\ub7a8)","text":"<pre><code># \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uc0dd\uc131\nhistogram = collector.histogram(\n    name=\"response_time_seconds\",\n    buckets=[0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0],\n    description=\"\uc751\ub2f5 \uc2dc\uac04 \ubd84\ud3ec\"\n)\n\n# \uac12 \uad00\ucc30\nhistogram.observe(0.25)    # 250ms \uc751\ub2f5 \uc2dc\uac04 \uae30\ub85d\n\n# \ubd84\uc704\uc218 \uacc4\uc0b0\np95 = histogram.get_quantile(0.95)  # 95\ubc88\uc9f8 \ubc31\ubd84\uc704\uc218\n</code></pre>"},{"location":"08-monitoring/#summary","title":"Summary (\uc11c\uba38\ub9ac)","text":"<pre><code># \uc11c\uba38\ub9ac \uc0dd\uc131\nsummary = collector.summary(\n    name=\"request_duration_seconds\",\n    max_age=600,           # 10\ubd84\uac04 \ub370\uc774\ud130 \ubcf4\uad00\n    max_samples=10000,     # \ucd5c\ub300 10,000\uac1c \uc0d8\ud50c\n    description=\"\uc694\uccad \ucc98\ub9ac \uc2dc\uac04\"\n)\n\n# \uac12 \uad00\ucc30\nsummary.observe(0.123)\n\n# \ud1b5\uacc4 \uc870\ud68c\nstats = summary.get_statistics()\n# {'count': 1000, 'sum': 123.45, 'mean': 0.123, 'p95': 0.5, 'p99': 0.8}\n</code></pre>"},{"location":"08-monitoring/#_7","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"08-monitoring/#_8","title":"\uae30\ubcf8 \uba54\ud2b8\ub9ad \uc218\uc9d1","text":"<pre><code>from rfs.monitoring.metrics import (\n    get_metrics_collector,\n    record_counter,\n    record_gauge,\n    record_histogram\n)\n\n# \uac04\ub2e8\ud55c \uba54\ud2b8\ub9ad \uae30\ub85d\nrecord_counter(\"user_logins\", labels={\"method\": \"oauth\"})\nrecord_gauge(\"memory_usage_bytes\", 1024 * 1024 * 512)\nrecord_histogram(\"api_response_time\", 0.25)\n\n# \uba54\ud2b8\ub9ad \uc870\ud68c\ncollector = get_metrics_collector()\nall_metrics = await collector.get_all_metrics()\n\nfor metric in all_metrics:\n    print(f\"{metric.name}: {metric.value}\")\n</code></pre>"},{"location":"08-monitoring/#_9","title":"\uc131\ub2a5 \ub370\ucf54\ub808\uc774\ud130 \ud65c\uc6a9","text":"<pre><code>from rfs.monitoring.performance_decorators import (\n    PerformanceMonitored,\n    TimingMetric,\n    CounterMetric\n)\n\n@PerformanceMonitored(\n    timing_metric=TimingMetric(\"user_service_create_time\"),\n    counter_metric=CounterMetric(\"user_service_create_total\"),\n    error_counter=CounterMetric(\"user_service_create_errors\"),\n    labels={\"service\": \"user\", \"version\": \"v1\"}\n)\nasync def create_user(user_data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 (\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \ud3ec\ud568)\"\"\"\n    try:\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ub85c\uc9c1\n        user = await save_user_to_db(user_data)\n        return Success(user)\n    except Exception as e:\n        return Failure(str(e))\n\n# \uc2e4\ud589 \uc2dc \uc790\ub3d9\uc73c\ub85c \uba54\ud2b8\ub9ad \uc218\uc9d1:\n# - user_service_create_time: \uc2e4\ud589 \uc2dc\uac04 \ud788\uc2a4\ud1a0\uadf8\ub7a8\n# - user_service_create_total: \ucd1d \ud638\ucd9c \uc218 \uce74\uc6b4\ud130\n# - user_service_create_errors: \uc5d0\ub7ec \ubc1c\uc0dd \uc218 \uce74\uc6b4\ud130\n</code></pre>"},{"location":"08-monitoring/#_10","title":"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.monitoring.metrics import get_metrics_collector\nfrom rfs.core.result import Result, Success\nimport time\n\nclass WebService:\n    def __init__(self):\n        self.collector = get_metrics_collector()\n\n        # \uba54\ud2b8\ub9ad \uc815\uc758\n        self.request_counter = self.collector.counter(\n            \"http_requests_total\",\n            description=\"\ucd1d HTTP \uc694\uccad \uc218\",\n            labels={\"service\": \"web\"}\n        )\n\n        self.response_time = self.collector.histogram(\n            \"http_request_duration_seconds\",\n            buckets=[0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0],\n            description=\"HTTP \uc751\ub2f5 \uc2dc\uac04\"\n        )\n\n        self.active_requests = self.collector.gauge(\n            \"http_requests_active\",\n            description=\"\ud65c\uc131 HTTP \uc694\uccad \uc218\"\n        )\n\n    async def handle_request(self, request) -&gt; Result[dict, str]:\n        \"\"\"HTTP \uc694\uccad \ucc98\ub9ac (\uba54\ud2b8\ub9ad \uc218\uc9d1 \ud3ec\ud568)\"\"\"\n        start_time = time.time()\n\n        # \ud65c\uc131 \uc694\uccad \uc218 \uc99d\uac00\n        self.active_requests.increment()\n\n        try:\n            # \uc694\uccad \uce74\uc6b4\ud130 \uc99d\uac00\n            self.request_counter.increment()\n\n            # \uc2e4\uc81c \uc694\uccad \ucc98\ub9ac\n            response = await self._process_request(request)\n\n            # \uc131\uacf5 \uba54\ud2b8\ub9ad \uae30\ub85d\n            duration = time.time() - start_time\n            self.response_time.observe(duration)\n\n            return Success(response)\n\n        except Exception as e:\n            # \uc5d0\ub7ec \uba54\ud2b8\ub9ad \uae30\ub85d\n            error_counter = self.collector.counter(\n                \"http_errors_total\",\n                labels={\"error_type\": type(e).__name__}\n            )\n            error_counter.increment()\n\n            return Failure(str(e))\n\n        finally:\n            # \ud65c\uc131 \uc694\uccad \uc218 \uac10\uc18c\n            self.active_requests.decrement()\n</code></pre>"},{"location":"08-monitoring/#_11","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.monitoring.metrics import get_metrics_collector\nimport asyncio\nimport time\n\nclass DatabasePool:\n    def __init__(self, max_connections: int = 10):\n        self.max_connections = max_connections\n        self.collector = get_metrics_collector()\n\n        # \uc5f0\uacb0 \uba54\ud2b8\ub9ad\n        self.connection_pool_size = self.collector.gauge(\n            \"db_connection_pool_size\",\n            description=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud480 \ud06c\uae30\"\n        )\n\n        self.active_connections = self.collector.gauge(\n            \"db_connections_active\",\n            description=\"\ud65c\uc131 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc218\"\n        )\n\n        self.query_duration = self.collector.histogram(\n            \"db_query_duration_seconds\",\n            buckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0],\n            description=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \uc2e4\ud589 \uc2dc\uac04\"\n        )\n\n        self.connection_errors = self.collector.counter(\n            \"db_connection_errors_total\",\n            description=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc5d0\ub7ec \uc218\"\n        )\n\n        # \ucd08\uae30 \uba54\ud2b8\ub9ad \uc124\uc815\n        self.connection_pool_size.set(max_connections)\n\n    async def execute_query(self, query: str) -&gt; Result[list, str]:\n        \"\"\"\ucffc\ub9ac \uc2e4\ud589 (\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \ud3ec\ud568)\"\"\"\n        start_time = time.time()\n\n        # \ud65c\uc131 \uc5f0\uacb0 \uc218 \uc99d\uac00\n        self.active_connections.increment()\n\n        try:\n            # \ucffc\ub9ac \uc2e4\ud589 \uc2dc\ubbac\ub808\uc774\uc158\n            await asyncio.sleep(0.05)  # 50ms \uc2dc\ubbac\ub808\uc774\uc158\n            result = [{\"id\": 1, \"name\": \"test\"}]\n\n            # \uc131\ub2a5 \uba54\ud2b8\ub9ad \uae30\ub85d\n            duration = time.time() - start_time\n            self.query_duration.observe(duration)\n\n            return Success(result)\n\n        except Exception as e:\n            self.connection_errors.increment()\n            return Failure(str(e))\n\n        finally:\n            # \ud65c\uc131 \uc5f0\uacb0 \uc218 \uac10\uc18c\n            self.active_connections.decrement()\n</code></pre>"},{"location":"08-monitoring/#_12","title":"\ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.monitoring.metrics import get_metrics_collector\n\nclass OrderService:\n    def __init__(self):\n        self.collector = get_metrics_collector()\n\n        # \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad\n        self.orders_total = self.collector.counter(\n            \"orders_created_total\",\n            description=\"\uc0dd\uc131\ub41c \uc8fc\ubb38 \uc218\"\n        )\n\n        self.order_value = self.collector.histogram(\n            \"order_value_distribution\",\n            buckets=[10, 50, 100, 500, 1000, 5000, 10000],\n            description=\"\uc8fc\ubb38 \uae08\uc561 \ubd84\ud3ec\"\n        )\n\n        self.payment_success_rate = self.collector.gauge(\n            \"payment_success_rate\",\n            description=\"\uacb0\uc81c \uc131\uacf5\ub960\"\n        )\n\n        self.inventory_levels = self.collector.gauge(\n            \"inventory_remaining\",\n            description=\"\uc7ac\uace0 \uc218\uc900\"\n        )\n\n    async def create_order(self, order_data: dict) -&gt; Result[dict, str]:\n        \"\"\"\uc8fc\ubb38 \uc0dd\uc131 (\ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \uc218\uc9d1)\"\"\"\n        try:\n            # \uc8fc\ubb38 \uc0dd\uc131\n            order = await self._create_order_in_db(order_data)\n\n            # \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\n            self.orders_total.increment()\n            self.order_value.observe(order[\"amount\"])\n\n            # \uc7ac\uace0 \uc218\uc900 \uc5c5\ub370\uc774\ud2b8\n            remaining_inventory = await self._get_inventory_count(order[\"product_id\"])\n            self.inventory_levels.set(\n                remaining_inventory,\n                labels={\"product_id\": order[\"product_id\"]}\n            )\n\n            return Success(order)\n\n        except Exception as e:\n            return Failure(str(e))\n</code></pre>"},{"location":"08-monitoring/#prometheus","title":"Prometheus \ud1b5\ud569","text":"<pre><code>from rfs.monitoring.metrics import PrometheusStorage, MetricsCollector\n\n# Prometheus Push Gateway \uc124\uc815\nprometheus_storage = PrometheusStorage(\n    push_gateway_url=\"http://pushgateway:9091\",\n    job_name=\"rfs_application\"\n)\n\n# \uba54\ud2b8\ub9ad \uc218\uc9d1\uae30 \uc0dd\uc131\ncollector = MetricsCollector(storage=prometheus_storage)\n\n# \uba54\ud2b8\ub9ad \uc815\uc758 \ubc0f \uc0ac\uc6a9\nrequest_counter = collector.counter(\n    \"app_requests_total\",\n    labels={\"service\": \"api\", \"version\": \"v1\"}\n)\n\n# \uc8fc\uae30\uc801\uc73c\ub85c \uba54\ud2b8\ub9ad\uc744 Prometheus\ub85c \uc804\uc1a1\nimport asyncio\n\nasync def push_metrics_periodically():\n    \"\"\"\uba54\ud2b8\ub9ad\uc744 \uc8fc\uae30\uc801\uc73c\ub85c Prometheus\ub85c \uc804\uc1a1\"\"\"\n    while True:\n        try:\n            result = await collector.collect_and_store()\n            if result.is_success():\n                print(f\"\uba54\ud2b8\ub9ad {result.unwrap()}\uac1c \uc804\uc1a1 \uc644\ub8cc\")\n            else:\n                print(f\"\uba54\ud2b8\ub9ad \uc804\uc1a1 \uc2e4\ud328: {result.unwrap_err()}\")\n        except Exception as e:\n            print(f\"\uba54\ud2b8\ub9ad \uc804\uc1a1 \uc911 \uc5d0\ub7ec: {e}\")\n\n        await asyncio.sleep(30)  # 30\ucd08\ub9c8\ub2e4 \uc804\uc1a1\n</code></pre>"},{"location":"08-monitoring/#_13","title":"\uc2e4\uc2dc\uac04 \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130","text":"<pre><code>from rfs.monitoring.metrics import get_metrics_collector\nimport json\n\nclass MetricsDashboard:\n    def __init__(self):\n        self.collector = get_metrics_collector()\n\n    async def get_dashboard_data(self) -&gt; dict:\n        \"\"\"\ub300\uc2dc\ubcf4\ub4dc\uc6a9 \uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc870\ud68c\"\"\"\n        all_metrics = await self.collector.get_all_metrics()\n\n        dashboard_data = {\n            \"system\": {\n                \"uptime\": self._get_uptime_metric(all_metrics),\n                \"memory_usage\": self._get_memory_metric(all_metrics),\n                \"cpu_usage\": self._get_cpu_metric(all_metrics)\n            },\n            \"application\": {\n                \"requests_per_second\": self._calculate_rps(all_metrics),\n                \"error_rate\": self._calculate_error_rate(all_metrics),\n                \"response_time_p95\": self._get_response_time_p95(all_metrics)\n            },\n            \"business\": {\n                \"orders_today\": self._get_orders_today(all_metrics),\n                \"revenue_today\": self._get_revenue_today(all_metrics),\n                \"active_users\": self._get_active_users(all_metrics)\n            }\n        }\n\n        return dashboard_data\n\n    def _get_uptime_metric(self, metrics):\n        \"\"\"\uc2dc\uc2a4\ud15c \uac00\ub3d9 \uc2dc\uac04\"\"\"\n        for metric in metrics:\n            if metric.name == \"system_uptime_seconds\":\n                return metric.value\n        return 0\n\n    def _calculate_rps(self, metrics):\n        \"\"\"\ucd08\ub2f9 \uc694\uccad \uc218 \uacc4\uc0b0\"\"\"\n        # \uad6c\ud604 \ub85c\uc9c1...\n        return 0\n\n    async def export_metrics_json(self) -&gt; str:\n        \"\"\"\uba54\ud2b8\ub9ad\uc744 JSON\uc73c\ub85c \ub0b4\ubcf4\ub0b4\uae30\"\"\"\n        all_metrics = await self.collector.get_all_metrics()\n\n        metrics_data = []\n        for metric in all_metrics:\n            metrics_data.append({\n                \"name\": metric.name,\n                \"type\": metric.metric_type.value,\n                \"value\": metric.value,\n                \"labels\": metric.labels,\n                \"timestamp\": metric.timestamp,\n                \"description\": metric.description\n            })\n\n        return json.dumps(metrics_data, indent=2)\n</code></pre>"},{"location":"08-monitoring/#_14","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"08-monitoring/#1","title":"1. \uba54\ud2b8\ub9ad \uba85\uba85 \uaddc\uce59","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uba85\ud655\ud55c \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc640 \uc758\ubbf8\ncollector.counter(\"http_requests_total\", labels={\"method\": \"GET\"})\ncollector.histogram(\"database_query_duration_seconds\")\ncollector.gauge(\"memory_usage_bytes\")\n\n# \u274c \ub098\uc05c \uc608 - \ubaa8\ud638\ud55c \uc774\ub984\ncollector.counter(\"requests\")\ncollector.histogram(\"time\")\ncollector.gauge(\"mem\")\n</code></pre>"},{"location":"08-monitoring/#2","title":"2. \ub77c\ubca8 \uc0ac\uc6a9","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc801\uc808\ud55c \ub77c\ubca8 \uc0ac\uc6a9\ncollector.counter(\n    \"api_requests_total\",\n    labels={\n        \"method\": \"POST\",\n        \"endpoint\": \"/api/users\",\n        \"status_code\": \"200\",\n        \"service\": \"user_service\"\n    }\n)\n\n# \u274c \ub098\uc05c \uc608 - \uacfc\ub3c4\ud55c \ub77c\ubca8 (\uce74\ub514\ub110\ub9ac\ud2f0 \ud3ed\ubc1c)\ncollector.counter(\n    \"requests\",\n    labels={\n        \"user_id\": \"user123\",  # \ub192\uc740 \uce74\ub514\ub110\ub9ac\ud2f0\n        \"timestamp\": \"2025-01-15T10:30:00Z\",  # \ub9e4\uc6b0 \ub192\uc740 \uce74\ub514\ub110\ub9ac\ud2f0\n        \"request_id\": \"req-456\"  # \ub9e4\uc6b0 \ub192\uc740 \uce74\ub514\ub110\ub9ac\ud2f0\n    }\n)\n</code></pre>"},{"location":"08-monitoring/#3","title":"3. \ud788\uc2a4\ud1a0\uadf8\ub7a8 \ubc84\ud0b7 \uc124\uc815","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc801\uc808\ud55c \ubc84\ud0b7 \ubc94\uc704\nresponse_time_histogram = collector.histogram(\n    \"api_response_time_seconds\",\n    buckets=[0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0],\n    description=\"API \uc751\ub2f5 \uc2dc\uac04 \ubd84\ud3ec\"\n)\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac\uc6a9 (\ub354 \uc791\uc740 \ubc94\uc704)\ndb_query_histogram = collector.histogram(\n    \"db_query_duration_seconds\",\n    buckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0],\n    description=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \uc2dc\uac04\"\n)\n</code></pre>"},{"location":"08-monitoring/#4","title":"4. \uc131\ub2a5 \ucd5c\uc801\ud654","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uba54\ud2b8\ub9ad \uc778\uc2a4\ud134\uc2a4 \uc7ac\uc0ac\uc6a9\nclass ServiceMetrics:\n    def __init__(self):\n        self.collector = get_metrics_collector()\n        self.request_counter = self.collector.counter(\"requests_total\")\n        self.response_histogram = self.collector.histogram(\"response_time\")\n\n    def record_request(self):\n        self.request_counter.increment()  # \ube60\ub984 - \uc778\uc2a4\ud134\uc2a4 \uc7ac\uc0ac\uc6a9\n\n# \u274c \ub098\uc05c \uc608 - \ub9e4\ubc88 \uc0c8\ub85c\uc6b4 \uba54\ud2b8\ub9ad \uc0dd\uc131\ndef record_request():\n    collector = get_metrics_collector()\n    counter = collector.counter(\"requests_total\")  # \ub290\ub9bc - \ub9e4\ubc88 \uc0dd\uc131\n    counter.increment()\n</code></pre>"},{"location":"08-monitoring/#_15","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"08-monitoring/#1_1","title":"1. \uba54\ud2b8\ub9ad \uce74\ub514\ub110\ub9ac\ud2f0 \uad00\ub9ac","text":"<ul> <li>\ub77c\ubca8 \uac12\uc758 \uc218\uac00 \ub9ce\uc744\uc218\ub85d \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uc99d\uac00</li> <li>\uc0ac\uc6a9\uc790 ID, \ud0c0\uc784\uc2a4\ud0ec\ud504 \ub4f1 \ub192\uc740 \uce74\ub514\ub110\ub9ac\ud2f0 \ub370\uc774\ud130 \ub77c\ubca8 \uc0ac\uc6a9 \uae08\uc9c0</li> </ul>"},{"location":"08-monitoring/#2_1","title":"2. \uc131\ub2a5 \uc601\ud5a5 \ucd5c\uc18c\ud654","text":"<ul> <li>\uba54\ud2b8\ub9ad \uc218\uc9d1\uc774 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc131\ub2a5\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5 \ubaa8\ub2c8\ud130\ub9c1</li> <li>\ubd88\ud544\uc694\ud55c \uba54\ud2b8\ub9ad \uc218\uc9d1 \uc9c0\uc591</li> </ul>"},{"location":"08-monitoring/#3_1","title":"3. \uba54\ud2b8\ub9ad \uc800\uc7a5\uc18c \uc6a9\ub7c9","text":"<ul> <li>\ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc \uc11c\uba38\ub9ac\ub294 \ub9ce\uc740 \uc800\uc7a5 \uacf5\uac04 \uc0ac\uc6a9</li> <li>\uc801\uc808\ud55c \ubcf4\uad00 \uae30\uac04 \uc124\uc815 \ubc0f \uc815\ub9ac \uc815\ucc45 \uc218\ub9bd</li> </ul>"},{"location":"08-monitoring/#4_1","title":"4. \uc54c\ub9bc \uc784\uacc4\uac12 \uc124\uc815","text":"<ul> <li>\uc801\uc808\ud55c \uc784\uacc4\uac12 \uc124\uc815\uc73c\ub85c \ubd88\ud544\uc694\ud55c \uc54c\ub9bc \ubc29\uc9c0</li> <li>\ube44\uc988\ub2c8\uc2a4 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\ub294 SLA \uae30\ubc18 \uc54c\ub9bc</li> </ul>"},{"location":"08-monitoring/#_16","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ub85c\uae45 - \uad6c\uc870\ud654\ub41c \ub85c\uae45\uacfc \uba54\ud2b8\ub9ad \uc5f0\ub3d9</li> <li>\ubc30\ud3ec - \ud504\ub85c\ub355\uc158 \ud658\uacbd \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815</li> <li>\ubcf4\uc548 - \ubcf4\uc548 \uba54\ud2b8\ub9ad \ubc0f \uc774\uc0c1 \ud0d0\uc9c0</li> <li>\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 - \uc7a5\uc560 \uaca9\ub9ac \uba54\ud2b8\ub9ad</li> </ul>"},{"location":"09-validation/","title":"\uc785\ub825 \uc720\ud6a8\uc131 \uac80\uc0ac (Input Validation)","text":""},{"location":"09-validation/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \uc720\ud6a8\uc131 \uac80\uc0ac \uc2dc\uc2a4\ud15c\uc740 \ub2e4\ucc28\uc6d0 \uac80\uc99d\uc744 \ud1b5\ud574 \uc2dc\uc2a4\ud15c \ubb34\uacb0\uc131\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4. \uae30\ub2a5, \ud1b5\ud569, \uc131\ub2a5, \ubcf4\uc548, \ud638\ud658\uc131 \uac80\uc99d\uc744 \ud3ec\uad04\ud558\uba70 \uc790\ub3d9\ud654\ub41c \ud488\uc9c8 \uad00\ub9ac\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"09-validation/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"09-validation/#_3","title":"\uac80\uc99d \ub808\ubca8","text":"<ul> <li>BASIC: \uae30\ubcf8\uc801\uc778 \uae30\ub2a5 \uac80\uc99d</li> <li>STANDARD: \ud45c\uc900 \ud488\uc9c8 \uac80\uc99d (\uae30\ubcf8\uac12)</li> <li>COMPREHENSIVE: \uc885\ud569\uc801\uc778 \uc2dc\uc2a4\ud15c \uac80\uc99d</li> <li>CRITICAL: \uc911\uc694 \uc2dc\uc2a4\ud15c\uc6a9 \uc5c4\uaca9\ud55c \uac80\uc99d</li> </ul>"},{"location":"09-validation/#_4","title":"\uac80\uc99d \uce74\ud14c\uace0\ub9ac","text":"<ul> <li>FUNCTIONAL: \uae30\ub2a5 \uac80\uc99d (\ubaa8\ub4c8 \uc784\ud3ec\ud2b8, \ud575\uc2ec \ub85c\uc9c1)</li> <li>INTEGRATION: \ud1b5\ud569 \uac80\uc99d (\ubaa8\ub4c8 \uac04 \uc0c1\ud638\uc791\uc6a9)</li> <li>PERFORMANCE: \uc131\ub2a5 \uac80\uc99d (\uc751\ub2f5\uc2dc\uac04, \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9)</li> <li>SECURITY: \ubcf4\uc548 \uac80\uc99d (\uad8c\ud55c, \ucde8\uc57d\uc810)</li> <li>COMPATIBILITY: \ud638\ud658\uc131 \uac80\uc99d (\ud50c\ub7ab\ud3fc, \ubc84\uc804)</li> <li>CONFIGURATION: \uc124\uc815 \uac80\uc99d</li> <li>DEPLOYMENT: \ubc30\ud3ec \uac80\uc99d</li> </ul>"},{"location":"09-validation/#_5","title":"\uac80\uc99d \uc0c1\ud0dc","text":"<ul> <li>PASS: \uac80\uc99d \uc131\uacf5</li> <li>FAIL: \uac80\uc99d \uc2e4\ud328</li> <li>WARNING: \uacbd\uace0 (\ubb38\uc81c \uc788\uc9c0\ub9cc \uce58\uba85\uc801\uc774\uc9c0 \uc54a\uc74c)</li> <li>SKIP: \uac80\uc99d \uc0dd\ub7b5</li> <li>ERROR: \uac80\uc99d \uc2e4\ud589 \uc624\ub958</li> </ul>"},{"location":"09-validation/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"09-validation/#systemvalidator","title":"SystemValidator \ud074\ub798\uc2a4","text":"<pre><code>from rfs.validation.validator import SystemValidator, ValidationSuite, ValidationLevel\n\n# \uc2dc\uc2a4\ud15c \uac80\uc99d\uae30 \uc0dd\uc131\nvalidator = SystemValidator(project_path=\"/path/to/project\")\n</code></pre>"},{"location":"09-validation/#validationsuite","title":"ValidationSuite \uc124\uc815","text":"<pre><code>from rfs.validation.validator import ValidationSuite, ValidationLevel, ValidationCategory\n\n# \uac80\uc99d \uc2a4\uc704\ud2b8 \uc0dd\uc131\nsuite = ValidationSuite(\n    name=\"\ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uac80\uc99d\",\n    description=\"\ud504\ub85c\ub355\uc158 \ud658\uacbd \ubc30\ud3ec \uc804 \uc885\ud569 \uac80\uc99d\",\n    level=ValidationLevel.COMPREHENSIVE,\n    categories=[\n        ValidationCategory.FUNCTIONAL,\n        ValidationCategory.SECURITY,\n        ValidationCategory.PERFORMANCE\n    ],\n    timeout=300,              # 5\ubd84 \ud0c0\uc784\uc544\uc6c3\n    parallel=True,            # \ubcd1\ub82c \uc2e4\ud589\n    continue_on_failure=True  # \uc2e4\ud328 \uc2dc \uacc4\uc18d \uc9c4\ud589\n)\n</code></pre>"},{"location":"09-validation/#validationresult","title":"ValidationResult \uad6c\uc870","text":"<pre><code>@dataclass\nclass ValidationResult:\n    category: ValidationCategory      # \uac80\uc99d \uce74\ud14c\uace0\ub9ac\n    name: str                        # \uac80\uc99d \ud56d\ubaa9\uba85\n    status: ValidationStatus         # \uac80\uc99d \uc0c1\ud0dc\n    message: str                     # \uacb0\uacfc \uba54\uc2dc\uc9c0\n    details: Dict[str, Any]          # \uc0c1\uc138 \uc815\ubcf4\n    execution_time: float            # \uc2e4\ud589 \uc2dc\uac04\n    recommendations: List[str]       # \uad8c\uc7a5\uc0ac\ud56d\n    severity: str                    # \uc2ec\uac01\ub3c4 (info/warning/error/critical)\n</code></pre>"},{"location":"09-validation/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"09-validation/#_7","title":"\uae30\ubcf8 \uc2dc\uc2a4\ud15c \uac80\uc99d","text":"<pre><code>from rfs.validation.validator import (\n    SystemValidator, \n    ValidationSuite, \n    ValidationLevel\n)\nimport asyncio\n\nasync def run_basic_validation():\n    \"\"\"\uae30\ubcf8 \uc2dc\uc2a4\ud15c \uac80\uc99d \uc2e4\ud589\"\"\"\n    validator = SystemValidator()\n\n    # \uae30\ubcf8 \uac80\uc99d \uc2a4\uc704\ud2b8\n    suite = ValidationSuite(\n        name=\"\uae30\ubcf8 \uc2dc\uc2a4\ud15c \uac80\uc99d\",\n        description=\"\ud575\uc2ec \uae30\ub2a5 \ub3d9\uc791 \ud655\uc778\",\n        level=ValidationLevel.BASIC\n    )\n\n    # \uac80\uc99d \uc2e4\ud589\n    result = await validator.run_validation(suite)\n\n    if result.is_success():\n        report = result.unwrap()\n        print(f\"\uac80\uc99d \uc644\ub8cc: {report['summary']['success_rate']:.1f}% \uc131\uacf5\")\n\n        # \uc2e4\ud328\ud55c \ud56d\ubaa9 \ud655\uc778\n        if report['summary']['failed_tests'] &gt; 0:\n            print(\"\uc2e4\ud328\ud55c \uac80\uc99d \ud56d\ubaa9:\")\n            for detail in report['detailed_results']:\n                if detail['status'] in ['fail', 'error']:\n                    print(f\"- {detail['name']}: {detail['message']}\")\n    else:\n        print(f\"\uac80\uc99d \uc2e4\ud328: {result.unwrap_err()}\")\n\n# \uc2e4\ud589\nasyncio.run(run_basic_validation())\n</code></pre>"},{"location":"09-validation/#_8","title":"\uc885\ud569 \ud504\ub85c\ub355\uc158 \uac80\uc99d","text":"<pre><code>from rfs.validation.validator import (\n    SystemValidator,\n    ValidationSuite,\n    ValidationLevel,\n    ValidationCategory\n)\n\nasync def production_validation():\n    \"\"\"\ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uc804 \uc885\ud569 \uac80\uc99d\"\"\"\n    validator = SystemValidator(project_path=\".\")\n\n    # \uc885\ud569 \uac80\uc99d \uc2a4\uc704\ud2b8\n    suite = ValidationSuite(\n        name=\"\ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uac80\uc99d\",\n        description=\"\ud504\ub85c\ub355\uc158 \ud658\uacbd \ubc30\ud3ec \uc804 \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c \uac80\uc99d\",\n        level=ValidationLevel.COMPREHENSIVE,\n        categories=[\n            ValidationCategory.FUNCTIONAL,\n            ValidationCategory.INTEGRATION,\n            ValidationCategory.PERFORMANCE,\n            ValidationCategory.SECURITY,\n            ValidationCategory.COMPATIBILITY\n        ],\n        timeout=600,  # 10\ubd84 \ud0c0\uc784\uc544\uc6c3\n        parallel=True,\n        continue_on_failure=True\n    )\n\n    # \uac80\uc99d \uc2e4\ud589\n    result = await validator.run_validation(suite)\n\n    if result.is_success():\n        report = result.unwrap()\n\n        # \uacb0\uacfc \ubd84\uc11d\n        summary = report['summary']\n        print(f\"\uac80\uc99d \uacb0\uacfc: {summary['overall_status']}\")\n        print(f\"\uc131\uacf5\ub960: {summary['success_rate']:.1f}%\")\n        print(f\"\ucd1d \ud14c\uc2a4\ud2b8: {summary['total_tests']}\")\n        print(f\"\ud1b5\uacfc: {summary['passed_tests']}\")\n        print(f\"\uc2e4\ud328: {summary['failed_tests']}\")\n        print(f\"\uacbd\uace0: {summary['warning_tests']}\")\n\n        # \uc2ec\uac01\ud55c \ubb38\uc81c\uac00 \uc788\uc73c\uba74 \ubc30\ud3ec \uc911\ub2e8\n        if summary['critical_issues'] &gt; 0:\n            print(\"\u274c \uc2ec\uac01\ud55c \ubb38\uc81c \ubc1c\uacac - \ubc30\ud3ec \uc911\ub2e8 \ud544\uc694\")\n            return False\n        elif summary['failed_tests'] &gt; 0:\n            print(\"\u26a0\ufe0f  \uc77c\ubd80 \uac80\uc99d \uc2e4\ud328 - \uac80\ud1a0 \ud6c4 \ubc30\ud3ec\")\n            return False\n        else:\n            print(\"\u2705 \ubaa8\ub4e0 \uac80\uc99d \ud1b5\uacfc - \ubc30\ud3ec \uac00\ub2a5\")\n            return True\n\n    return False\n\n# \uc2e4\ud589 \ubc0f \ubc30\ud3ec \uacb0\uc815\nif asyncio.run(production_validation()):\n    print(\"\ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uc9c4\ud589\")\nelse:\n    print(\"\ubc30\ud3ec \uc911\ub2e8 - \ubb38\uc81c \ud574\uacb0 \ud6c4 \uc7ac\uc2dc\ub3c4\")\n</code></pre>"},{"location":"09-validation/#_9","title":"\ud2b9\uc815 \uce74\ud14c\uace0\ub9ac \uac80\uc99d","text":"<pre><code>async def security_validation():\n    \"\"\"\ubcf4\uc548 \uac80\uc99d\ub9cc \uc2e4\ud589\"\"\"\n    validator = SystemValidator()\n\n    # \ubcf4\uc548 \uac80\uc99d \uc804\uc6a9 \uc2a4\uc704\ud2b8\n    suite = ValidationSuite(\n        name=\"\ubcf4\uc548 \uac80\uc99d\",\n        description=\"\uc2dc\uc2a4\ud15c \ubcf4\uc548 \uc0c1\ud0dc \uc810\uac80\",\n        level=ValidationLevel.CRITICAL,\n        categories=[ValidationCategory.SECURITY],\n        timeout=180\n    )\n\n    result = await validator.run_validation(suite)\n\n    if result.is_success():\n        report = result.unwrap()\n\n        # \ubcf4\uc548 \uad00\ub828 \uad8c\uc7a5\uc0ac\ud56d \ucd9c\ub825\n        if report['recommendations']:\n            print(\"\ubcf4\uc548 \uad8c\uc7a5\uc0ac\ud56d:\")\n            for rec in report['recommendations']:\n                print(f\"- {rec}\")\n\n        # \uc2ec\uac01\ud55c \ubcf4\uc548 \ubb38\uc81c \ud655\uc778\n        critical_security_issues = [\n            r for r in report['detailed_results']\n            if r['category'] == 'security' and r['severity'] == 'critical'\n        ]\n\n        if critical_security_issues:\n            print(\"\ud83d\udea8 \uc2ec\uac01\ud55c \ubcf4\uc548 \ubb38\uc81c \ubc1c\uacac!\")\n            for issue in critical_security_issues:\n                print(f\"- {issue['name']}: {issue['message']}\")\n\n    return result\n\n# \ubcf4\uc548 \uac80\uc99d \uc2e4\ud589\nawait security_validation()\n</code></pre>"},{"location":"09-validation/#_10","title":"\uc131\ub2a5 \ubca4\uce58\ub9c8\ud0b9","text":"<pre><code>async def performance_benchmark():\n    \"\"\"\uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c \uc2e4\ud589\"\"\"\n    validator = SystemValidator()\n\n    # \uc131\ub2a5 \uac80\uc99d \uc2a4\uc704\ud2b8\n    suite = ValidationSuite(\n        name=\"\uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c\",\n        description=\"\uc2dc\uc2a4\ud15c \uc131\ub2a5 \uce21\uc815 \ubc0f \ubd84\uc11d\",\n        level=ValidationLevel.COMPREHENSIVE,\n        categories=[ValidationCategory.PERFORMANCE],\n        timeout=300\n    )\n\n    result = await validator.run_validation(suite)\n\n    if result.is_success():\n        report = result.unwrap()\n\n        # \uc131\ub2a5 \uba54\ud2b8\ub9ad \ubd84\uc11d\n        performance_results = [\n            r for r in report['detailed_results']\n            if r['category'] == 'performance'\n        ]\n\n        print(\"\uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c \uacb0\uacfc:\")\n        for perf_result in performance_results:\n            print(f\"- {perf_result['name']}: {perf_result['message']}\")\n\n            if 'import_time_seconds' in perf_result.get('details', {}):\n                import_time = perf_result['details']['import_time_seconds']\n                print(f\"  \uc784\ud3ec\ud2b8 \uc2dc\uac04: {import_time:.3f}\ucd08\")\n\n            if 'memory_mb' in perf_result.get('details', {}):\n                memory_usage = perf_result['details']['memory_mb']\n                print(f\"  \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {memory_usage:.1f}MB\")\n\n    return result\n\n# \uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c \uc2e4\ud589\nawait performance_benchmark()\n</code></pre>"},{"location":"09-validation/#_11","title":"\ucee4\uc2a4\ud140 \uac80\uc99d \ub85c\uc9c1","text":"<pre><code>from rfs.validation.validator import (\n    SystemValidator, \n    ValidationResult, \n    ValidationStatus, \n    ValidationCategory\n)\n\nclass CustomValidator(SystemValidator):\n    \"\"\"\ucee4\uc2a4\ud140 \uac80\uc99d\uae30\"\"\"\n\n    async def _run_custom_validation(self, suite) -&gt; list[ValidationResult]:\n        \"\"\"\ucee4\uc2a4\ud140 \uac80\uc99d \ub85c\uc9c1\"\"\"\n        results = []\n\n        try:\n            # 1. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uac80\uc99d\n            db_result = await self._validate_database_connection()\n            results.append(db_result)\n\n            # 2. \uc678\ubd80 API \uc811\uadfc \uac80\uc99d\n            api_result = await self._validate_external_apis()\n            results.append(api_result)\n\n            # 3. \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uac80\uc99d\n            business_result = await self._validate_business_logic()\n            results.append(business_result)\n\n        except Exception as e:\n            results.append(ValidationResult(\n                category=ValidationCategory.FUNCTIONAL,\n                name=\"\ucee4\uc2a4\ud140 \uac80\uc99d\",\n                status=ValidationStatus.ERROR,\n                message=f\"\ucee4\uc2a4\ud140 \uac80\uc99d \uc911 \uc624\ub958: {str(e)}\",\n                severity=\"error\"\n            ))\n\n        return results\n\n    async def _validate_database_connection(self) -&gt; ValidationResult:\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc0c1\ud0dc \uac80\uc99d\"\"\"\n        try:\n            # \uc2e4\uc81c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\n            # connection = await get_db_connection()\n            # await connection.ping()\n\n            return ValidationResult(\n                category=ValidationCategory.INTEGRATION,\n                name=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\",\n                status=ValidationStatus.PASS,\n                message=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc815\uc0c1\",\n                details={\"connection_time\": 0.05},\n                severity=\"info\"\n            )\n        except Exception as e:\n            return ValidationResult(\n                category=ValidationCategory.INTEGRATION,\n                name=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\",\n                status=ValidationStatus.FAIL,\n                message=f\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328: {str(e)}\",\n                severity=\"critical\",\n                recommendations=[\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc11c\ubc84 \uc0c1\ud0dc \ud655\uc778\", \"\uc5f0\uacb0 \uc124\uc815 \uac80\ud1a0\"]\n            )\n\n    async def _validate_external_apis(self) -&gt; ValidationResult:\n        \"\"\"\uc678\ubd80 API \uc811\uadfc\uc131 \uac80\uc99d\"\"\"\n        try:\n            # \uc678\ubd80 API \ud638\ucd9c \ud14c\uc2a4\ud2b8\n            apis = [\n                \"https://api.example1.com/health\",\n                \"https://api.example2.com/status\"\n            ]\n\n            failed_apis = []\n            for api in apis:\n                # API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n                # response = await http_client.get(api)\n                # if response.status_code != 200:\n                #     failed_apis.append(api)\n                pass\n\n            if failed_apis:\n                return ValidationResult(\n                    category=ValidationCategory.INTEGRATION,\n                    name=\"\uc678\ubd80 API \uc811\uadfc\uc131\",\n                    status=ValidationStatus.WARNING,\n                    message=f\"{len(failed_apis)}\uac1c API \uc811\uadfc \ubd88\uac00\",\n                    details={\"failed_apis\": failed_apis},\n                    severity=\"warning\"\n                )\n            else:\n                return ValidationResult(\n                    category=ValidationCategory.INTEGRATION,\n                    name=\"\uc678\ubd80 API \uc811\uadfc\uc131\",\n                    status=ValidationStatus.PASS,\n                    message=\"\ubaa8\ub4e0 \uc678\ubd80 API \uc811\uadfc \uac00\ub2a5\",\n                    severity=\"info\"\n                )\n\n        except Exception as e:\n            return ValidationResult(\n                category=ValidationCategory.INTEGRATION,\n                name=\"\uc678\ubd80 API \uc811\uadfc\uc131\",\n                status=ValidationStatus.ERROR,\n                message=f\"API \uc811\uadfc\uc131 \uac80\uc99d \uc2e4\ud328: {str(e)}\",\n                severity=\"error\"\n            )\n\n# \ucee4\uc2a4\ud140 \uac80\uc99d\uae30 \uc0ac\uc6a9\nasync def run_custom_validation():\n    custom_validator = CustomValidator()\n\n    suite = ValidationSuite(\n        name=\"\ucee4\uc2a4\ud140 \uc2dc\uc2a4\ud15c \uac80\uc99d\",\n        description=\"\ud2b9\ud654\ub41c \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uac80\uc99d\"\n    )\n\n    result = await custom_validator.run_validation(suite)\n    return result\n</code></pre>"},{"location":"09-validation/#_12","title":"\uac80\uc99d \uacb0\uacfc \uc800\uc7a5 \ubc0f \ubd84\uc11d","text":"<pre><code>import json\nfrom datetime import datetime\n\nasync def validation_with_report():\n    \"\"\"\uac80\uc99d \uc2e4\ud589 \ud6c4 \uc0c1\uc138 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\"\"\"\n    validator = SystemValidator()\n\n    suite = ValidationSuite(\n        name=\"\uc77c\uc77c \uc2dc\uc2a4\ud15c \uac80\uc99d\",\n        description=\"\ub9e4\uc77c \uc790\ub3d9 \uc2e4\ud589\ub418\ub294 \uc2dc\uc2a4\ud15c \uac74\uac15 \uc0c1\ud0dc \ud655\uc778\",\n        level=ValidationLevel.STANDARD\n    )\n\n    # \uac80\uc99d \uc2e4\ud589\n    result = await validator.run_validation(suite)\n\n    if result.is_success():\n        report = result.unwrap()\n\n        # \ub9ac\ud3ec\ud2b8 \ud30c\uc77c \uc800\uc7a5\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        report_file = f\"validation_report_{timestamp}.json\"\n\n        save_result = await validator.save_report(report, report_file)\n        if save_result.is_success():\n            print(f\"\ub9ac\ud3ec\ud2b8 \uc800\uc7a5\ub428: {save_result.unwrap()}\")\n\n        # \ud2b8\ub80c\ub4dc \ubd84\uc11d \ub370\uc774\ud130 \uc0dd\uc131\n        trend_data = {\n            \"timestamp\": datetime.now().isoformat(),\n            \"success_rate\": report['summary']['success_rate'],\n            \"total_tests\": report['summary']['total_tests'],\n            \"failed_tests\": report['summary']['failed_tests'],\n            \"critical_issues\": report['summary']['critical_issues'],\n            \"categories\": {}\n        }\n\n        # \uce74\ud14c\uace0\ub9ac\ubcc4 \uc131\uacfc \ucd94\uc801\n        for category, stats in report.get('category_stats', {}).items():\n            trend_data['categories'][category] = {\n                \"success_rate\": stats['success_rate'],\n                \"total\": stats['total'],\n                \"failed\": stats['failed']\n            }\n\n        # \ud2b8\ub80c\ub4dc \ub370\uc774\ud130 \uc800\uc7a5 (\uc2e4\uc81c\ub85c\ub294 DB\uc5d0 \uc800\uc7a5)\n        trend_file = f\"validation_trend_{timestamp}.json\"\n        with open(trend_file, 'w') as f:\n            json.dump(trend_data, f, indent=2)\n\n        print(f\"\ud2b8\ub80c\ub4dc \ub370\uc774\ud130 \uc800\uc7a5\ub428: {trend_file}\")\n\n        return report\n    else:\n        print(f\"\uac80\uc99d \uc2e4\ud328: {result.unwrap_err()}\")\n        return None\n\n# \uac80\uc99d \ubc0f \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\nreport = await validation_with_report()\n</code></pre>"},{"location":"09-validation/#cicd","title":"CI/CD \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569","text":"<pre><code>import sys\nimport asyncio\n\nasync def ci_validation_gate():\n    \"\"\"CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc6a9 \uac80\uc99d \uac8c\uc774\ud2b8\"\"\"\n    validator = SystemValidator()\n\n    # CI \ud658\uacbd\uc6a9 \ube60\ub978 \uac80\uc99d\n    suite = ValidationSuite(\n        name=\"CI \uac80\uc99d \uac8c\uc774\ud2b8\",\n        description=\"\ube4c\ub4dc \ubc0f \ubc30\ud3ec \uc2b9\uc778\uc744 \uc704\ud55c \ud544\uc218 \uac80\uc99d\",\n        level=ValidationLevel.STANDARD,\n        categories=[\n            ValidationCategory.FUNCTIONAL,\n            ValidationCategory.SECURITY\n        ],\n        timeout=120,  # 2\ubd84 \uc81c\ud55c\n        parallel=True,\n        continue_on_failure=False  # \uc2e4\ud328 \uc2dc \uc989\uc2dc \uc911\ub2e8\n    )\n\n    result = await validator.run_validation(suite)\n\n    if result.is_success():\n        report = result.unwrap()\n        summary = report['summary']\n\n        # CI \uacb0\uacfc \ucd9c\ub825 (GitHub Actions, Jenkins \ub4f1\uc5d0\uc11c \ud655\uc778)\n        print(f\"::notice title=Validation Results::{summary['passed_tests']}/{summary['total_tests']} tests passed\")\n\n        if summary['overall_status'] == 'PASS':\n            print(\"::notice title=CI Gate::\u2705 All validations passed - Build approved\")\n            sys.exit(0)  # \uc131\uacf5\n        elif summary['critical_issues'] &gt; 0:\n            print(f\"::error title=CI Gate::\u274c {summary['critical_issues']} critical issues found\")\n            # \uc2e4\ud328\ud55c \uc911\uc694 \uac80\uc99d \ud56d\ubaa9 \ucd9c\ub825\n            for detail in report['detailed_results']:\n                if detail['severity'] == 'critical' and detail['status'] in ['fail', 'error']:\n                    print(f\"::error title=Critical Issue::{detail['name']} - {detail['message']}\")\n            sys.exit(1)  # \uc2e4\ud328\n        else:\n            print(f\"::warning title=CI Gate::\u26a0\ufe0f {summary['failed_tests']} tests failed - Review required\")\n            sys.exit(1)  # \uc2e4\ud328\n    else:\n        print(f\"::error title=Validation Error::{result.unwrap_err()}\")\n        sys.exit(1)  # \uc2e4\ud328\n\n# CI \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\nif __name__ == \"__main__\":\n    asyncio.run(ci_validation_gate())\n</code></pre>"},{"location":"09-validation/#_13","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"09-validation/#1","title":"1. \uac80\uc99d \uc2a4\uc704\ud2b8 \uad6c\uc131","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ubaa9\uc801\ubcc4 \uac80\uc99d \uc2a4\uc704\ud2b8 \ubd84\ub9ac\ndevelopment_suite = ValidationSuite(\n    name=\"\uac1c\ubc1c \ud658\uacbd \uac80\uc99d\",\n    level=ValidationLevel.BASIC,\n    categories=[ValidationCategory.FUNCTIONAL],\n    timeout=60\n)\n\nstaging_suite = ValidationSuite(\n    name=\"\uc2a4\ud14c\uc774\uc9d5 \uac80\uc99d\", \n    level=ValidationLevel.STANDARD,\n    categories=[\n        ValidationCategory.FUNCTIONAL,\n        ValidationCategory.INTEGRATION,\n        ValidationCategory.PERFORMANCE\n    ],\n    timeout=180\n)\n\nproduction_suite = ValidationSuite(\n    name=\"\ud504\ub85c\ub355\uc158 \uac80\uc99d\",\n    level=ValidationLevel.COMPREHENSIVE,\n    categories=list(ValidationCategory),\n    timeout=600\n)\n</code></pre>"},{"location":"09-validation/#2","title":"2. \uac80\uc99d \uacb0\uacfc \ud65c\uc6a9","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uacb0\uacfc\uc5d0 \ub530\ub978 \uc801\uc808\ud55c \uc561\uc158\nasync def deploy_with_validation():\n    result = await validator.run_validation(production_suite)\n\n    if result.is_success():\n        report = result.unwrap()\n\n        if report['summary']['overall_status'] == 'PASS':\n            await deploy_to_production()\n        elif report['summary']['critical_issues'] == 0:\n            # \uacbd\uace0\ub9cc \uc788\ub294 \uacbd\uc6b0 \uc218\ub3d9 \uc2b9\uc778\n            approval = await request_manual_approval(report)\n            if approval:\n                await deploy_to_production()\n        else:\n            await block_deployment(report)\n    else:\n        await handle_validation_error(result.unwrap_err())\n</code></pre>"},{"location":"09-validation/#3","title":"3. \ucee4\uc2a4\ud140 \uac80\uc99d \uad6c\ud604","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ube44\uc988\ub2c8\uc2a4 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\ub294 \uac80\uc99d\nclass ECommerceValidator(SystemValidator):\n    async def _run_business_validation(self, suite):\n        results = []\n\n        # \uc7ac\uace0 \uc2dc\uc2a4\ud15c \uac80\uc99d\n        inventory_result = await self._validate_inventory_system()\n        results.append(inventory_result)\n\n        # \uacb0\uc81c \uc2dc\uc2a4\ud15c \uac80\uc99d\n        payment_result = await self._validate_payment_gateway()\n        results.append(payment_result)\n\n        # \uc8fc\ubb38 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778 \uac80\uc99d\n        order_result = await self._validate_order_pipeline()\n        results.append(order_result)\n\n        return results\n</code></pre>"},{"location":"09-validation/#_14","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"09-validation/#1_1","title":"1. \uac80\uc99d \uc2dc\uac04 \uad00\ub9ac","text":"<ul> <li>\uac01 \uac80\uc99d \uce74\ud14c\uace0\ub9ac\ubcc4\ub85c \uc801\uc808\ud55c \ud0c0\uc784\uc544\uc6c3 \uc124\uc815</li> <li>\ubcd1\ub82c \uc2e4\ud589\uc73c\ub85c \uc804\uccb4 \uac80\uc99d \uc2dc\uac04 \ub2e8\ucd95</li> <li>CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c\ub294 \ube60\ub978 \uac80\uc99d \uc6b0\uc120</li> </ul>"},{"location":"09-validation/#2_1","title":"2. \uac80\uc99d \ud488\uc9c8 \ubcf4\uc7a5","text":"<ul> <li>\uac70\uc9d3 \uc591\uc131(False Positive) \ucd5c\uc18c\ud654</li> <li>\uc2e4\uc81c \ubb38\uc81c\ub97c \ub193\uce58\uc9c0 \uc54a\ub3c4\ub85d \ucda9\ubd84\ud55c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ud3ec\ud568</li> <li>\uc815\uae30\uc801\uc778 \uac80\uc99d \ub85c\uc9c1 \uc5c5\ub370\uc774\ud2b8</li> </ul>"},{"location":"09-validation/#3_1","title":"3. \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub7c9 \uace0\ub824","text":"<ul> <li>\uac80\uc99d \uc2e4\ud589 \uc2dc \uc2dc\uc2a4\ud15c \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub7c9 \ubaa8\ub2c8\ud130\ub9c1</li> <li>\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758</li> <li>\uc801\uc808\ud55c \uac80\uc99d \uc8fc\uae30 \uc124\uc815</li> </ul>"},{"location":"09-validation/#4","title":"4. \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d","text":"<ul> <li>\uac80\uc99d \uacfc\uc815\uc5d0\uc11c \ubbfc\uac10\ud55c \uc815\ubcf4 \ub178\ucd9c \ubc29\uc9c0</li> <li>\uac80\uc99d \uacb0\uacfc\uc5d0 \uc2dc\uc2a4\ud15c \ub0b4\ubd80 \uc815\ubcf4 \ud3ec\ud568 \uc2dc \uc811\uadfc \uc81c\uc5b4</li> <li>\uac80\uc99d \ub85c\uadf8\uc758 \ubcf4\uc548 \uad00\ub9ac</li> </ul>"},{"location":"09-validation/#_15","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ud575\uc2ec \ud328\ud134 - Result \ud328\ud134\uc744 \ud1b5\ud55c \uac80\uc99d \uacb0\uacfc \ucc98\ub9ac</li> <li>\ubcf4\uc548 - \ubcf4\uc548 \uac80\uc99d \ubc0f \ucde8\uc57d\uc810 \uc2a4\uce94</li> <li>\ubaa8\ub2c8\ud130\ub9c1 - \uac80\uc99d \uba54\ud2b8\ub9ad \ubc0f \uc54c\ub9bc</li> <li>\ubc30\ud3ec - \ubc30\ud3ec \ud30c\uc774\ud504\ub77c\uc778 \uac80\uc99d \ud1b5\ud569</li> </ul>"},{"location":"10-access-control/","title":"\uc811\uadfc \uc81c\uc5b4 (Access Control)","text":""},{"location":"10-access-control/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \uc811\uadfc \uc81c\uc5b4 \uc2dc\uc2a4\ud15c\uc740 RBAC(\uc5ed\ud560 \uae30\ubc18)\uacfc ABAC(\uc18d\uc131 \uae30\ubc18) \uc811\uadfc \uc81c\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ub370\ucf54\ub808\uc774\ud130 \uae30\ubc18\uc758 \uc120\uc5b8\uc801 \ubcf4\uc548 \ubaa8\ub378\ub85c \uc778\uc99d, \uc778\uac00, \uc18c\uc720\uad8c \uac80\uc99d\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4.</p>"},{"location":"10-access-control/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"10-access-control/#vs","title":"\uc778\uc99d vs \uc778\uac00","text":"<ul> <li>\uc778\uc99d(Authentication): \uc0ac\uc6a9\uc790\uac00 \ub204\uad6c\uc778\uc9c0 \ud655\uc778</li> <li>\uc778\uac00(Authorization): \uc0ac\uc6a9\uc790\uac00 \ud2b9\uc815 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uad8c\ud55c\uc774 \uc788\ub294\uc9c0 \ud655\uc778</li> </ul>"},{"location":"10-access-control/#rbac","title":"\uc5ed\ud560 \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4 (RBAC)","text":"<ul> <li>\uc5ed\ud560(Role): \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud560\ub2f9\ub418\ub294 \uad8c\ud55c \uc9d1\ud569</li> <li>\uad8c\ud55c(Permission): \ud2b9\uc815 \ub9ac\uc18c\uc2a4\uc5d0 \ub300\ud55c \uc791\uc5c5 \uad8c\ud55c</li> <li>\uacc4\uce35\uc801 \uc5ed\ud560: \uc0c1\uc704 \uc5ed\ud560\uc774 \ud558\uc704 \uc5ed\ud560\uc758 \uad8c\ud55c\uc744 \ud3ec\ud568</li> </ul>"},{"location":"10-access-control/#abac","title":"\uc18d\uc131 \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4 (ABAC)","text":"<ul> <li>\uc18d\uc131(Attribute): \uc0ac\uc6a9\uc790, \ub9ac\uc18c\uc2a4, \ud658\uacbd\uc758 \ud2b9\uc131</li> <li>\uc815\ucc45(Policy): \uc18d\uc131 \uae30\ubc18\uc758 \uc811\uadfc \uc81c\uc5b4 \uaddc\uce59</li> <li>\ub3d9\uc801 \uc81c\uc5b4: \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \ub530\ub978 \ub3d9\uc801 \uad8c\ud55c \ubd80\uc5ec</li> </ul>"},{"location":"10-access-control/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"10-access-control/#_3","title":"\uc5ed\ud560 \uc815\uc758","text":"<pre><code>from rfs.security.access_control import Role\n\nclass Role(Enum):\n    SUPER_ADMIN = \"super_admin\"    # \ucd5c\uace0 \uad00\ub9ac\uc790 (\ub808\ubca8 100)\n    ADMIN = \"admin\"                # \uad00\ub9ac\uc790 (\ub808\ubca8 80)\n    MODERATOR = \"moderator\"        # \uc6b4\uc601\uc790 (\ub808\ubca8 60)\n    USER = \"user\"                  # \uc77c\ubc18 \uc0ac\uc6a9\uc790 (\ub808\ubca8 40)\n    GUEST = \"guest\"               # \uac8c\uc2a4\ud2b8 (\ub808\ubca8 20)\n    SERVICE = \"service\"           # \uc11c\ube44\uc2a4 \uacc4\uc815 (\ub808\ubca8 90)\n</code></pre>"},{"location":"10-access-control/#_4","title":"\uad8c\ud55c \uc815\uc758","text":"<pre><code>from rfs.security.access_control import Permission\n\nclass Permission(Enum):\n    # \uc77d\uae30 \uad8c\ud55c\n    READ = \"read\"\n    READ_OWN = \"read_own\"\n    READ_ALL = \"read_all\"\n\n    # \uc4f0\uae30 \uad8c\ud55c\n    WRITE = \"write\"\n    WRITE_OWN = \"write_own\"\n    WRITE_ALL = \"write_all\"\n\n    # \uc0ad\uc81c \uad8c\ud55c\n    DELETE = \"delete\"\n    DELETE_OWN = \"delete_own\"\n    DELETE_ALL = \"delete_all\"\n\n    # \uad00\ub9ac \uad8c\ud55c\n    MANAGE_USERS = \"manage_users\"\n    MANAGE_ROLES = \"manage_roles\"\n    MANAGE_PERMISSIONS = \"manage_permissions\"\n    MANAGE_SYSTEM = \"manage_system\"\n</code></pre>"},{"location":"10-access-control/#api_1","title":"\ub370\ucf54\ub808\uc774\ud130 API","text":"\ub370\ucf54\ub808\uc774\ud130 \uc124\uba85 \uc8fc\uc694 \ub9e4\uac1c\ubcc0\uc218 <code>@RequiresAuthentication</code> \uc778\uc99d \ud544\uc218 <code>allow_service_account</code>, <code>check_verified</code> <code>@RequiresRole</code> \uc5ed\ud560 \uae30\ubc18 \uc81c\uc5b4 <code>*required_roles</code>, <code>require_all</code>, <code>allow_higher</code> <code>@RequiresPermission</code> \uad8c\ud55c \uae30\ubc18 \uc81c\uc5b4 <code>*required_permissions</code>, <code>require_all</code> <code>@RequiresOwnership</code> \uc18c\uc720\uad8c \uac80\uc99d <code>resource_id_param</code>, <code>owner_field</code>, <code>allow_admin</code>"},{"location":"10-access-control/#_5","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"10-access-control/#_6","title":"\uae30\ubcf8 \uc778\uc99d \uc81c\uc5b4","text":"<pre><code>from rfs.security.access_control import (\n    RequiresAuthentication,\n    RequiresRole,\n    RequiresPermission,\n    Role,\n    Permission,\n    User,\n    set_current_user\n)\nfrom rfs.core.result import Result, Success, Failure\n\n# \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ubc0f \uc124\uc815\nuser = User(\n    id=\"user123\",\n    username=\"john_doe\",\n    email=\"john@example.com\",\n    roles={Role.USER},\n    permissions={Permission.READ, Permission.WRITE_OWN}\n)\n\n# \ud604\uc7ac \uc0ac\uc6a9\uc790 \uc124\uc815\nset_current_user(user)\n\n@RequiresAuthentication()\nasync def get_profile() -&gt; Result[dict, str]:\n    \"\"\"\ud504\ub85c\ud544 \uc870\ud68c - \uc778\uc99d \ud544\uc694\"\"\"\n    return Success({\"name\": \"John Doe\", \"email\": \"john@example.com\"})\n\n# \uc2e4\ud589\ntry:\n    result = await get_profile()\n    print(result.unwrap())  # {'name': 'John Doe', 'email': 'john@example.com'}\nexcept AuthenticationError as e:\n    print(f\"\uc778\uc99d \uc624\ub958: {e}\")\n</code></pre>"},{"location":"10-access-control/#_7","title":"\uc5ed\ud560 \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4","text":"<pre><code>@RequiresRole(Role.ADMIN)\nasync def delete_user(user_id: str) -&gt; Result[str, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc0ad\uc81c - \uad00\ub9ac\uc790\ub9cc \uac00\ub2a5\"\"\"\n    try:\n        # \uc0ac\uc6a9\uc790 \uc0ad\uc81c \ub85c\uc9c1\n        await remove_user_from_db(user_id)\n        return Success(f\"\uc0ac\uc6a9\uc790 {user_id} \uc0ad\uc81c \uc644\ub8cc\")\n    except Exception as e:\n        return Failure(str(e))\n\n@RequiresRole(Role.MODERATOR, Role.ADMIN, require_all=False)\nasync def moderate_content(content_id: str) -&gt; Result[str, str]:\n    \"\"\"\ucf58\ud150\uce20 \uc870\uc815 - \uc6b4\uc601\uc790 \ub610\ub294 \uad00\ub9ac\uc790\"\"\"\n    return Success(f\"\ucf58\ud150\uce20 {content_id} \uc870\uc815 \uc644\ub8cc\")\n\n# \uad00\ub9ac\uc790 \uc0ac\uc6a9\uc790\ub85c \uc2e4\ud589\nadmin_user = User(\n    id=\"admin1\",\n    username=\"admin\",\n    email=\"admin@example.com\",\n    roles={Role.ADMIN}\n)\nset_current_user(admin_user)\n\nresult = await delete_user(\"user123\")\nprint(result.unwrap())  # \"\uc0ac\uc6a9\uc790 user123 \uc0ad\uc81c \uc644\ub8cc\"\n</code></pre>"},{"location":"10-access-control/#_8","title":"\uad8c\ud55c \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4","text":"<pre><code>@RequiresPermission(Permission.WRITE_ALL)\nasync def create_global_announcement(message: str) -&gt; Result[dict, str]:\n    \"\"\"\uc804\uc5ed \uacf5\uc9c0\uc0ac\ud56d \uc0dd\uc131 - \uc804\uccb4 \uc4f0\uae30 \uad8c\ud55c \ud544\uc694\"\"\"\n    announcement = {\n        \"id\": \"announce123\",\n        \"message\": message,\n        \"type\": \"global\"\n    }\n    return Success(announcement)\n\n@RequiresPermission(Permission.READ, Permission.WRITE_OWN, require_all=True)\nasync def update_own_post(post_id: str, updates: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc790\uc2e0\uc758 \uac8c\uc2dc\uae00 \uc218\uc815 - \uc77d\uae30\uc640 \uac1c\uc778 \uc4f0\uae30 \uad8c\ud55c \ubaa8\ub450 \ud544\uc694\"\"\"\n    try:\n        # \uac8c\uc2dc\uae00 \uc5c5\ub370\uc774\ud2b8 \ub85c\uc9c1\n        updated_post = {\"id\": post_id, **updates}\n        return Success(updated_post)\n    except Exception as e:\n        return Failure(str(e))\n\n# \uad8c\ud55c\uc774 \uc788\ub294 \uc0ac\uc6a9\uc790\ub85c \uc124\uc815\nuser_with_perms = User(\n    id=\"user456\",\n    username=\"writer\",\n    email=\"writer@example.com\",\n    roles={Role.USER},\n    permissions={Permission.READ, Permission.WRITE_OWN, Permission.WRITE_ALL}\n)\nset_current_user(user_with_perms)\n\n# \uc2e4\ud589\nresult = await create_global_announcement(\"\uc2dc\uc2a4\ud15c \uc5c5\ub370\uc774\ud2b8 \uacf5\uc9c0\")\nprint(result.unwrap())\n</code></pre>"},{"location":"10-access-control/#_9","title":"\uc18c\uc720\uad8c \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4","text":"<pre><code>@RequiresOwnership(\n    resource_id_param=\"post_id\",\n    owner_field=\"author_id\",\n    allow_admin=True\n)\nasync def delete_post(post_id: str, author_id: str) -&gt; Result[str, str]:\n    \"\"\"\uac8c\uc2dc\uae00 \uc0ad\uc81c - \uc791\uc131\uc790 \ub610\ub294 \uad00\ub9ac\uc790\ub9cc \uac00\ub2a5\"\"\"\n    try:\n        # \uac8c\uc2dc\uae00 \uc0ad\uc81c \ub85c\uc9c1\n        await remove_post_from_db(post_id)\n        return Success(f\"\uac8c\uc2dc\uae00 {post_id} \uc0ad\uc81c \uc644\ub8cc\")\n    except Exception as e:\n        return Failure(str(e))\n\n# \ucee4\uc2a4\ud140 \uc18c\uc720\uad8c \ud655\uc778 \ud568\uc218\nasync def check_document_ownership(user: User, resource_id: str) -&gt; bool:\n    \"\"\"\ubb38\uc11c \uc18c\uc720\uad8c \ud655\uc778\"\"\"\n    document = await get_document_from_db(resource_id)\n    return document and document.owner_id == user.id\n\n@RequiresOwnership(\n    resource_id_param=\"document_id\",\n    custom_checker=check_document_ownership,\n    allow_admin=True\n)\nasync def edit_document(document_id: str) -&gt; Result[dict, str]:\n    \"\"\"\ubb38\uc11c \ud3b8\uc9d1 - \uc18c\uc720\uc790\ub9cc \uac00\ub2a5\"\"\"\n    return Success({\"message\": f\"\ubb38\uc11c {document_id} \ud3b8\uc9d1 \uc644\ub8cc\"})\n\n# \uc18c\uc720\uc790\ub85c \uc2e4\ud589\nowner_user = User(\n    id=\"user789\",\n    username=\"document_owner\",\n    email=\"owner@example.com\",\n    roles={Role.USER}\n)\nset_current_user(owner_user)\n\n# \uc790\uc2e0\uc758 \uac8c\uc2dc\uae00 \uc0ad\uc81c (author_id\uac00 \ud604\uc7ac \uc0ac\uc6a9\uc790 ID\uc640 \uc77c\uce58)\nresult = await delete_post(\"post123\", author_id=\"user789\")\nprint(result.unwrap())\n</code></pre>"},{"location":"10-access-control/#_10","title":"\ubcf5\ud569 \ubcf4\uc548 \uc81c\uc5b4","text":"<pre><code>@RequiresAuthentication(check_verified=True)\n@RequiresRole(Role.MODERATOR, Role.ADMIN, require_all=False)\n@RequiresPermission(Permission.MANAGE_USERS)\nasync def suspend_user(\n    target_user_id: str, \n    reason: str,\n    current_user: User = None  # \uc790\ub3d9\uc73c\ub85c \uc8fc\uc785\ub428\n) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uacc4\uc815 \uc815\uc9c0 - \ubcf5\ud569 \ubcf4\uc548 \uc81c\uc5b4\"\"\"\n    try:\n        # \uc790\uc2e0\uc744 \uc815\uc9c0\uc2dc\ud0a4\ub824\ub294 \uc2dc\ub3c4 \ubc29\uc9c0\n        if current_user.id == target_user_id:\n            return Failure(\"\uc790\uc2e0\uc758 \uacc4\uc815\uc744 \uc815\uc9c0\uc2dc\ud0ac \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        # \uc0c1\uc704 \uc5ed\ud560 \uc0ac\uc6a9\uc790 \uc815\uc9c0 \ubc29\uc9c0\n        target_user = await get_user_from_db(target_user_id)\n        if target_user.has_role(Role.SUPER_ADMIN):\n            return Failure(\"\ucd5c\uace0 \uad00\ub9ac\uc790 \uacc4\uc815\uc740 \uc815\uc9c0\uc2dc\ud0ac \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        # \uacc4\uc815 \uc815\uc9c0 \uc2e4\ud589\n        suspension_result = {\n            \"target_user_id\": target_user_id,\n            \"suspended_by\": current_user.id,\n            \"reason\": reason,\n            \"suspended_at\": datetime.now().isoformat()\n        }\n\n        await suspend_user_in_db(target_user_id, suspension_result)\n\n        return Success(suspension_result)\n\n    except Exception as e:\n        return Failure(f\"\uc0ac\uc6a9\uc790 \uc815\uc9c0 \uc2e4\ud328: {str(e)}\")\n\n# \uad8c\ud55c\uc774 \uc788\ub294 \uc6b4\uc601\uc790\ub85c \uc124\uc815\nmoderator = User(\n    id=\"mod1\",\n    username=\"moderator\",\n    email=\"mod@example.com\",\n    roles={Role.MODERATOR},\n    permissions={Permission.MANAGE_USERS},\n    is_verified=True\n)\nset_current_user(moderator)\n\nresult = await suspend_user(\"spam_user123\", \"\uc2a4\ud338 \ud65c\ub3d9\")\nprint(result.unwrap())\n</code></pre>"},{"location":"10-access-control/#jwt","title":"JWT \ud1a0\ud070 \uae30\ubc18 \uc778\uc99d","text":"<pre><code>from rfs.security.access_control import TokenManager, get_token_manager\nimport jwt\n\n# \ud1a0\ud070 \ub9e4\ub2c8\uc800 \uc124\uc815\ntoken_manager = TokenManager(\n    secret_key=\"your-super-secret-key\",\n    access_token_expire=3600,    # 1\uc2dc\uac04\n    refresh_token_expire=604800  # 7\uc77c\n)\n\n# \uc0ac\uc6a9\uc790 \ub85c\uadf8\uc778 \ubc0f \ud1a0\ud070 \uc0dd\uc131\nasync def login_user(username: str, password: str) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub85c\uadf8\uc778\"\"\"\n    try:\n        # \uc0ac\uc6a9\uc790 \uc778\uc99d\n        user = await authenticate_user_credentials(username, password)\n        if not user:\n            return Failure(\"\uc798\ubabb\ub41c \uc778\uc99d \uc815\ubcf4\")\n\n        # JWT \ud1a0\ud070 \uc0dd\uc131\n        access_token = token_manager.create_access_token(user)\n        refresh_token = token_manager.create_refresh_token(user)\n\n        # \ud604\uc7ac \uc0ac\uc6a9\uc790 \uc124\uc815\n        set_current_user(user)\n\n        return Success({\n            \"access_token\": access_token,\n            \"refresh_token\": refresh_token,\n            \"token_type\": \"Bearer\",\n            \"expires_in\": 3600,\n            \"user\": {\n                \"id\": user.id,\n                \"username\": user.username,\n                \"roles\": [role.value for role in user.roles]\n            }\n        })\n\n    except Exception as e:\n        return Failure(f\"\ub85c\uadf8\uc778 \uc2e4\ud328: {str(e)}\")\n\n# \ud1a0\ud070 \uac80\uc99d \ubbf8\ub4e4\uc6e8\uc5b4\nasync def verify_token_middleware(token: str) -&gt; Result[User, str]:\n    \"\"\"JWT \ud1a0\ud070 \uac80\uc99d\"\"\"\n    try:\n        # \ud1a0\ud070 \uac80\uc99d\n        payload = token_manager.verify_token(token)\n        if not payload:\n            return Failure(\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud1a0\ud070\")\n\n        # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \ub85c\ub4dc\n        user = await get_user_by_id(payload[\"user_id\"])\n        if not user or not user.is_active:\n            return Failure(\"\ube44\ud65c\uc131 \uc0ac\uc6a9\uc790\")\n\n        # \ud604\uc7ac \uc0ac\uc6a9\uc790 \uc124\uc815\n        set_current_user(user)\n\n        return Success(user)\n\n    except Exception as e:\n        return Failure(f\"\ud1a0\ud070 \uac80\uc99d \uc2e4\ud328: {str(e)}\")\n\n# \ud1a0\ud070 \uac31\uc2e0\nasync def refresh_access_token(refresh_token: str) -&gt; Result[dict, str]:\n    \"\"\"\uc561\uc138\uc2a4 \ud1a0\ud070 \uac31\uc2e0\"\"\"\n    try:\n        # \ub9ac\ud504\ub808\uc2dc \ud1a0\ud070 \uac80\uc99d\n        payload = token_manager.verify_token(refresh_token, \"refresh\")\n        if not payload:\n            return Failure(\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub9ac\ud504\ub808\uc2dc \ud1a0\ud070\")\n\n        # \uc0ac\uc6a9\uc790 \ub85c\ub4dc\n        user = await get_user_by_id(payload[\"user_id\"])\n        if not user or not user.is_active:\n            return Failure(\"\ube44\ud65c\uc131 \uc0ac\uc6a9\uc790\")\n\n        # \uc0c8 \uc561\uc138\uc2a4 \ud1a0\ud070 \uc0dd\uc131\n        new_access_token = token_manager.create_access_token(user)\n\n        return Success({\n            \"access_token\": new_access_token,\n            \"token_type\": \"Bearer\",\n            \"expires_in\": 3600\n        })\n\n    except Exception as e:\n        return Failure(f\"\ud1a0\ud070 \uac31\uc2e0 \uc2e4\ud328: {str(e)}\")\n</code></pre>"},{"location":"10-access-control/#_11","title":"\ub3d9\uc801 \uad8c\ud55c \uc81c\uc5b4","text":"<pre><code>from datetime import datetime, time\n\nclass DynamicAccessController:\n    \"\"\"\ub3d9\uc801 \uc811\uadfc \uc81c\uc5b4\"\"\"\n\n    @staticmethod\n    async def check_business_hours() -&gt; bool:\n        \"\"\"\uc5c5\ubb34 \uc2dc\uac04 \ud655\uc778\"\"\"\n        now = datetime.now().time()\n        business_start = time(9, 0)  # \uc624\uc804 9\uc2dc\n        business_end = time(18, 0)   # \uc624\ud6c4 6\uc2dc\n        return business_start &lt;= now &lt;= business_end\n\n    @staticmethod\n    async def check_ip_whitelist(user_ip: str) -&gt; bool:\n        \"\"\"IP \ud654\uc774\ud2b8\ub9ac\uc2a4\ud2b8 \ud655\uc778\"\"\"\n        allowed_ips = [\"192.168.1.0/24\", \"10.0.0.0/8\"]\n        # IP \ubc94\uc704 \ud655\uc778 \ub85c\uc9c1 (\uc2e4\uc81c\ub85c\ub294 ipaddress \ubaa8\ub4c8 \uc0ac\uc6a9)\n        return True  # \uac04\uc18c\ud654\n\n    @staticmethod\n    async def check_security_level(user: User, required_level: int) -&gt; bool:\n        \"\"\"\ubcf4\uc548 \ub808\ubca8 \ud655\uc778\"\"\"\n        user_level = getattr(user, 'security_level', 0)\n        return user_level &gt;= required_level\n\ndef RequiresBusinessHours():\n    \"\"\"\uc5c5\ubb34 \uc2dc\uac04 \uc911\uc5d0\ub9cc \uc811\uadfc \ud5c8\uc6a9\"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            if not await DynamicAccessController.check_business_hours():\n                raise AuthorizationError(\"\uc5c5\ubb34 \uc2dc\uac04 \uc911\uc5d0\ub9cc \uc811\uadfc \uac00\ub2a5\ud569\ub2c8\ub2e4\")\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n\ndef RequiresSecureNetwork(ip_param: str = \"user_ip\"):\n    \"\"\"\uc548\uc804\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c\ub9cc \uc811\uadfc \ud5c8\uc6a9\"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            user_ip = kwargs.get(ip_param)\n            if user_ip and not await DynamicAccessController.check_ip_whitelist(user_ip):\n                raise AuthorizationError(\"\ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc740 IP\uc5d0\uc11c\uc758 \uc811\uadfc\uc785\ub2c8\ub2e4\")\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# \ub3d9\uc801 \uc81c\uc5b4 \uc801\uc6a9\n@RequiresAuthentication()\n@RequiresRole(Role.ADMIN)\n@RequiresBusinessHours()\n@RequiresSecureNetwork()\nasync def perform_maintenance(\n    maintenance_type: str,\n    user_ip: str = None\n) -&gt; Result[str, str]:\n    \"\"\"\uc2dc\uc2a4\ud15c \uc720\uc9c0\ubcf4\uc218 - \ubcf5\ud569 \ub3d9\uc801 \uc81c\uc5b4\"\"\"\n    try:\n        # \uc720\uc9c0\ubcf4\uc218 \uc791\uc5c5 \uc2e4\ud589\n        maintenance_id = f\"maint_{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n\n        result = f\"\uc720\uc9c0\ubcf4\uc218 \uc791\uc5c5 \uc2dc\uc791: {maintenance_type} (ID: {maintenance_id})\"\n        return Success(result)\n\n    except Exception as e:\n        return Failure(f\"\uc720\uc9c0\ubcf4\uc218 \uc791\uc5c5 \uc2e4\ud328: {str(e)}\")\n</code></pre>"},{"location":"10-access-control/#_12","title":"\ub9ac\uc18c\uc2a4\ubcc4 \uc138\ubd80 \uad8c\ud55c \uc81c\uc5b4","text":"<pre><code>from enum import Enum\nfrom typing import Dict, Set\n\nclass ResourceType(Enum):\n    USER = \"user\"\n    POST = \"post\" \n    COMMENT = \"comment\"\n    FILE = \"file\"\n    SYSTEM = \"system\"\n\nclass ResourcePermissionManager:\n    \"\"\"\ub9ac\uc18c\uc2a4\ubcc4 \uad8c\ud55c \uad00\ub9ac\"\"\"\n\n    def __init__(self):\n        # \uc5ed\ud560\ubcc4 \ub9ac\uc18c\uc2a4 \uad8c\ud55c \ub9e4\ud2b8\ub9ad\uc2a4\n        self.permission_matrix: Dict[Role, Dict[ResourceType, Set[Permission]]] = {\n            Role.SUPER_ADMIN: {\n                ResourceType.USER: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.POST: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.COMMENT: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.FILE: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.SYSTEM: {Permission.MANAGE_SYSTEM}\n            },\n            Role.ADMIN: {\n                ResourceType.USER: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.POST: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.COMMENT: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.FILE: {Permission.READ_ALL, Permission.WRITE_OWN, Permission.DELETE_OWN}\n            },\n            Role.MODERATOR: {\n                ResourceType.POST: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.COMMENT: {Permission.READ_ALL, Permission.WRITE_ALL, Permission.DELETE_ALL},\n                ResourceType.USER: {Permission.READ_ALL}\n            },\n            Role.USER: {\n                ResourceType.POST: {Permission.READ, Permission.WRITE_OWN, Permission.DELETE_OWN},\n                ResourceType.COMMENT: {Permission.READ, Permission.WRITE_OWN, Permission.DELETE_OWN},\n                ResourceType.FILE: {Permission.READ, Permission.WRITE_OWN, Permission.DELETE_OWN},\n                ResourceType.USER: {Permission.READ_OWN}\n            }\n        }\n\n    def has_resource_permission(\n        self, \n        user: User, \n        resource_type: ResourceType, \n        permission: Permission\n    ) -&gt; bool:\n        \"\"\"\uc0ac\uc6a9\uc790\uc758 \ud2b9\uc815 \ub9ac\uc18c\uc2a4\uc5d0 \ub300\ud55c \uad8c\ud55c \ud655\uc778\"\"\"\n        for role in user.roles:\n            if role in self.permission_matrix:\n                resource_perms = self.permission_matrix[role].get(resource_type, set())\n                if permission in resource_perms:\n                    return True\n\n        # \uc9c1\uc811 \uad8c\ud55c\ub3c4 \ud655\uc778\n        return permission in user.permissions\n\n# \uae00\ub85c\ubc8c \uad8c\ud55c \ub9e4\ub2c8\uc800\nresource_permission_manager = ResourcePermissionManager()\n\ndef RequiresResourcePermission(\n    resource_type: ResourceType, \n    permission: Permission\n):\n    \"\"\"\ub9ac\uc18c\uc2a4\ubcc4 \uc138\ubd80 \uad8c\ud55c \ud655\uc778\"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            user = get_current_user()\n            if not user:\n                raise AuthenticationError(\"Authentication required\")\n\n            if not resource_permission_manager.has_resource_permission(\n                user, resource_type, permission\n            ):\n                raise AuthorizationError(\n                    f\"Permission {permission.value} required for {resource_type.value}\"\n                )\n\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# \ub9ac\uc18c\uc2a4\ubcc4 \uad8c\ud55c \uc81c\uc5b4 \uc801\uc6a9\n@RequiresResourcePermission(ResourceType.POST, Permission.DELETE_ALL)\nasync def delete_any_post(post_id: str) -&gt; Result[str, str]:\n    \"\"\"\ubaa8\ub4e0 \uac8c\uc2dc\uae00 \uc0ad\uc81c \uad8c\ud55c \ud544\uc694\"\"\"\n    return Success(f\"\uac8c\uc2dc\uae00 {post_id} \uc0ad\uc81c \uc644\ub8cc\")\n\n@RequiresResourcePermission(ResourceType.USER, Permission.READ_ALL)\nasync def list_all_users() -&gt; Result[list, str]:\n    \"\"\"\ubaa8\ub4e0 \uc0ac\uc6a9\uc790 \uc870\ud68c \uad8c\ud55c \ud544\uc694\"\"\"\n    users = await get_all_users_from_db()\n    return Success(users)\n</code></pre>"},{"location":"10-access-control/#_13","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"10-access-control/#1","title":"1. \uacc4\uce35\uc801 \uad8c\ud55c \uc124\uacc4","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uba85\ud655\ud55c \uad8c\ud55c \uacc4\uce35\n@RequiresRole(Role.ADMIN)  # \uad00\ub9ac\uc790\ub294 \uc790\ub3d9\uc73c\ub85c \ud558\uc704 \uc5ed\ud560 \uad8c\ud55c \ud3ec\ud568\nasync def admin_function():\n    pass\n\n@RequiresPermission(Permission.WRITE_OWN)  # \ucd5c\uc18c \uad8c\ud55c \uc6d0\uce59\nasync def update_own_profile():\n    pass\n</code></pre>"},{"location":"10-access-control/#2","title":"2. \uc5d0\ub7ec \ucc98\ub9ac","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc801\uc808\ud55c \uc5d0\ub7ec \ucc98\ub9ac\n@RequiresRole(Role.MODERATOR)\nasync def moderate_content(content_id: str) -&gt; Result[str, str]:\n    try:\n        # \uad8c\ud55c\uc774 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc2e4\ud589\n        result = await perform_moderation(content_id)\n        return Success(result)\n    except AuthenticationError:\n        return Failure(\"\ub85c\uadf8\uc778\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\")\n    except AuthorizationError:\n        return Failure(\"\uad8c\ud55c\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4\")\n    except Exception as e:\n        return Failure(f\"\uc791\uc5c5 \uc2e4\ud589 \uc2e4\ud328: {str(e)}\")\n</code></pre>"},{"location":"10-access-control/#3","title":"3. \ubcf4\uc548 \ub85c\uae45","text":"<pre><code>from rfs.core.logging_decorators import AuditLogged, AuditEventType\n\n# \u2705 \uc88b\uc740 \uc608 - \ubbfc\uac10\ud55c \uc791\uc5c5\uc5d0 \uac10\uc0ac \ub85c\uadf8 \ucd94\uac00\n@RequiresRole(Role.ADMIN)\n@AuditLogged(\n    event_type=AuditEventType.SECURITY_EVENT,\n    resource_type=\"user_role\",\n    include_changes=True\n)\nasync def change_user_role(\n    target_user_id: str, \n    new_role: Role,\n    user_id: str = None  # \uac10\uc0ac \ub85c\uadf8\uc6a9\n) -&gt; Result[str, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc5ed\ud560 \ubcc0\uacbd - \ubcf4\uc548 \uc774\ubca4\ud2b8 \ub85c\uae45\"\"\"\n    # \uc5ed\ud560 \ubcc0\uacbd \ub85c\uc9c1\n    return Success(f\"\uc0ac\uc6a9\uc790 {target_user_id}\uc758 \uc5ed\ud560\uc744 {new_role.value}\ub85c \ubcc0\uacbd\")\n</code></pre>"},{"location":"10-access-control/#4","title":"4. \ud14c\uc2a4\ud2b8 \uce5c\ud654\uc801 \uc124\uacc4","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ud14c\uc2a4\ud2b8\uc6a9 \uc0ac\uc6a9\uc790 \uc124\uc815 \uc720\ud2f8\ub9ac\ud2f0\ndef create_test_user(\n    roles: Set[Role] = None,\n    permissions: Set[Permission] = None\n) -&gt; User:\n    \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \uc0ac\uc6a9\uc790 \uc0dd\uc131\"\"\"\n    return User(\n        id=\"test_user\",\n        username=\"test\",\n        email=\"test@example.com\",\n        roles=roles or {Role.USER},\n        permissions=permissions or set(),\n        is_active=True,\n        is_verified=True\n    )\n\n# \ud14c\uc2a4\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\nasync def test_admin_function():\n    # \uad00\ub9ac\uc790 \uad8c\ud55c\uc73c\ub85c \ud14c\uc2a4\ud2b8\n    admin_user = create_test_user(roles={Role.ADMIN})\n    set_current_user(admin_user)\n\n    result = await admin_only_function()\n    assert result.is_success()\n\n    # \uad8c\ud55c \uc815\ub9ac\n    clear_auth_context()\n</code></pre>"},{"location":"10-access-control/#_14","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"10-access-control/#1_1","title":"1. \uad8c\ud55c \uc5d0\uc2a4\uceec\ub808\uc774\uc158 \ubc29\uc9c0","text":"<ul> <li>\uc0ac\uc6a9\uc790\uac00 \uc790\uc2e0\uc758 \uad8c\ud55c\uc744 \uc0c1\uc2b9\uc2dc\ud0ac \uc218 \uc5c6\ub3c4\ub85d \uc81c\ud55c</li> <li>\uad00\ub9ac\uc790\ub3c4 \ucd5c\uace0 \uad00\ub9ac\uc790 \uad8c\ud55c\uc744 \ud68d\ub4dd\ud560 \uc218 \uc5c6\ub3c4\ub85d \uc124\uacc4</li> </ul>"},{"location":"10-access-control/#2_1","title":"2. \uc138\uc158 \uad00\ub9ac","text":"<ul> <li>JWT \ud1a0\ud070\uc758 \uc801\uc808\ud55c \ub9cc\ub8cc \uc2dc\uac04 \uc124\uc815</li> <li>\ub9ac\ud504\ub808\uc2dc \ud1a0\ud070 \ub85c\ud14c\uc774\uc158 \uad6c\ud604</li> <li>\ub85c\uadf8\uc544\uc6c3 \uc2dc \ud1a0\ud070 \ubb34\ud6a8\ud654</li> </ul>"},{"location":"10-access-control/#3_1","title":"3. \ubcf4\uc548 \uac10\uc0ac","text":"<ul> <li>\ubaa8\ub4e0 \uad8c\ud55c \ubcc0\uacbd\uc0ac\ud56d \ub85c\uae45</li> <li>\ubbfc\uac10\ud55c \uc791\uc5c5\uc5d0 \ub300\ud55c \uac10\uc0ac \ucd94\uc801</li> <li>\ube44\uc815\uc0c1\uc801\uc778 \uc811\uadfc \ud328\ud134 \ubaa8\ub2c8\ud130\ub9c1</li> </ul>"},{"location":"10-access-control/#4_1","title":"4. \uc131\ub2a5 \uace0\ub824\uc0ac\ud56d","text":"<ul> <li>\uad8c\ud55c \ud655\uc778 \ub85c\uc9c1\uc758 \uc131\ub2a5 \ucd5c\uc801\ud654</li> <li>\uce90\uc2f1\uc744 \ud1b5\ud55c \ubc18\ubcf5 \uad8c\ud55c \ud655\uc778 \ucd5c\uc18c\ud654</li> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \ucd5c\uc801\ud654</li> </ul>"},{"location":"10-access-control/#_15","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ub85c\uae45 - \ubcf4\uc548 \uc774\ubca4\ud2b8 \uac10\uc0ac \ub85c\uae45</li> <li>\ubcf4\uc548 - \uc885\ud569 \ubcf4\uc548 \ud328\ud134</li> <li>\uc720\ud6a8\uc131 \uac80\uc0ac - \uc785\ub825 \ub370\uc774\ud130 \uac80\uc99d</li> <li>\ubaa8\ub2c8\ud130\ub9c1 - \ubcf4\uc548 \uba54\ud2b8\ub9ad \uc218\uc9d1</li> </ul>"},{"location":"11-security/","title":"\ubcf4\uc548 \ud328\ud134 (Security Patterns)","text":""},{"location":"11-security/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc740 \uc885\ud569\uc801\uc778 \ubcf4\uc548 \ud328\ud134\uacfc \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ucf54\ub4dc \ucde8\uc57d\uc810 \uc2a4\uce94, \uc554\ud638\ud654, \ubcf4\uc548 \uac15\ud654, \uac10\uc0ac \ucd94\uc801\uc744 \ud1b5\ud574 \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09 \ubcf4\uc548\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4.</p>"},{"location":"11-security/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"11-security/#_3","title":"\ubcf4\uc548 \uacc4\uce35","text":"<ul> <li>\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubcf4\uc548: \ucf54\ub4dc \ub808\ubca8 \ubcf4\uc548 \ud328\ud134</li> <li>\ub370\uc774\ud130 \ubcf4\uc548: \uc554\ud638\ud654, \ud574\uc2f1, \ud0a4 \uad00\ub9ac</li> <li>\ub124\ud2b8\uc6cc\ud06c \ubcf4\uc548: \ud1b5\uc2e0 \ubcf4\uc548, TLS/SSL</li> <li>\uc778\uc99d/\uc778\uac00: \uc0ac\uc6a9\uc790 \uc778\uc99d \ubc0f \uad8c\ud55c \uad00\ub9ac</li> <li>\uac10\uc0ac \ucd94\uc801: \ubcf4\uc548 \uc774\ubca4\ud2b8 \ub85c\uae45 \ubc0f \ubaa8\ub2c8\ud130\ub9c1</li> </ul>"},{"location":"11-security/#_4","title":"\uc704\ud611 \ubaa8\ub378\ub9c1","text":"<ul> <li>STRIDE: Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege</li> <li>OWASP Top 10: \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubcf4\uc548 \uc704\ud5d8</li> <li>CWE: \uacf5\ud1b5 \uc57d\uc810 \uc5f4\uac70</li> <li>CVSS: \uacf5\ud1b5 \ucde8\uc57d\uc810 \uc810\uc218 \uc2dc\uc2a4\ud15c</li> </ul>"},{"location":"11-security/#_5","title":"\ubcf4\uc548 \uc218\uc900","text":"<ul> <li>CRITICAL: \uc989\uc2dc \uc218\uc815 \ud544\uc694 (90-100\uc810)</li> <li>HIGH: \ub192\uc740 \uc6b0\uc120\uc21c\uc704 (70-89\uc810)</li> <li>MEDIUM: \uc911\uac04 \uc6b0\uc120\uc21c\uc704 (50-69\uc810)</li> <li>LOW: \ub0ae\uc740 \uc6b0\uc120\uc21c\uc704 (30-49\uc810)</li> <li>INFO: \uc815\ubcf4\uc131 (10-29\uc810)</li> </ul>"},{"location":"11-security/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"11-security/#securityscanner","title":"SecurityScanner \ud074\ub798\uc2a4","text":"<pre><code>from rfs.security.scanner import SecurityScanner, ThreatLevel, VulnerabilityType\n\n# \ubcf4\uc548 \uc2a4\uce90\ub108 \uc0dd\uc131\nscanner = SecurityScanner(project_path=\"./\")\n</code></pre>"},{"location":"11-security/#_6","title":"\ucde8\uc57d\uc810 \ud0c0\uc785","text":"<pre><code>class VulnerabilityType(Enum):\n    CODE_INJECTION = \"code_injection\"           # \ucf54\ub4dc \uc778\uc81d\uc158\n    XSS = \"xss\"                                # \ud06c\ub85c\uc2a4 \uc0ac\uc774\ud2b8 \uc2a4\ud06c\ub9bd\ud305\n    SQLI = \"sql_injection\"                     # SQL \uc778\uc81d\uc158\n    PATH_TRAVERSAL = \"path_traversal\"          # \uacbd\ub85c \uc870\uc791\n    WEAK_CRYPTO = \"weak_cryptography\"          # \uc57d\ud55c \uc554\ud638\ud654\n    INSECURE_CONFIG = \"insecure_configuration\" # \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uc124\uc815\n    HARDCODED_SECRET = \"hardcoded_secret\"      # \ud558\ub4dc\ucf54\ub529\ub41c \uc2dc\ud06c\ub9bf\n    DEPENDENCY_VULN = \"dependency_vulnerability\" # \uc758\uc874\uc131 \ucde8\uc57d\uc810\n    PERMISSION_ISSUE = \"permission_issue\"       # \uad8c\ud55c \ubb38\uc81c\n    INFORMATION_LEAK = \"information_leakage\"    # \uc815\ubcf4 \ub204\ucd9c\n</code></pre>"},{"location":"11-security/#_7","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"11-security/#_8","title":"\uc885\ud569 \ubcf4\uc548 \uc2a4\uce94","text":"<pre><code>from rfs.security.scanner import SecurityScanner\nimport asyncio\n\nasync def comprehensive_security_scan():\n    \"\"\"\uc885\ud569 \ubcf4\uc548 \uc2a4\uce94 \uc2e4\ud589\"\"\"\n    scanner = SecurityScanner(project_path=\".\")\n\n    # \uc804\uccb4 \ubcf4\uc548 \uc2a4\uce94\n    result = await scanner.run_security_scan()\n\n    if result.is_success():\n        vulnerabilities = result.unwrap()\n\n        print(f\"\ucd1d {len(vulnerabilities)}\uac1c \ucde8\uc57d\uc810 \ubc1c\uacac\")\n\n        # \uc2ec\uac01\ub3c4\ubcc4 \ubd84\ub958\n        critical_vulns = [v for v in vulnerabilities if v.threat_level == ThreatLevel.CRITICAL]\n        high_vulns = [v for v in vulnerabilities if v.threat_level == ThreatLevel.HIGH]\n\n        print(f\"\uc2ec\uac01: {len(critical_vulns)}\uac1c\")\n        print(f\"\ub192\uc74c: {len(high_vulns)}\uac1c\")\n\n        # \uc0c1\uc704 5\uac1c \ucde8\uc57d\uc810 \ucd9c\ub825\n        top_vulnerabilities = vulnerabilities[:5]\n        for i, vuln in enumerate(top_vulnerabilities, 1):\n            print(f\"{i}. {vuln.title}\")\n            print(f\"   \ud30c\uc77c: {vuln.file_path}:{vuln.line_number}\")\n            print(f\"   \uc704\ud5d8\ub3c4: {vuln.risk_score}/100\")\n            print(f\"   \uad8c\uc7a5\uc0ac\ud56d: {vuln.remediation[0] if vuln.remediation else 'N/A'}\")\n            print()\n\n        # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n        report_result = await scanner.generate_security_report()\n        if report_result.is_success():\n            print(f\"\ubcf4\uc548 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131: {report_result.unwrap()}\")\n\n        return vulnerabilities\n    else:\n        print(f\"\ubcf4\uc548 \uc2a4\uce94 \uc2e4\ud328: {result.unwrap_err()}\")\n        return []\n\n# \uc2e4\ud589\nvulnerabilities = await comprehensive_security_scan()\n</code></pre>"},{"location":"11-security/#_9","title":"\ud2b9\uc815 \uc720\ud615 \uc2a4\uce94","text":"<pre><code>async def scan_specific_types():\n    \"\"\"\ud2b9\uc815 \ubcf4\uc548 \uc720\ud615\ub9cc \uc2a4\uce94\"\"\"\n    scanner = SecurityScanner()\n\n    # \ucf54\ub4dc \ucde8\uc57d\uc810\uacfc \uc2dc\ud06c\ub9bf\ub9cc \uc2a4\uce94\n    result = await scanner.run_security_scan(\n        scan_types=['code', 'secrets']\n    )\n\n    if result.is_success():\n        vulnerabilities = result.unwrap()\n\n        # \ucf54\ub4dc \uc778\uc81d\uc158 \ucde8\uc57d\uc810\n        code_injection_vulns = [\n            v for v in vulnerabilities \n            if v.vuln_type == VulnerabilityType.CODE_INJECTION\n        ]\n\n        print(f\"\ucf54\ub4dc \uc778\uc81d\uc158 \ucde8\uc57d\uc810: {len(code_injection_vulns)}\uac1c\")\n        for vuln in code_injection_vulns:\n            print(f\"- {vuln.title} ({vuln.file_path}:{vuln.line_number})\")\n            print(f\"  \ucf54\ub4dc: {vuln.code_snippet}\")\n            print(f\"  \uc218\uc815\ubc29\ubc95: {'; '.join(vuln.remediation)}\")\n\n        # \ud558\ub4dc\ucf54\ub529\ub41c \uc2dc\ud06c\ub9bf\n        secret_vulns = [\n            v for v in vulnerabilities \n            if v.vuln_type == VulnerabilityType.HARDCODED_SECRET\n        ]\n\n        print(f\"\\n\ud558\ub4dc\ucf54\ub529\ub41c \uc2dc\ud06c\ub9bf: {len(secret_vulns)}\uac1c\")\n        for vuln in secret_vulns:\n            print(f\"- {vuln.title} ({vuln.file_path}:{vuln.line_number})\")\n\n    return result\n\n# \uc2e4\ud589\nawait scan_specific_types()\n</code></pre>"},{"location":"11-security/#_10","title":"\ucf54\ub4dc \ubcf4\uc548 \ud328\ud134","text":"<pre><code>from rfs.security.crypto import SecureCrypto\nfrom rfs.security.validation_decorators import Sanitized, ValidatedInput\nfrom rfs.core.result import Result, Success, Failure\n\n# \uc548\uc804\ud55c \uc554\ud638\ud654\nclass SecureUserService:\n    def __init__(self):\n        self.crypto = SecureCrypto()\n\n    @ValidatedInput(\n        rules={\n            'password': {'min_length': 8, 'complexity': True},\n            'email': {'format': 'email'}\n        }\n    )\n    async def create_user(\n        self, \n        email: str, \n        password: str,\n        user_data: dict\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 (\ubcf4\uc548 \uac80\uc99d \ud3ec\ud568)\"\"\"\n        try:\n            # \ube44\ubc00\ubc88\ud638 \ud574\uc2f1 (\uc548\uc804\ud55c \ubc29\ubc95)\n            password_hash = self.crypto.hash_password(password)\n\n            # \ubbfc\uac10\ud55c \ub370\uc774\ud130 \uc554\ud638\ud654\n            encrypted_data = {}\n            if 'ssn' in user_data:\n                encrypted_data['ssn'] = self.crypto.encrypt(user_data['ssn'])\n\n            user = {\n                'id': self._generate_secure_id(),\n                'email': email,\n                'password_hash': password_hash,\n                'encrypted_data': encrypted_data,\n                'created_at': datetime.now().isoformat()\n            }\n\n            return Success(user)\n\n        except Exception as e:\n            return Failure(f\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n    @Sanitized(fields=['query'])\n    async def search_users(self, query: str) -&gt; Result[list, str]:\n        \"\"\"\uc0ac\uc6a9\uc790 \uac80\uc0c9 (SQL \uc778\uc81d\uc158 \ubc29\uc9c0)\"\"\"\n        try:\n            # \ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ucffc\ub9ac \uc0ac\uc6a9 (SQL \uc778\uc81d\uc158 \ubc29\uc9c0)\n            safe_query = \"\"\"\n                SELECT id, email, created_at \n                FROM users \n                WHERE email LIKE %s \n                ORDER BY created_at DESC\n            \"\"\"\n\n            # \uc548\uc804\ud55c \ucffc\ub9ac \uc2e4\ud589\n            results = await self.db.execute(safe_query, (f\"%{query}%\",))\n\n            return Success(results)\n\n        except Exception as e:\n            return Failure(f\"\uc0ac\uc6a9\uc790 \uac80\uc0c9 \uc2e4\ud328: {str(e)}\")\n\n# \uc0ac\uc6a9\nuser_service = SecureUserService()\n\n# \uc548\uc804\ud55c \uc0ac\uc6a9\uc790 \uc0dd\uc131\nresult = await user_service.create_user(\n    email=\"user@example.com\",\n    password=\"SecurePass123!\",\n    user_data={\"name\": \"John Doe\", \"ssn\": \"123-45-6789\"}\n)\n</code></pre>"},{"location":"11-security/#_11","title":"\ud30c\uc77c \uc5c5\ub85c\ub4dc \ubcf4\uc548","text":"<pre><code>from rfs.security.validation_decorators import SecureFileUpload\nimport mimetypes\nimport hashlib\n\nclass SecureFileHandler:\n    ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.pdf', '.txt'}\n    MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB\n    UPLOAD_DIR = \"/secure/uploads\"\n\n    @SecureFileUpload(\n        allowed_extensions=['.jpg', '.jpeg', '.png', '.pdf'],\n        max_size=MAX_FILE_SIZE,\n        scan_malware=True\n    )\n    async def upload_file(self, file_data: bytes, filename: str) -&gt; Result[dict, str]:\n        \"\"\"\uc548\uc804\ud55c \ud30c\uc77c \uc5c5\ub85c\ub4dc\"\"\"\n        try:\n            # \ud30c\uc77c \ud655\uc7a5\uc790 \uac80\uc99d\n            _, ext = os.path.splitext(filename.lower())\n            if ext not in self.ALLOWED_EXTENSIONS:\n                return Failure(f\"\ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc740 \ud30c\uc77c \ud615\uc2dd: {ext}\")\n\n            # MIME \ud0c0\uc785 \uac80\uc99d\n            detected_type, _ = mimetypes.guess_type(filename)\n            if not detected_type or not self._is_safe_mime_type(detected_type):\n                return Failure(\"\uc548\uc804\ud558\uc9c0 \uc54a\uc740 \ud30c\uc77c \ud0c0\uc785\")\n\n            # \ud30c\uc77c \ud06c\uae30 \uac80\uc99d\n            if len(file_data) &gt; self.MAX_FILE_SIZE:\n                return Failure(\"\ud30c\uc77c \ud06c\uae30 \ucd08\uacfc\")\n\n            # \ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94 \uc2dc\ubbac\ub808\uc774\uc158\n            if await self._scan_for_malware(file_data):\n                return Failure(\"\uc545\uc131 \ucf54\ub4dc \ud0d0\uc9c0\ub428\")\n\n            # \uc548\uc804\ud55c \ud30c\uc77c\uba85 \uc0dd\uc131\n            safe_filename = self._generate_safe_filename(filename)\n            file_hash = hashlib.sha256(file_data).hexdigest()\n\n            # \ud30c\uc77c \uc800\uc7a5\n            file_path = os.path.join(self.UPLOAD_DIR, safe_filename)\n            await self._save_file_securely(file_path, file_data)\n\n            return Success({\n                'filename': safe_filename,\n                'original_filename': filename,\n                'size': len(file_data),\n                'hash': file_hash,\n                'upload_time': datetime.now().isoformat()\n            })\n\n        except Exception as e:\n            return Failure(f\"\ud30c\uc77c \uc5c5\ub85c\ub4dc \uc2e4\ud328: {str(e)}\")\n\n    def _is_safe_mime_type(self, mime_type: str) -&gt; bool:\n        \"\"\"\uc548\uc804\ud55c MIME \ud0c0\uc785 \ud655\uc778\"\"\"\n        safe_types = {\n            'image/jpeg', 'image/png', 'image/gif',\n            'application/pdf', 'text/plain'\n        }\n        return mime_type in safe_types\n\n    async def _scan_for_malware(self, file_data: bytes) -&gt; bool:\n        \"\"\"\uba40\uc6e8\uc5b4 \uc2a4\uce94 (\uc2e4\uc81c\ub85c\ub294 ClamAV \ub4f1 \uc0ac\uc6a9)\"\"\"\n        # \uc2dc\ubbac\ub808\uc774\uc158: \ud2b9\uc815 \uc2dc\uadf8\ub2c8\ucc98 \ud655\uc778\n        suspicious_signatures = [b'&lt;script&gt;', b'&lt;?php', b'eval(']\n\n        for signature in suspicious_signatures:\n            if signature in file_data:\n                return True\n\n        return False\n\n    def _generate_safe_filename(self, original: str) -&gt; str:\n        \"\"\"\uc548\uc804\ud55c \ud30c\uc77c\uba85 \uc0dd\uc131\"\"\"\n        # \uc704\ud5d8\ud55c \ubb38\uc790 \uc81c\uac70\n        safe_chars = re.sub(r'[^a-zA-Z0-9._-]', '', original)\n\n        # UUID \ucd94\uac00\ub85c \uace0\uc720\uc131 \ubcf4\uc7a5\n        name, ext = os.path.splitext(safe_chars)\n        return f\"{name}_{uuid.uuid4().hex[:8]}{ext}\"\n\n    async def _save_file_securely(self, file_path: str, file_data: bytes) -&gt; None:\n        \"\"\"\uc548\uc804\ud55c \ud30c\uc77c \uc800\uc7a5\"\"\"\n        # \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131 (\uc548\uc804\ud55c \uad8c\ud55c\uc73c\ub85c)\n        os.makedirs(os.path.dirname(file_path), mode=0o750, exist_ok=True)\n\n        # \ud30c\uc77c \uc800\uc7a5 (\uc548\uc804\ud55c \uad8c\ud55c\uc73c\ub85c)\n        with open(file_path, 'wb') as f:\n            f.write(file_data)\n\n        # \ud30c\uc77c \uad8c\ud55c \uc124\uc815 (\uc77d\uae30 \uc804\uc6a9)\n        os.chmod(file_path, 0o640)\n\n# \uc0ac\uc6a9\nfile_handler = SecureFileHandler()\n\n# \ud30c\uc77c \uc5c5\ub85c\ub4dc\nwith open(\"example.pdf\", \"rb\") as f:\n    file_data = f.read()\n\nresult = await file_handler.upload_file(file_data, \"document.pdf\")\nif result.is_success():\n    print(f\"\ud30c\uc77c \uc5c5\ub85c\ub4dc \uc131\uacf5: {result.unwrap()}\")\n</code></pre>"},{"location":"11-security/#api_1","title":"API \ubcf4\uc548","text":"<pre><code>from rfs.security.auth import JWTAuth\nfrom rfs.security.validation_decorators import RateLimited, CSRFProtected\nfrom rfs.web.middleware import SecurityMiddleware\n\nclass SecureAPIHandler:\n    def __init__(self):\n        self.jwt_auth = JWTAuth(secret_key=os.environ['JWT_SECRET'])\n\n    @RateLimited(requests_per_minute=60, per_user=True)\n    @CSRFProtected()\n    async def create_post(\n        self, \n        request: dict,\n        user_token: str\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uac8c\uc2dc\uae00 \uc0dd\uc131 (\ubcf4\uc548 \uac80\uc99d \ud3ec\ud568)\"\"\"\n        try:\n            # JWT \ud1a0\ud070 \uac80\uc99d\n            user_result = await self.jwt_auth.verify_token(user_token)\n            if user_result.is_failure():\n                return user_result\n\n            user = user_result.unwrap()\n\n            # \uc785\ub825 \uac80\uc99d \ubc0f \uc0c8\ub2c8\ud0c0\uc774\uc81c\uc774\uc158\n            title = self._sanitize_html(request.get('title', ''))\n            content = self._sanitize_html(request.get('content', ''))\n\n            if not title or len(title) &gt; 200:\n                return Failure(\"\uc81c\ubaa9\uc774 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n            if not content or len(content) &gt; 10000:\n                return Failure(\"\ub0b4\uc6a9\uc774 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n\n            # XSS \ubc29\uc9c0\n            safe_title = self._escape_html(title)\n            safe_content = self._escape_html(content)\n\n            # \uac8c\uc2dc\uae00 \uc0dd\uc131\n            post = {\n                'id': str(uuid.uuid4()),\n                'title': safe_title,\n                'content': safe_content,\n                'author_id': user['id'],\n                'created_at': datetime.now().isoformat(),\n                'ip_address': self._hash_ip(request.get('ip_address', ''))\n            }\n\n            # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5 (\ub9e4\uac1c\ubcc0\uc218\ud654\ub41c \ucffc\ub9ac)\n            await self._save_post_safely(post)\n\n            return Success({\n                'id': post['id'],\n                'title': post['title'],\n                'created_at': post['created_at']\n            })\n\n        except Exception as e:\n            return Failure(f\"\uac8c\uc2dc\uae00 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n    def _sanitize_html(self, text: str) -&gt; str:\n        \"\"\"HTML \uc0c8\ub2c8\ud0c0\uc774\uc81c\uc774\uc158\"\"\"\n        import html\n        # \uae30\ubcf8 HTML \uc774\uc2a4\ucf00\uc774\ud504\n        sanitized = html.escape(text)\n\n        # \ucd94\uac00 \uc704\ud5d8 \ud328\ud134 \uc81c\uac70\n        patterns_to_remove = [\n            r'javascript:',\n            r'vbscript:',\n            r'onload=',\n            r'onerror=',\n            r'&lt;script[^&gt;]*&gt;.*?&lt;/script&gt;',\n        ]\n\n        for pattern in patterns_to_remove:\n            sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)\n\n        return sanitized.strip()\n\n    def _escape_html(self, text: str) -&gt; str:\n        \"\"\"HTML \uc774\uc2a4\ucf00\uc774\ud504\"\"\"\n        import html\n        return html.escape(text, quote=True)\n\n    def _hash_ip(self, ip_address: str) -&gt; str:\n        \"\"\"IP \uc8fc\uc18c \ud574\uc2f1 (\uac1c\uc778\uc815\ubcf4 \ubcf4\ud638)\"\"\"\n        return hashlib.sha256(\n            (ip_address + os.environ.get('IP_SALT', '')).encode()\n        ).hexdigest()[:16]\n\n    async def _save_post_safely(self, post: dict) -&gt; None:\n        \"\"\"\uc548\uc804\ud55c \uac8c\uc2dc\uae00 \uc800\uc7a5\"\"\"\n        query = \"\"\"\n            INSERT INTO posts (id, title, content, author_id, created_at, ip_hash)\n            VALUES (?, ?, ?, ?, ?, ?)\n        \"\"\"\n\n        await self.db.execute(query, (\n            post['id'],\n            post['title'], \n            post['content'],\n            post['author_id'],\n            post['created_at'],\n            post['ip_address']\n        ))\n\n# \ubcf4\uc548 \ubbf8\ub4e4\uc6e8\uc5b4 \uc124\uc815\nsecurity_middleware = SecurityMiddleware({\n    'enable_hsts': True,\n    'enable_csp': True,\n    'csp_policy': \"default-src 'self'; script-src 'self' 'unsafe-inline'\",\n    'enable_csrf_protection': True,\n    'rate_limiting': {\n        'enabled': True,\n        'requests_per_minute': 100\n    }\n})\n</code></pre>"},{"location":"11-security/#_12","title":"\ubcf4\uc548 \uc124\uc815 \uac80\uc99d","text":"<pre><code>class SecurityConfigValidator:\n    \"\"\"\ubcf4\uc548 \uc124\uc815 \uac80\uc99d\"\"\"\n\n    def __init__(self, config_path: str):\n        self.config_path = config_path\n        self.vulnerabilities = []\n\n    async def validate_all(self) -&gt; List[dict]:\n        \"\"\"\uc804\uccb4 \ubcf4\uc548 \uc124\uc815 \uac80\uc99d\"\"\"\n        self.vulnerabilities = []\n\n        await self._check_environment_variables()\n        await self._check_file_permissions()\n        await self._check_network_settings()\n        await self._check_database_config()\n\n        return self.vulnerabilities\n\n    async def _check_environment_variables(self):\n        \"\"\"\ud658\uacbd \ubcc0\uc218 \ubcf4\uc548 \uac80\uc0ac\"\"\"\n        dangerous_patterns = {\n            'DEBUG': ['true', '1', 'yes'],\n            'SECRET_KEY': ['secret', 'default', 'change_me'],\n            'DATABASE_URL': ['localhost', '127.0.0.1'],\n            'ALLOWED_HOSTS': ['*', 'all']\n        }\n\n        for var_name, dangerous_values in dangerous_patterns.items():\n            value = os.environ.get(var_name, '').lower()\n\n            if value in dangerous_values:\n                self.vulnerabilities.append({\n                    'type': 'insecure_config',\n                    'severity': 'high',\n                    'description': f'\ud658\uacbd \ubcc0\uc218 {var_name}\uc774 \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uac12\uc73c\ub85c \uc124\uc815\ub428',\n                    'value': value,\n                    'recommendations': [\n                        f'{var_name}\uc744 \ud504\ub85c\ub355\uc158\uc5d0 \uc801\ud569\ud55c \uac12\uc73c\ub85c \ubcc0\uacbd',\n                        '\ud658\uacbd\ubcc4 \uc124\uc815 \ud30c\uc77c \ubd84\ub9ac',\n                        '\uc2dc\ud06c\ub9bf \uad00\ub9ac \uc2dc\uc2a4\ud15c \ub3c4\uc785'\n                    ]\n                })\n\n    async def _check_file_permissions(self):\n        \"\"\"\ud30c\uc77c \uad8c\ud55c \uac80\uc0ac\"\"\"\n        sensitive_files = [\n            '.env', 'config.py', 'settings.py',\n            'private_key.pem', '*.key'\n        ]\n\n        for file_pattern in sensitive_files:\n            files = glob.glob(file_pattern)\n\n            for file_path in files:\n                try:\n                    stat_info = os.stat(file_path)\n\n                    # \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \uc77d\uc744 \uc218 \uc788\ub294\uc9c0 \ud655\uc778\n                    if stat_info.st_mode &amp; 0o004:\n                        self.vulnerabilities.append({\n                            'type': 'permission_issue',\n                            'severity': 'medium',\n                            'description': f'\ud30c\uc77c {file_path}\uc774 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc77d\uae30 \uad8c\ud55c \ubd80\uc5ec\ub428',\n                            'file': file_path,\n                            'permissions': oct(stat_info.st_mode)[-3:],\n                            'recommendations': [\n                                f'chmod 600 {file_path}',\n                                '\ubbfc\uac10\ud55c \ud30c\uc77c\uc758 \uc811\uadfc \uad8c\ud55c \uc81c\ud55c'\n                            ]\n                        })\n\n                except OSError:\n                    continue\n\n# \uc0ac\uc6a9\nvalidator = SecurityConfigValidator(\".\")\nvulnerabilities = await validator.validate_all()\n\nprint(f\"\ubcf4\uc548 \uc124\uc815 \uac80\uc99d \uacb0\uacfc: {len(vulnerabilities)}\uac1c \uc774\uc288 \ubc1c\uacac\")\nfor vuln in vulnerabilities:\n    print(f\"- {vuln['description']} (\uc2ec\uac01\ub3c4: {vuln['severity']})\")\n</code></pre>"},{"location":"11-security/#_13","title":"\ubcf4\uc548 \uac10\uc0ac \ubc0f \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.security.audit import SecurityAuditor\nfrom rfs.core.logging_decorators import AuditLogged, AuditEventType\n\nclass SecurityMonitor:\n    \"\"\"\ubcf4\uc548 \ubaa8\ub2c8\ud130\ub9c1\"\"\"\n\n    def __init__(self):\n        self.auditor = SecurityAuditor()\n        self.suspicious_activities = []\n\n    @AuditLogged(\n        event_type=AuditEventType.SECURITY_EVENT,\n        resource_type=\"security_monitor\",\n        include_changes=True\n    )\n    async def detect_suspicious_activity(\n        self, \n        user_id: str,\n        ip_address: str,\n        action: str,\n        user_agent: str\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uc758\uc2ec\uc2a4\ub7ec\uc6b4 \ud65c\ub3d9 \ud0d0\uc9c0\"\"\"\n        try:\n            risk_score = 0\n            alerts = []\n\n            # 1. \ube44\uc815\uc0c1\uc801\uc778 \ub85c\uadf8\uc778 \ud328\ud134\n            recent_logins = await self._get_recent_logins(user_id, hours=24)\n\n            # \uc5ec\ub7ec IP\uc5d0\uc11c \ub85c\uadf8\uc778\n            unique_ips = set(login['ip_address'] for login in recent_logins)\n            if len(unique_ips) &gt; 5:\n                risk_score += 30\n                alerts.append(\"24\uc2dc\uac04 \ub0b4 \uc5ec\ub7ec IP\uc5d0\uc11c \ub85c\uadf8\uc778 \uc2dc\ub3c4\")\n\n            # \uc9c0\ub9ac\uc801\uc73c\ub85c \ubd88\uac00\ub2a5\ud55c \ub85c\uadf8\uc778\n            if await self._check_impossible_travel(recent_logins):\n                risk_score += 50\n                alerts.append(\"\uc9c0\ub9ac\uc801\uc73c\ub85c \ubd88\uac00\ub2a5\ud55c \ub85c\uadf8\uc778 \ud328\ud134\")\n\n            # 2. \ube44\uc815\uc0c1\uc801\uc778 \uc694\uccad \ud328\ud134\n            if await self._check_rate_limit_abuse(user_id, ip_address):\n                risk_score += 40\n                alerts.append(\"\ube44\uc815\uc0c1\uc801\uc73c\ub85c \ub9ce\uc740 \uc694\uccad\")\n\n            # 3. \ube44\uc815\uc0c1\uc801\uc778 User-Agent\n            if await self._check_suspicious_user_agent(user_agent):\n                risk_score += 20\n                alerts.append(\"\uc758\uc2ec\uc2a4\ub7ec\uc6b4 User-Agent\")\n\n            # 4. \uc54c\ub824\uc9c4 \uc545\uc131 IP\n            if await self._check_malicious_ip(ip_address):\n                risk_score += 60\n                alerts.append(\"\uc54c\ub824\uc9c4 \uc545\uc131 IP\uc5d0\uc11c \uc811\uadfc\")\n\n            # \ubcf4\uc548 \uc774\ubca4\ud2b8 \uae30\ub85d\n            security_event = {\n                'event_id': str(uuid.uuid4()),\n                'user_id': user_id,\n                'ip_address': ip_address,\n                'action': action,\n                'risk_score': risk_score,\n                'alerts': alerts,\n                'timestamp': datetime.now().isoformat(),\n                'requires_action': risk_score &gt;= 70\n            }\n\n            if security_event['requires_action']:\n                # \uc790\ub3d9 \ubcf4\uc548 \uc870\uce58\n                await self._take_security_action(security_event)\n\n            self.suspicious_activities.append(security_event)\n\n            return Success(security_event)\n\n        except Exception as e:\n            return Failure(f\"\ubcf4\uc548 \ubaa8\ub2c8\ud130\ub9c1 \uc2e4\ud328: {str(e)}\")\n\n    async def _check_impossible_travel(self, logins: List[dict]) -&gt; bool:\n        \"\"\"\uc9c0\ub9ac\uc801\uc73c\ub85c \ubd88\uac00\ub2a5\ud55c \uc774\ub3d9 \ud655\uc778\"\"\"\n        if len(logins) &lt; 2:\n            return False\n\n        # \uc2e4\uc81c\ub85c\ub294 IP \uc9c0\ub9ac\uc815\ubcf4 \uc11c\ube44\uc2a4 \uc0ac\uc6a9\n        for i in range(1, len(logins)):\n            prev_login = logins[i-1]\n            curr_login = logins[i]\n\n            # \uc2dc\uac04 \ucc28\uc774 \uacc4\uc0b0\n            time_diff = (\n                datetime.fromisoformat(curr_login['timestamp']) -\n                datetime.fromisoformat(prev_login['timestamp'])\n            ).total_seconds() / 3600  # \uc2dc\uac04 \ub2e8\uc704\n\n            # \uac70\ub9ac \uacc4\uc0b0 (\uc2dc\ubbac\ub808\uc774\uc158)\n            distance_km = self._calculate_distance(\n                prev_login['ip_address'],\n                curr_login['ip_address']\n            )\n\n            # \ubb3c\ub9ac\uc801\uc73c\ub85c \ubd88\uac00\ub2a5\ud55c \uc18d\ub3c4 (\uc2dc\uc18d 800km \uc774\uc0c1)\n            if distance_km / max(time_diff, 0.1) &gt; 800:\n                return True\n\n        return False\n\n    async def _take_security_action(self, event: dict):\n        \"\"\"\uc790\ub3d9 \ubcf4\uc548 \uc870\uce58\"\"\"\n        if event['risk_score'] &gt;= 90:\n            # \uacc4\uc815 \uc784\uc2dc \uc7a0\uae08\n            await self._lock_user_account(event['user_id'])\n\n            # \ubcf4\uc548\ud300\uc5d0 \uc54c\ub9bc\n            await self._notify_security_team(event)\n\n        elif event['risk_score'] &gt;= 70:\n            # \ucd94\uac00 \uc778\uc99d \uc694\uad6c\n            await self._require_additional_auth(event['user_id'])\n\n            # \uc138\uc158 \ubb34\ud6a8\ud654\n            await self._invalidate_user_sessions(event['user_id'])\n\n# \uc0ac\uc6a9\nmonitor = SecurityMonitor()\n\n# \uc758\uc2ec\uc2a4\ub7ec\uc6b4 \ud65c\ub3d9 \ud0d0\uc9c0\nresult = await monitor.detect_suspicious_activity(\n    user_id=\"user123\",\n    ip_address=\"192.168.1.100\",\n    action=\"login\",\n    user_agent=\"Mozilla/5.0...\"\n)\n\nif result.is_success():\n    event = result.unwrap()\n    if event['requires_action']:\n        print(f\"\ubcf4\uc548 \uacbd\uace0: \uc704\ud5d8\ub3c4 {event['risk_score']}\")\n        print(f\"\uacbd\uace0\uc0ac\ud56d: {', '.join(event['alerts'])}\")\n</code></pre>"},{"location":"11-security/#_14","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"11-security/#1-defense-in-depth","title":"1. \uc2ec\uce35 \ubc29\uc5b4 (Defense in Depth)","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ub2e4\uce35 \ubcf4\uc548\n@RequiresAuthentication()\n@RequiresRole(Role.USER)\n@RateLimited(requests_per_minute=30)\n@ValidatedInput(rules={'data': {'max_length': 1000}})\n@Sanitized(fields=['data'])\nasync def secure_endpoint(data: str, current_user: User) -&gt; Result[dict, str]:\n    \"\"\"\ub2e4\uce35 \ubcf4\uc548\uc774 \uc801\uc6a9\ub41c \uc5d4\ub4dc\ud3ec\uc778\ud2b8\"\"\"\n    # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n    pass\n</code></pre>"},{"location":"11-security/#2","title":"2. \uc785\ub825 \uac80\uc99d\uacfc \uc0c8\ub2c8\ud0c0\uc774\uc81c\uc774\uc158","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc644\uc804\ud55c \uc785\ub825 \uac80\uc99d\ndef validate_and_sanitize_input(user_input: str) -&gt; Result[str, str]:\n    # 1. \uae38\uc774 \uac80\uc99d\n    if len(user_input) &gt; 1000:\n        return Failure(\"\uc785\ub825\uc774 \ub108\ubb34 \uae41\ub2c8\ub2e4\")\n\n    # 2. \ubb38\uc790 \uac80\uc99d (\ud654\uc774\ud2b8\ub9ac\uc2a4\ud2b8 \ubc29\uc2dd)\n    allowed_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .,!?-')\n    if not all(c in allowed_chars for c in user_input):\n        return Failure(\"\ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc740 \ubb38\uc790\uac00 \ud3ec\ud568\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n\n    # 3. HTML \uc774\uc2a4\ucf00\uc774\ud504\n    import html\n    sanitized = html.escape(user_input, quote=True)\n\n    return Success(sanitized)\n</code></pre>"},{"location":"11-security/#3","title":"3. \uc548\uc804\ud55c \uc554\ud638\ud654","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc548\uc804\ud55c \uc554\ud638\ud654 \uc0ac\uc6a9\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nimport os\n\nclass SecureEncryption:\n    def __init__(self, password: str):\n        # PBKDF2\ub85c \ud0a4 \uc720\ub3c4\n        salt = os.urandom(16)\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=32,\n            salt=salt,\n            iterations=100000,\n        )\n        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))\n        self.cipher = Fernet(key)\n        self.salt = salt\n\n    def encrypt(self, data: str) -&gt; str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n    def decrypt(self, encrypted_data: str) -&gt; str:\n        return self.cipher.decrypt(encrypted_data.encode()).decode()\n</code></pre>"},{"location":"11-security/#4","title":"4. \ubcf4\uc548 \ub85c\uae45","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ubcf4\uc548 \uc774\ubca4\ud2b8 \ub85c\uae45\n@AuditLogged(\n    event_type=AuditEventType.SECURITY_EVENT,\n    resource_type=\"authentication\",\n    include_user_info=True\n)\nasync def handle_failed_login(username: str, ip_address: str):\n    \"\"\"\uc2e4\ud328\ud55c \ub85c\uadf8\uc778 \uc2dc\ub3c4 \ucc98\ub9ac\"\"\"\n\n    # \uc2e4\ud328 \ud69f\uc218 \uc99d\uac00\n    await increment_failed_attempts(username, ip_address)\n\n    # \uacc4\uc815 \uc7a0\uae08 \ud655\uc778\n    if await should_lock_account(username):\n        await lock_account(username)\n\n        # \ubcf4\uc548 \uacbd\uace0 \ub85c\uadf8\n        logger.security_warning(\n            f\"Account locked due to repeated failed login attempts\",\n            extra={\n                'username': username,\n                'ip_address': ip_address,\n                'event_type': 'account_lockout'\n            }\n        )\n</code></pre>"},{"location":"11-security/#_15","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"11-security/#1","title":"1. \uc2dc\ud06c\ub9bf \uad00\ub9ac","text":"<ul> <li>\ucf54\ub4dc\uc5d0 \ud558\ub4dc\ucf54\ub529\ub41c \ube44\ubc00\ubc88\ud638, API \ud0a4 \uc808\ub300 \uae08\uc9c0</li> <li>\ud658\uacbd \ubcc0\uc218\ub098 \uc2dc\ud06c\ub9bf \uad00\ub9ac \uc2dc\uc2a4\ud15c \uc0ac\uc6a9</li> <li>\uc815\uae30\uc801\uc778 \ud0a4 \ub85c\ud14c\uc774\uc158 \uad6c\ud604</li> </ul>"},{"location":"11-security/#2_1","title":"2. \uc785\ub825 \uac80\uc99d","text":"<ul> <li>\ubaa8\ub4e0 \uc678\ubd80 \uc785\ub825\uc5d0 \ub300\ud55c \uac80\uc99d \ud544\uc218</li> <li>\ud654\uc774\ud2b8\ub9ac\uc2a4\ud2b8 \ubc29\uc2dd \uc6b0\uc120 \uc0ac\uc6a9</li> <li>\ud074\ub77c\uc774\uc5b8\ud2b8 \uce21 \uac80\uc99d\ub9cc\uc73c\ub85c\ub294 \ubd88\ucda9\ubd84</li> </ul>"},{"location":"11-security/#3_1","title":"3. \uc5d0\ub7ec \uba54\uc2dc\uc9c0","text":"<ul> <li>\uacf5\uaca9\uc790\uc5d0\uac8c \uc2dc\uc2a4\ud15c \ub0b4\ubd80 \uc815\ubcf4 \ub178\ucd9c \ubc29\uc9c0</li> <li>\uc77c\ubc18\uc801\uc774\uace0 \ubaa8\ud638\ud55c \uc5d0\ub7ec \uba54\uc2dc\uc9c0 \uc0ac\uc6a9</li> <li>\uc0c1\uc138\ud55c \uc624\ub958\ub294 \ub85c\uadf8\uc5d0\ub9cc \uae30\ub85d</li> </ul>"},{"location":"11-security/#4_1","title":"4. \ubcf4\uc548 \uc5c5\ub370\uc774\ud2b8","text":"<ul> <li>\uc758\uc874\uc131 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc815\uae30\uc801 \uc5c5\ub370\uc774\ud2b8</li> <li>\ubcf4\uc548 \ucde8\uc57d\uc810 \uc2a4\uce94 \uc790\ub3d9\ud654</li> <li>\ubcf4\uc548 \ud328\uce58 \uc801\uc6a9 \ud504\ub85c\uc138\uc2a4 \uad6c\ucd95</li> </ul>"},{"location":"11-security/#_16","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\uc811\uadfc \uc81c\uc5b4 - \uc778\uc99d \ubc0f \uad8c\ud55c \uad00\ub9ac</li> <li>\ub85c\uae45 - \ubcf4\uc548 \uac10\uc0ac \ub85c\uadf8</li> <li>\uc720\ud6a8\uc131 \uac80\uc0ac - \uc785\ub825 \uac80\uc99d \uc2dc\uc2a4\ud15c</li> <li>\ubaa8\ub2c8\ud130\ub9c1 - \ubcf4\uc548 \uba54\ud2b8\ub9ad \uc218\uc9d1</li> </ul>"},{"location":"12-circuit-breaker/","title":"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud328\ud134 (Circuit Breaker Pattern)","text":""},{"location":"12-circuit-breaker/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\ub294 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ud658\uacbd\uc5d0\uc11c \uc7a5\uc560 \uc804\ud30c\ub97c \ucc28\ub2e8\ud558\uace0 \uc2dc\uc2a4\ud15c \uc548\uc815\uc131\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4. \uc790\ub3d9 \uc7a5\uc560 \uac10\uc9c0, \uc810\uc9c4\uc801 \ubcf5\uad6c, \uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"12-circuit-breaker/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"12-circuit-breaker/#_3","title":"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc","text":"<ul> <li>CLOSED (\ub2eb\ud798): \uc815\uc0c1 \uc0c1\ud0dc, \ubaa8\ub4e0 \uc694\uccad \ud1b5\uacfc</li> <li>OPEN (\uc5f4\ub9bc): \uc7a5\uc560 \uc0c1\ud0dc, \uc694\uccad \ucc28\ub2e8 \ubc0f \uc989\uc2dc \uc2e4\ud328</li> <li>HALF_OPEN (\ubc18\uac1c\ubc29): \ubcf5\uad6c \ud14c\uc2a4\ud2b8 \uc0c1\ud0dc, \uc81c\ud55c\ub41c \uc694\uccad\ub9cc \ud1b5\uacfc</li> </ul>"},{"location":"12-circuit-breaker/#_4","title":"\uc0c1\ud0dc \uc804\ud658 \uc870\uac74","text":"<ul> <li>CLOSED \u2192 OPEN: \uc2e4\ud328\uc728 \uc784\uacc4\uac12 \ucd08\uacfc \ub610\ub294 \uc5f0\uc18d \uc2e4\ud328 \uc784\uacc4\uac12 \ub2ec\uc131</li> <li>OPEN \u2192 HALF_OPEN: \uc9c0\uc815\ub41c \ud0c0\uc784\uc544\uc6c3 \uc2dc\uac04 \uacbd\uacfc</li> <li>HALF_OPEN \u2192 CLOSED: \ud14c\uc2a4\ud2b8 \uc694\uccad \ubaa8\ub450 \uc131\uacf5</li> <li>HALF_OPEN \u2192 OPEN: \ud14c\uc2a4\ud2b8 \uc694\uccad \uc911 \ud558\ub098\ub77c\ub3c4 \uc2e4\ud328</li> </ul>"},{"location":"12-circuit-breaker/#_5","title":"\ud575\uc2ec \uba54\ud2b8\ub9ad","text":"<ul> <li>\uc2e4\ud328\uc728: \uc804\uccb4 \uc694\uccad \ub300\ube44 \uc2e4\ud328\ud55c \uc694\uccad\uc758 \ube44\uc728</li> <li>\uc751\ub2f5 \uc2dc\uac04: \uc694\uccad \ucc98\ub9ac\uc5d0 \uac78\ub9b0 \uc2dc\uac04</li> <li>\ucc98\ub9ac\ub7c9: \ub2e8\uc704 \uc2dc\uac04\ub2f9 \ucc98\ub9ac\ub41c \uc694\uccad \uc218</li> <li>\uac00\uc6a9\uc131: \uc11c\ube44\uc2a4 \uac00\uc6a9 \uc2dc\uac04\uc758 \ube44\uc728</li> </ul>"},{"location":"12-circuit-breaker/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"12-circuit-breaker/#circuitbreakerconfig","title":"CircuitBreakerConfig \uc124\uc815","text":"<pre><code>from rfs.service_discovery.circuit_breaker import (\n    CircuitBreakerConfig, \n    CircuitBreaker,\n    circuit_breaker\n)\n\nconfig = CircuitBreakerConfig(\n    failure_threshold=5,         # \uc2e4\ud328 \uc784\uacc4\uac12 (\ud69f\uc218)\n    failure_rate_threshold=0.5,  # \uc2e4\ud328\uc728 \uc784\uacc4\uac12 (50%)\n    timeout=10.0,               # \uc694\uccad \ud0c0\uc784\uc544\uc6c3 (\ucd08)\n    reset_timeout=60.0,         # OPEN \uc0c1\ud0dc \uc720\uc9c0 \uc2dc\uac04 (\ucd08)\n    half_open_max_requests=3,   # HALF_OPEN \ud14c\uc2a4\ud2b8 \uc694\uccad \uc218\n    window_size=10,             # \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \ud06c\uae30\n    window_duration=60.0        # \uc2dc\uac04 \uc708\ub3c4\uc6b0 (\ucd08)\n)\n</code></pre>"},{"location":"12-circuit-breaker/#_6","title":"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc","text":"\uc0c1\ud0dc \uc124\uba85 \ub3d9\uc791 <code>CLOSED</code> \uc815\uc0c1 \uc6b4\uc601 \ubaa8\ub4e0 \uc694\uccad \ud1b5\uacfc, \uc2e4\ud328 \uce74\uc6b4\ud2b8 <code>OPEN</code> \uc7a5\uc560 \ucc28\ub2e8 \uc694\uccad \uc989\uc2dc \uac70\ubd80, \ud0c0\uc784\uc544\uc6c3 \ub300\uae30 <code>HALF_OPEN</code> \ubcf5\uad6c \ud14c\uc2a4\ud2b8 \uc81c\ud55c\ub41c \ud14c\uc2a4\ud2b8 \uc694\uccad\ub9cc \ud5c8\uc6a9"},{"location":"12-circuit-breaker/#_7","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"12-circuit-breaker/#_8","title":"\ub370\ucf54\ub808\uc774\ud130 \ubc29\uc2dd \uc0ac\uc6a9","text":"<pre><code>from rfs.service_discovery.circuit_breaker import circuit_breaker, CircuitBreakerConfig\nfrom rfs.core.result import Result, Success, Failure\nimport asyncio\nimport random\n\n# \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc124\uc815\nconfig = CircuitBreakerConfig(\n    failure_threshold=3,         # 3\ubc88 \uc2e4\ud328 \uc2dc OPEN\n    failure_rate_threshold=0.6,  # \uc2e4\ud328\uc728 60% \ucd08\uacfc \uc2dc OPEN\n    timeout=5.0,                # 5\ucd08 \ud0c0\uc784\uc544\uc6c3\n    reset_timeout=30.0,         # 30\ucd08 \ud6c4 HALF_OPEN \uc2dc\ub3c4\n    half_open_max_requests=2    # HALF_OPEN\uc5d0\uc11c 2\ubc88 \ud14c\uc2a4\ud2b8\n)\n\n@circuit_breaker(name=\"external_api\", config=config)\nasync def call_external_api(url: str) -&gt; Result[dict, str]:\n    \"\"\"\uc678\ubd80 API \ud638\ucd9c (\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc801\uc6a9)\"\"\"\n    try:\n        # \uc678\ubd80 API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n        await asyncio.sleep(0.1)\n\n        # 30% \ud655\ub960\ub85c \uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\n        if random.random() &lt; 0.3:\n            raise Exception(\"API \ud638\ucd9c \uc2e4\ud328\")\n\n        return Success({\"status\": \"success\", \"data\": \"response\"})\n\n    except Exception as e:\n        return Failure(f\"API \ud638\ucd9c \uc2e4\ud328: {str(e)}\")\n\n# \uc0ac\uc6a9\nasync def main():\n    # \ubc18\ubcf5 \ud638\ucd9c\ub85c \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ub3d9\uc791 \ud14c\uc2a4\ud2b8\n    for i in range(10):\n        try:\n            result = await call_external_api(\"https://api.example.com/data\")\n\n            if result.is_success():\n                print(f\"\ud638\ucd9c {i+1}: \uc131\uacf5 - {result.unwrap()}\")\n            else:\n                print(f\"\ud638\ucd9c {i+1}: \uc2e4\ud328 - {result.unwrap_err()}\")\n\n        except Exception as e:\n            print(f\"\ud638\ucd9c {i+1}: \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ucc28\ub2e8 - {e}\")\n\n        await asyncio.sleep(1)\n\n    # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc \ud655\uc778\n    breaker = call_external_api.circuit_breaker()\n    metrics = breaker.get_metrics()\n\n    print(f\"\\n\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc: {breaker.get_state().value}\")\n    print(f\"\ucd1d \uc694\uccad: {metrics.total_requests}\")\n    print(f\"\uc131\uacf5: {metrics.successful_requests}\")\n    print(f\"\uc2e4\ud328: {metrics.failed_requests}\")\n    print(f\"\uc131\uacf5\ub960: {metrics.success_rate:.2%}\")\n\n# \uc2e4\ud589\nasyncio.run(main())\n</code></pre>"},{"location":"12-circuit-breaker/#_9","title":"\uc218\ub3d9 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uad00\ub9ac","text":"<pre><code>from rfs.service_discovery.circuit_breaker import CircuitBreaker, CircuitBreakerConfig\n\nclass DatabaseService:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc11c\ube44\uc2a4 (\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc801\uc6a9)\"\"\"\n\n    def __init__(self):\n        # \uac01 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ubcc4 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\n        self.primary_db_breaker = CircuitBreaker(\n            name=\"primary_db\",\n            config=CircuitBreakerConfig(\n                failure_threshold=5,\n                failure_rate_threshold=0.5,\n                timeout=3.0,\n                reset_timeout=60.0\n            )\n        )\n\n        self.replica_db_breaker = CircuitBreaker(\n            name=\"replica_db\", \n            config=CircuitBreakerConfig(\n                failure_threshold=3,\n                failure_rate_threshold=0.7,\n                timeout=2.0,\n                reset_timeout=30.0\n            )\n        )\n\n    async def get_user(self, user_id: str) -&gt; Result[dict, str]:\n        \"\"\"\uc0ac\uc6a9\uc790 \uc870\ud68c (Primary DB \u2192 Replica DB \uc21c\uc11c\ub85c \uc2dc\ub3c4)\"\"\"\n\n        # Primary DB \uc2dc\ub3c4\n        if not self.primary_db_breaker.is_open():\n            try:\n                result = await self.primary_db_breaker.call_async(\n                    self._query_primary_db, \n                    f\"SELECT * FROM users WHERE id = '{user_id}'\"\n                )\n                return Success(result)\n\n            except Exception as e:\n                print(f\"Primary DB \uc2e4\ud328: {e}\")\n\n        # Replica DB \ud3f4\ubc31\n        if not self.replica_db_breaker.is_open():\n            try:\n                result = await self.replica_db_breaker.call_async(\n                    self._query_replica_db,\n                    f\"SELECT * FROM users WHERE id = '{user_id}'\"\n                )\n                return Success(result)\n\n            except Exception as e:\n                print(f\"Replica DB\ub3c4 \uc2e4\ud328: {e}\")\n\n        return Failure(\"\ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc0ac\uc6a9 \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4\")\n\n    async def _query_primary_db(self, query: str) -&gt; dict:\n        \"\"\"Primary DB \ucffc\ub9ac\"\"\"\n        # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ubc0f \ucffc\ub9ac\n        await asyncio.sleep(0.05)\n\n        # 20% \ud655\ub960\ub85c \uc2e4\ud328\n        if random.random() &lt; 0.2:\n            raise Exception(\"Primary DB \uc5f0\uacb0 \uc2e4\ud328\")\n\n        return {\"id\": \"user123\", \"name\": \"John\", \"source\": \"primary\"}\n\n    async def _query_replica_db(self, query: str) -&gt; dict:\n        \"\"\"Replica DB \ucffc\ub9ac\"\"\"\n        await asyncio.sleep(0.1)\n\n        # 10% \ud655\ub960\ub85c \uc2e4\ud328\n        if random.random() &lt; 0.1:\n            raise Exception(\"Replica DB \uc5f0\uacb0 \uc2e4\ud328\")\n\n        return {\"id\": \"user123\", \"name\": \"John\", \"source\": \"replica\"}\n\n    def get_status(self) -&gt; dict:\n        \"\"\"\uc11c\ube44\uc2a4 \uc0c1\ud0dc \uc870\ud68c\"\"\"\n        return {\n            \"primary_db\": {\n                \"state\": self.primary_db_breaker.get_state().value,\n                \"metrics\": self.primary_db_breaker.get_metrics().__dict__\n            },\n            \"replica_db\": {\n                \"state\": self.replica_db_breaker.get_state().value,\n                \"metrics\": self.replica_db_breaker.get_metrics().__dict__\n            }\n        }\n\n# \uc0ac\uc6a9\nasync def test_database_service():\n    db_service = DatabaseService()\n\n    # \ubc18\ubcf5 \ud638\ucd9c\ub85c \ud3f4\ubc31 \ub3d9\uc791 \ud14c\uc2a4\ud2b8\n    for i in range(15):\n        result = await db_service.get_user(\"user123\")\n\n        if result.is_success():\n            data = result.unwrap()\n            print(f\"\uc870\ud68c {i+1}: \uc131\uacf5 - {data['name']} (\ucd9c\ucc98: {data['source']})\")\n        else:\n            print(f\"\uc870\ud68c {i+1}: \uc2e4\ud328 - {result.unwrap_err()}\")\n\n        await asyncio.sleep(0.5)\n\n    # \ucd5c\uc885 \uc0c1\ud0dc \ucd9c\ub825\n    status = db_service.get_status()\n    print(f\"\\n\ucd5c\uc885 \uc0c1\ud0dc:\")\n    print(f\"Primary DB: {status['primary_db']['state']}\")\n    print(f\"Replica DB: {status['replica_db']['state']}\")\n\nasyncio.run(test_database_service())\n</code></pre>"},{"location":"12-circuit-breaker/#_10","title":"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0","text":"<pre><code>import httpx\nfrom typing import Optional\n\nclass MicroserviceClient:\n    \"\"\"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ud074\ub77c\uc774\uc5b8\ud2b8 (\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc801\uc6a9)\"\"\"\n\n    def __init__(self, service_name: str, base_url: str):\n        self.service_name = service_name\n        self.base_url = base_url\n\n        # \uc11c\ube44\uc2a4\ubcc4 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc124\uc815\n        self.circuit_breaker = CircuitBreaker(\n            name=f\"service_{service_name}\",\n            config=CircuitBreakerConfig(\n                failure_threshold=3,\n                failure_rate_threshold=0.5,\n                timeout=10.0,\n                reset_timeout=60.0,\n                exclude_exceptions=[httpx.HTTPStatusError]  # 4xx \uc5d0\ub7ec\ub294 \uc81c\uc678\n            )\n        )\n\n    async def get(self, endpoint: str, **kwargs) -&gt; Result[dict, str]:\n        \"\"\"GET \uc694\uccad\"\"\"\n        return await self._request(\"GET\", endpoint, **kwargs)\n\n    async def post(self, endpoint: str, json_data: dict, **kwargs) -&gt; Result[dict, str]:\n        \"\"\"POST \uc694\uccad\"\"\"\n        return await self._request(\"POST\", endpoint, json=json_data, **kwargs)\n\n    async def _request(self, method: str, endpoint: str, **kwargs) -&gt; Result[dict, str]:\n        \"\"\"HTTP \uc694\uccad (\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc801\uc6a9)\"\"\"\n        url = f\"{self.base_url.rstrip('/')}/{endpoint.lstrip('/')}\"\n\n        try:\n            response = await self.circuit_breaker.call_async(\n                self._http_call,\n                method,\n                url,\n                **kwargs\n            )\n\n            return Success(response)\n\n        except Exception as e:\n            return Failure(f\"{self.service_name} \uc11c\ube44\uc2a4 \ud638\ucd9c \uc2e4\ud328: {str(e)}\")\n\n    async def _http_call(self, method: str, url: str, **kwargs) -&gt; dict:\n        \"\"\"\uc2e4\uc81c HTTP \ud638\ucd9c\"\"\"\n        async with httpx.AsyncClient() as client:\n            response = await client.request(method, url, **kwargs)\n\n            # 5xx \uc5d0\ub7ec\ub294 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud2b8\ub9ac\uac70\n            if response.status_code &gt;= 500:\n                raise httpx.HTTPStatusError(\n                    f\"Server error: {response.status_code}\",\n                    request=response.request,\n                    response=response\n                )\n\n            # 4xx \uc5d0\ub7ec\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc624\ub958\ub85c \ucc98\ub9ac\n            response.raise_for_status()\n\n            return response.json()\n\n    def get_health(self) -&gt; dict:\n        \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc \uc870\ud68c\"\"\"\n        metrics = self.circuit_breaker.get_metrics()\n\n        return {\n            \"service\": self.service_name,\n            \"circuit_breaker\": {\n                \"state\": self.circuit_breaker.get_state().value,\n                \"total_requests\": metrics.total_requests,\n                \"success_rate\": metrics.success_rate,\n                \"average_response_time\": metrics.average_response_time\n            }\n        }\n\n# \uc11c\ube44\uc2a4 \ud074\ub77c\uc774\uc5b8\ud2b8\ub4e4\nclass ServiceRegistry:\n    \"\"\"\uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\"\"\"\n\n    def __init__(self):\n        self.clients = {\n            \"user_service\": MicroserviceClient(\"user\", \"http://user-service:8001\"),\n            \"order_service\": MicroserviceClient(\"order\", \"http://order-service:8002\"),\n            \"payment_service\": MicroserviceClient(\"payment\", \"http://payment-service:8003\"),\n            \"notification_service\": MicroserviceClient(\"notification\", \"http://notification-service:8004\")\n        }\n\n    async def create_order(self, order_data: dict) -&gt; Result[dict, str]:\n        \"\"\"\uc8fc\ubb38 \uc0dd\uc131 (\uc5ec\ub7ec \uc11c\ube44\uc2a4 \uc870\ud569)\"\"\"\n        try:\n            # 1. \uc0ac\uc6a9\uc790 \uac80\uc99d\n            user_result = await self.clients[\"user_service\"].get(\n                f\"/users/{order_data['user_id']}\"\n            )\n            if user_result.is_failure():\n                return user_result\n\n            # 2. \uc8fc\ubb38 \uc0dd\uc131\n            order_result = await self.clients[\"order_service\"].post(\n                \"/orders\",\n                json_data=order_data\n            )\n            if order_result.is_failure():\n                return order_result\n\n            order = order_result.unwrap()\n\n            # 3. \uacb0\uc81c \ucc98\ub9ac\n            payment_result = await self.clients[\"payment_service\"].post(\n                \"/payments\",\n                json_data={\n                    \"order_id\": order[\"id\"],\n                    \"amount\": order[\"total\"],\n                    \"payment_method\": order_data[\"payment_method\"]\n                }\n            )\n            if payment_result.is_failure():\n                # \uc8fc\ubb38 \ucde8\uc18c (\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158)\n                await self._cancel_order(order[\"id\"])\n                return payment_result\n\n            # 4. \uc54c\ub9bc \ubc1c\uc1a1 (\uc2e4\ud328\ud574\ub3c4 \uc8fc\ubb38\uc740 \uc720\uc9c0)\n            notification_result = await self.clients[\"notification_service\"].post(\n                \"/notifications\",\n                json_data={\n                    \"user_id\": order_data[\"user_id\"],\n                    \"type\": \"order_confirmed\",\n                    \"order_id\": order[\"id\"]\n                }\n            )\n            if notification_result.is_failure():\n                print(f\"\uc54c\ub9bc \ubc1c\uc1a1 \uc2e4\ud328: {notification_result.unwrap_err()}\")\n\n            return Success(order)\n\n        except Exception as e:\n            return Failure(f\"\uc8fc\ubb38 \uc0dd\uc131 \uc911 \uc624\ub958: {str(e)}\")\n\n    async def _cancel_order(self, order_id: str) -&gt; None:\n        \"\"\"\uc8fc\ubb38 \ucde8\uc18c (\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158)\"\"\"\n        try:\n            await self.clients[\"order_service\"].post(\n                f\"/orders/{order_id}/cancel\",\n                json_data={}\n            )\n        except Exception as e:\n            print(f\"\uc8fc\ubb38 \ucde8\uc18c \uc2e4\ud328: {e}\")\n\n    def get_system_health(self) -&gt; dict:\n        \"\"\"\uc804\uccb4 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\"\"\"\n        health = {\n            \"overall_status\": \"healthy\",\n            \"services\": {}\n        }\n\n        unhealthy_count = 0\n\n        for name, client in self.clients.items():\n            service_health = client.get_health()\n            health[\"services\"][name] = service_health\n\n            # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uac00 \uc5f4\ub824\uc788\uc73c\uba74 \ube44\uc815\uc0c1\n            if service_health[\"circuit_breaker\"][\"state\"] == \"open\":\n                unhealthy_count += 1\n\n        # \uc804\uccb4 \uc0c1\ud0dc \uacb0\uc815\n        if unhealthy_count == 0:\n            health[\"overall_status\"] = \"healthy\"\n        elif unhealthy_count &lt; len(self.clients) / 2:\n            health[\"overall_status\"] = \"degraded\"\n        else:\n            health[\"overall_status\"] = \"unhealthy\"\n\n        return health\n\n# \uc0ac\uc6a9\nasync def test_microservice_communication():\n    registry = ServiceRegistry()\n\n    # \uc8fc\ubb38 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\n    order_data = {\n        \"user_id\": \"user123\",\n        \"items\": [{\"product_id\": \"prod1\", \"quantity\": 2}],\n        \"payment_method\": \"credit_card\"\n    }\n\n    for i in range(10):\n        result = await registry.create_order(order_data)\n\n        if result.is_success():\n            order = result.unwrap()\n            print(f\"\uc8fc\ubb38 {i+1}: \uc131\uacf5 - ID {order['id']}\")\n        else:\n            print(f\"\uc8fc\ubb38 {i+1}: \uc2e4\ud328 - {result.unwrap_err()}\")\n\n        await asyncio.sleep(2)\n\n    # \uc2dc\uc2a4\ud15c \uc804\uccb4 \uc0c1\ud0dc \ud655\uc778\n    health = registry.get_system_health()\n    print(f\"\\n\uc2dc\uc2a4\ud15c \uc0c1\ud0dc: {health['overall_status']}\")\n\n    for service_name, service_health in health[\"services\"].items():\n        cb_state = service_health[\"circuit_breaker\"][\"state\"]\n        success_rate = service_health[\"circuit_breaker\"][\"success_rate\"]\n        print(f\"{service_name}: {cb_state} (\uc131\uacf5\ub960: {success_rate:.2%})\")\n\n# \uc2e4\ud589\nasyncio.run(test_microservice_communication())\n</code></pre>"},{"location":"12-circuit-breaker/#_11","title":"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.service_discovery.circuit_breaker import get_all_circuit_breakers\nfrom rfs.monitoring.metrics import get_metrics_collector\n\nclass CircuitBreakerMonitor:\n    \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ubaa8\ub2c8\ud130\ub9c1\"\"\"\n\n    def __init__(self):\n        self.metrics_collector = get_metrics_collector()\n\n        # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uba54\ud2b8\ub9ad\n        self.state_counter = self.metrics_collector.counter(\n            \"circuit_breaker_state_changes_total\",\n            description=\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc0c1\ud0dc \ubcc0\uacbd \ud69f\uc218\"\n        )\n\n        self.request_counter = self.metrics_collector.counter(\n            \"circuit_breaker_requests_total\", \n            description=\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\ub97c \ud1b5\ud55c \ucd1d \uc694\uccad \uc218\"\n        )\n\n        self.rejection_counter = self.metrics_collector.counter(\n            \"circuit_breaker_rejected_requests_total\",\n            description=\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uc5d0 \uc758\ud574 \uac70\ubd80\ub41c \uc694\uccad \uc218\"\n        )\n\n        self.response_time_histogram = self.metrics_collector.histogram(\n            \"circuit_breaker_response_time_seconds\",\n            description=\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\ub97c \ud1b5\ud55c \uc751\ub2f5 \uc2dc\uac04\"\n        )\n\n    def collect_metrics(self):\n        \"\"\"\ubaa8\ub4e0 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uba54\ud2b8\ub9ad \uc218\uc9d1\"\"\"\n        all_breakers = get_all_circuit_breakers()\n\n        for name, breaker in all_breakers.items():\n            metrics = breaker.get_metrics()\n            labels = {\"circuit_breaker\": name}\n\n            # \uc694\uccad \uc218 \uba54\ud2b8\ub9ad\n            self.request_counter.increment(\n                metrics.total_requests,\n                labels={**labels, \"type\": \"total\"}\n            )\n\n            self.request_counter.increment(\n                metrics.successful_requests,\n                labels={**labels, \"type\": \"success\"}\n            )\n\n            self.request_counter.increment(\n                metrics.failed_requests,\n                labels={**labels, \"type\": \"failure\"}\n            )\n\n            # \uac70\ubd80 \uc218 \uba54\ud2b8\ub9ad\n            self.rejection_counter.increment(\n                metrics.rejected_requests,\n                labels=labels\n            )\n\n            # \uc751\ub2f5 \uc2dc\uac04 \uba54\ud2b8\ub9ad (\uc131\uacf5\ud55c \uc694\uccad\ub9cc)\n            if metrics.successful_requests &gt; 0:\n                avg_response_time = metrics.average_response_time\n                self.response_time_histogram.observe(\n                    avg_response_time,\n                    labels=labels\n                )\n\n            # \uc0c1\ud0dc \ubcc0\uacbd \uba54\ud2b8\ub9ad\n            for timestamp, old_state, new_state in metrics.state_changes:\n                self.state_counter.increment(\n                    1,\n                    labels={\n                        **labels,\n                        \"from_state\": old_state.value,\n                        \"to_state\": new_state.value\n                    }\n                )\n\n    def generate_dashboard_data(self) -&gt; dict:\n        \"\"\"\ub300\uc2dc\ubcf4\ub4dc\uc6a9 \ub370\uc774\ud130 \uc0dd\uc131\"\"\"\n        all_breakers = get_all_circuit_breakers()\n\n        dashboard = {\n            \"summary\": {\n                \"total_breakers\": len(all_breakers),\n                \"open_breakers\": 0,\n                \"half_open_breakers\": 0,\n                \"closed_breakers\": 0\n            },\n            \"breakers\": []\n        }\n\n        for name, breaker in all_breakers.items():\n            state = breaker.get_state()\n            metrics = breaker.get_metrics()\n\n            # \uc694\uc57d \uce74\uc6b4\ud2b8 \uc5c5\ub370\uc774\ud2b8\n            if state.value == \"open\":\n                dashboard[\"summary\"][\"open_breakers\"] += 1\n            elif state.value == \"half_open\":\n                dashboard[\"summary\"][\"half_open_breakers\"] += 1\n            else:\n                dashboard[\"summary\"][\"closed_breakers\"] += 1\n\n            # \uac1c\ubcc4 \ube0c\ub808\uc774\ucee4 \uc815\ubcf4\n            breaker_info = {\n                \"name\": name,\n                \"state\": state.value,\n                \"metrics\": {\n                    \"total_requests\": metrics.total_requests,\n                    \"success_rate\": metrics.success_rate,\n                    \"failure_rate\": metrics.failure_rate,\n                    \"average_response_time\": metrics.average_response_time,\n                    \"rejected_requests\": metrics.rejected_requests\n                },\n                \"health_score\": self._calculate_health_score(metrics)\n            }\n\n            dashboard[\"breakers\"].append(breaker_info)\n\n        # \uac74\uac15\ub3c4 \uae30\uc900\uc73c\ub85c \uc815\ub82c (\ub0ae\uc740 \uc21c\uc11c\ub300\ub85c)\n        dashboard[\"breakers\"].sort(key=lambda b: b[\"health_score\"])\n\n        return dashboard\n\n    def _calculate_health_score(self, metrics) -&gt; float:\n        \"\"\"\uac74\uac15\ub3c4 \uc810\uc218 \uacc4\uc0b0 (0-100)\"\"\"\n        if metrics.total_requests == 0:\n            return 100.0\n\n        # \uc131\uacf5\ub960 \uae30\ubc18 \uc810\uc218 (70%)\n        success_score = metrics.success_rate * 70\n\n        # \uc751\ub2f5 \uc2dc\uac04 \uae30\ubc18 \uc810\uc218 (30%)\n        # 1\ucd08 \uc774\ud558\uba74 \ub9cc\uc810, 5\ucd08 \uc774\uc0c1\uc774\uba74 0\uc810\n        response_time_score = max(0, min(30, (5 - metrics.average_response_time) * 6))\n\n        return success_score + response_time_score\n\n    async def alert_on_threshold(self, failure_rate_threshold: float = 0.5):\n        \"\"\"\uc784\uacc4\uac12 \uae30\ubc18 \uc54c\ub9bc\"\"\"\n        all_breakers = get_all_circuit_breakers()\n\n        alerts = []\n\n        for name, breaker in all_breakers.items():\n            state = breaker.get_state()\n            metrics = breaker.get_metrics()\n\n            # OPEN \uc0c1\ud0dc \uc54c\ub9bc\n            if state.value == \"open\":\n                alerts.append({\n                    \"severity\": \"critical\",\n                    \"message\": f\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 '{name}'\uc774 OPEN \uc0c1\ud0dc\uc785\ub2c8\ub2e4\",\n                    \"details\": {\n                        \"failure_rate\": metrics.failure_rate,\n                        \"total_requests\": metrics.total_requests\n                    }\n                })\n\n            # \ub192\uc740 \uc2e4\ud328\uc728 \uacbd\uace0\n            elif metrics.failure_rate &gt; failure_rate_threshold:\n                alerts.append({\n                    \"severity\": \"warning\", \n                    \"message\": f\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 '{name}'\uc758 \uc2e4\ud328\uc728\uc774 \ub192\uc2b5\ub2c8\ub2e4\",\n                    \"details\": {\n                        \"failure_rate\": metrics.failure_rate,\n                        \"threshold\": failure_rate_threshold\n                    }\n                })\n\n        return alerts\n\n# \uc0ac\uc6a9\nmonitor = CircuitBreakerMonitor()\n\n# \uba54\ud2b8\ub9ad \uc218\uc9d1\nmonitor.collect_metrics()\n\n# \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130\ndashboard = monitor.generate_dashboard_data()\nprint(f\"\ucd1d \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4: {dashboard['summary']['total_breakers']}\uac1c\")\nprint(f\"OPEN \uc0c1\ud0dc: {dashboard['summary']['open_breakers']}\uac1c\")\n\n# \uac74\uac15\ub3c4 \ub0ae\uc740 \uc21c\uc73c\ub85c \ud45c\uc2dc\nfor breaker in dashboard[\"breakers\"][:5]:\n    print(f\"{breaker['name']}: {breaker['state']} (\uac74\uac15\ub3c4: {breaker['health_score']:.1f})\")\n\n# \uc54c\ub9bc \ud655\uc778\nalerts = await monitor.alert_on_threshold(failure_rate_threshold=0.3)\nfor alert in alerts:\n    print(f\"[{alert['severity'].upper()}] {alert['message']}\")\n</code></pre>"},{"location":"12-circuit-breaker/#_12","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"12-circuit-breaker/#1","title":"1. \uc801\uc808\ud55c \uc784\uacc4\uac12 \uc124\uc815","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc11c\ube44\uc2a4 \ud2b9\uc131\uc5d0 \ub9de\ub294 \uc124\uc815\ndef get_circuit_breaker_config(service_type: str) -&gt; CircuitBreakerConfig:\n    \"\"\"\uc11c\ube44\uc2a4 \ud0c0\uc785\ubcc4 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc124\uc815\"\"\"\n\n    if service_type == \"database\":\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4: \ube60\ub978 \ubcf5\uad6c, \ub0ae\uc740 \uc784\uacc4\uac12\n        return CircuitBreakerConfig(\n            failure_threshold=3,\n            failure_rate_threshold=0.3,\n            timeout=2.0,\n            reset_timeout=30.0\n        )\n\n    elif service_type == \"external_api\":\n        # \uc678\ubd80 API: \ub354 \uad00\ub300\ud55c \uc124\uc815\n        return CircuitBreakerConfig(\n            failure_threshold=5,\n            failure_rate_threshold=0.6,\n            timeout=10.0,\n            reset_timeout=60.0\n        )\n\n    elif service_type == \"critical_service\":\n        # \uc911\uc694 \uc11c\ube44\uc2a4: \ub9e4\uc6b0 \ubbfc\uac10\ud55c \uc124\uc815\n        return CircuitBreakerConfig(\n            failure_threshold=2,\n            failure_rate_threshold=0.2,\n            timeout=1.0,\n            reset_timeout=15.0\n        )\n\n    else:\n        # \uae30\ubcf8 \uc124\uc815\n        return CircuitBreakerConfig()\n</code></pre>"},{"location":"12-circuit-breaker/#2","title":"2. \ud3f4\ubc31 \ud328\ud134 \uad6c\ud604","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc801\uc808\ud55c \ud3f4\ubc31 \uc804\ub7b5\n@circuit_breaker(name=\"user_service\")\nasync def get_user_info(user_id: str) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c\"\"\"\n    # \uc2e4\uc81c \uc11c\ube44\uc2a4 \ud638\ucd9c\n    return await call_user_service(user_id)\n\nasync def get_user_with_fallback(user_id: str) -&gt; Result[dict, str]:\n    \"\"\"\ud3f4\ubc31\uc774 \uc788\ub294 \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c\"\"\"\n    try:\n        # \uc8fc \uc11c\ube44\uc2a4 \uc2dc\ub3c4\n        result = await get_user_info(user_id)\n        if result.is_success():\n            return result\n\n    except Exception:\n        pass  # \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uac00 \uc5f4\ub824\uc788\uc74c\n\n    # \ud3f4\ubc31 1: \uce90\uc2dc\uc5d0\uc11c \uc870\ud68c\n    cached_user = await get_user_from_cache(user_id)\n    if cached_user:\n        return Success(cached_user)\n\n    # \ud3f4\ubc31 2: \uae30\ubcf8 \uc815\ubcf4 \ubc18\ud658\n    return Success({\n        \"id\": user_id,\n        \"name\": \"Unknown User\",\n        \"cached\": True\n    })\n</code></pre>"},{"location":"12-circuit-breaker/#3","title":"3. \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ud3ec\uad04\uc801\uc778 \ubaa8\ub2c8\ud130\ub9c1\ndef setup_circuit_breaker_monitoring():\n    \"\"\"\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815\"\"\"\n\n    # \uc0c1\ud0dc \ubcc0\uacbd \ucf5c\ubc31 \ub4f1\ub85d\n    def on_state_change(breaker_name: str, old_state, new_state):\n        if new_state.value == \"open\":\n            # \uc989\uc2dc \uc54c\ub9bc\n            send_alert(f\"CRITICAL: {breaker_name} \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 OPEN\")\n\n        elif old_state.value == \"open\" and new_state.value == \"half_open\":\n            # \ubcf5\uad6c \uc2dc\ub3c4 \uc54c\ub9bc\n            send_notification(f\"INFO: {breaker_name} \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ubcf5\uad6c \uc2dc\ub3c4 \uc911\")\n\n    # \ubaa8\ub4e0 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uc5d0 \ucf5c\ubc31 \ub4f1\ub85d\n    for breaker in get_all_circuit_breakers().values():\n        breaker.on_state_change = lambda old, new: on_state_change(breaker.name, old, new)\n</code></pre>"},{"location":"12-circuit-breaker/#4","title":"4. \ud14c\uc2a4\ud2b8 \uc804\ub7b5","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud14c\uc2a4\ud2b8\nimport pytest\n\nclass TestCircuitBreaker:\n\n    @pytest.fixture\n    def test_breaker(self):\n        \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\"\"\"\n        config = CircuitBreakerConfig(\n            failure_threshold=2,\n            reset_timeout=1.0,\n            half_open_max_requests=1\n        )\n        return CircuitBreaker(\"test\", config)\n\n    async def test_circuit_breaker_opens_on_failures(self, test_breaker):\n        \"\"\"\uc5f0\uc18d \uc2e4\ud328 \uc2dc OPEN \uc0c1\ud0dc \uc804\ud658\"\"\"\n\n        async def failing_function():\n            raise Exception(\"Test failure\")\n\n        # \uc5f0\uc18d \uc2e4\ud328\ub85c OPEN \uc0c1\ud0dc \ub9cc\ub4e4\uae30\n        for _ in range(3):\n            try:\n                await test_breaker.call_async(failing_function)\n            except:\n                pass\n\n        assert test_breaker.is_open()\n\n    async def test_circuit_breaker_half_open_recovery(self, test_breaker):\n        \"\"\"HALF_OPEN\uc5d0\uc11c \ubcf5\uad6c \ud14c\uc2a4\ud2b8\"\"\"\n\n        # OPEN \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uae30\n        await self._make_breaker_open(test_breaker)\n\n        # \ud0c0\uc784\uc544\uc6c3 \ub300\uae30\n        await asyncio.sleep(1.1)\n\n        # \uc131\uacf5\ud558\ub294 \ud568\uc218\ub85c \ubcf5\uad6c \ud14c\uc2a4\ud2b8\n        async def success_function():\n            return \"success\"\n\n        result = await test_breaker.call_async(success_function)\n        assert result == \"success\"\n        assert test_breaker.is_closed()\n</code></pre>"},{"location":"12-circuit-breaker/#_13","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"12-circuit-breaker/#1_1","title":"1. \uc784\uacc4\uac12 \uc124\uc815","text":"<ul> <li>\ub108\ubb34 \ub0ae\uc740 \uc784\uacc4\uac12: \ubd88\ud544\uc694\ud55c \ucc28\ub2e8\uc73c\ub85c \uac00\uc6a9\uc131 \uc800\ud558</li> <li>\ub108\ubb34 \ub192\uc740 \uc784\uacc4\uac12: \uc7a5\uc560 \uc804\ud30c \ubc29\uc9c0 \ud6a8\uacfc \uac10\uc18c</li> <li>\uc11c\ube44\uc2a4 \ud2b9\uc131\uacfc SLA\ub97c \uace0\ub824\ud55c \uc124\uc815 \ud544\uc694</li> </ul>"},{"location":"12-circuit-breaker/#2_1","title":"2. \ud3f4\ubc31 \uc804\ub7b5","text":"<ul> <li>\ud3f4\ubc31 \ub85c\uc9c1\ub3c4 \uc2e4\ud328\ud560 \uc218 \uc788\uc74c\uc744 \uace0\ub824</li> <li>\ud3f4\ubc31 \ub370\uc774\ud130\uc758 \uc77c\uad00\uc131 \uad00\ub9ac</li> <li>\ud3f4\ubc31 \uc131\ub2a5\uc774 \uc2dc\uc2a4\ud15c\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5 \uace0\ub824</li> </ul>"},{"location":"12-circuit-breaker/#3_1","title":"3. \uc0c1\ud0dc \uc804\ud658 \ud0c0\uc774\ubc0d","text":"<ul> <li>\ub108\ubb34 \ube60\ub978 \ubcf5\uad6c \uc2dc\ub3c4: \ubd88\uc548\uc815\ud55c \uc11c\ube44\uc2a4\uc5d0 \ubd80\ud558 \uc99d\uac00</li> <li>\ub108\ubb34 \ub2a6\uc740 \ubcf5\uad6c: \uac00\uc6a9\uc131 \uc800\ud558 \uc2dc\uac04 \uc99d\uac00</li> <li>\uc9c0\uc218 \ubc31\uc624\ud504\ub098 \uc810\uc9c4\uc801 \ubcf5\uad6c \uace0\ub824</li> </ul>"},{"location":"12-circuit-breaker/#4_1","title":"4. \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9","text":"<ul> <li>\uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \ud06c\uae30 \uad00\ub9ac</li> <li>\uba54\ud2b8\ub9ad \ub370\uc774\ud130 \ub204\uc801\uc73c\ub85c \uc778\ud55c \uba54\ubaa8\ub9ac \ub9ac\ud06c \ubc29\uc9c0</li> <li>\uc815\uae30\uc801\uc778 \uba54\ud2b8\ub9ad \uc815\ub9ac \ub610\ub294 \uc21c\ud658 \ubc84\ud37c \uc0ac\uc6a9</li> </ul>"},{"location":"12-circuit-breaker/#_14","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ub85c\ub4dc \ubc38\ub7f0\uc2f1 - \ub85c\ub4dc \ubc38\ub7f0\uc11c\uc640 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud1b5\ud569</li> <li>\ubaa8\ub2c8\ud130\ub9c1 - \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uba54\ud2b8\ub9ad \uc218\uc9d1</li> <li>\ubcf4\uc548 - DDoS \ubc29\uc5b4\uc640 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4</li> <li>\ubc30\ud3ec - \ubb34\uc911\ub2e8 \ubc30\ud3ec\uc640 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4</li> </ul>"},{"location":"13-load-balancing/","title":"\ub85c\ub4dc \ubc38\ub7f0\uc2f1 (Load Balancing)","text":""},{"location":"13-load-balancing/#_1","title":"\ud83d\udccc \uac1c\uc694","text":"<p>RFS Framework\uc758 \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc2dc\uc2a4\ud15c\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc0ac\uc774\ub4dc \ub85c\ub4dc \ubc38\ub7f0\uc2f1\uc744 \ud1b5\ud574 \ud2b8\ub798\ud53d\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ubd84\uc0b0\ud558\uace0 \uace0\uac00\uc6a9\uc131\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4. \ub2e4\uc591\ud55c \uc54c\uace0\ub9ac\uc998, \ud5ec\uc2a4\uccb4\ud06c, \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \ud1b5\ud569\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"13-load-balancing/#_2","title":"\ud83c\udfaf \ud575\uc2ec \uac1c\ub150","text":""},{"location":"13-load-balancing/#_3","title":"\ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc804\ub7b5","text":"<ul> <li>Round Robin: \uc21c\ucc28\uc801\uc73c\ub85c \uc694\uccad \ubd84\uc0b0</li> <li>Random: \uc784\uc758\ub85c \uc11c\ubc84 \uc120\ud0dd</li> <li>Least Connections: \uac00\uc7a5 \uc801\uc740 \uc5f0\uacb0 \uc218\ub97c \uac00\uc9c4 \uc11c\ubc84 \uc120\ud0dd</li> <li>Weighted Round Robin: \uac00\uc911\uce58 \uae30\ubc18 \uc21c\ucc28 \ubd84\uc0b0</li> <li>Consistent Hash: \uc77c\uad00\ub41c \ud574\uc2f1\uc73c\ub85c \uc138\uc158 \uace0\uc815</li> <li>Least Response Time: \uac00\uc7a5 \ube60\ub978 \uc751\ub2f5 \uc2dc\uac04\uc744 \uac00\uc9c4 \uc11c\ubc84 \uc120\ud0dd</li> </ul>"},{"location":"13-load-balancing/#_4","title":"\ud5ec\uc2a4\uccb4\ud06c","text":"<ul> <li>Active Health Check: \uc8fc\uae30\uc801\uc73c\ub85c \uc11c\ubc84 \uc0c1\ud0dc \ud655\uc778</li> <li>Passive Health Check: \uc2e4\uc81c \uc694\uccad \uacb0\uacfc\ub85c \uc0c1\ud0dc \ud310\ub2e8</li> <li>Circuit Breaker Integration: \uc7a5\uc560 \uc11c\ubc84 \uc790\ub3d9 \uc81c\uc678</li> </ul>"},{"location":"13-load-balancing/#_5","title":"\uc11c\ube44\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uc0c1\ud0dc","text":"<ul> <li>HEALTHY: \uc815\uc0c1 \ub3d9\uc791</li> <li>UNHEALTHY: \ube44\uc815\uc0c1 \ub3d9\uc791 (\uc81c\uc678)</li> <li>DEGRADED: \uc131\ub2a5 \uc800\ud558 (\uc81c\ud55c\uc801 \uc0ac\uc6a9)</li> <li>UNKNOWN: \uc0c1\ud0dc \ubd88\uba85</li> </ul>"},{"location":"13-load-balancing/#api","title":"\ud83d\udcda API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"13-load-balancing/#loadbalancerconfig","title":"LoadBalancerConfig \uc124\uc815","text":"<pre><code>from rfs.service_discovery.load_balancer import (\n    LoadBalancer,\n    LoadBalancerConfig,\n    LoadBalancingStrategy,\n    ServiceInstance\n)\n\nconfig = LoadBalancerConfig(\n    strategy=LoadBalancingStrategy.ROUND_ROBIN,\n    health_check_enabled=True,\n    health_check_interval=30.0,       # 30\ucd08\ub9c8\ub2e4 \ud5ec\uc2a4\uccb4\ud06c\n    health_check_timeout=5.0,         # 5\ucd08 \ud0c0\uc784\uc544\uc6c3\n    max_consecutive_failures=3,       # 3\ud68c \uc2e4\ud328 \uc2dc \uc81c\uc678\n    retry_enabled=True,\n    max_retries=2,\n    circuit_breaker_enabled=True,\n    sticky_sessions=False\n)\n</code></pre>"},{"location":"13-load-balancing/#serviceinstance","title":"ServiceInstance \uc815\uc758","text":"<pre><code>instance = ServiceInstance(\n    id=\"service-1\",\n    host=\"192.168.1.100\",\n    port=8080,\n    weight=1,                    # \uac00\uc911\uce58 (\uae30\ubcf8 1)\n    metadata={\"zone\": \"us-west\"} # \uba54\ud0c0\ub370\uc774\ud130\n)\n</code></pre>"},{"location":"13-load-balancing/#_6","title":"\ud83d\udca1 \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"13-load-balancing/#_7","title":"\uae30\ubcf8 \ub85c\ub4dc \ubc38\ub7f0\uc11c \uc0ac\uc6a9","text":"<pre><code>from rfs.service_discovery.load_balancer import (\n    LoadBalancer,\n    LoadBalancerConfig,\n    LoadBalancingStrategy,\n    ServiceInstance,\n    HealthStatus\n)\nimport asyncio\nimport random\n\nasync def basic_load_balancer_example():\n    \"\"\"\uae30\ubcf8 \ub85c\ub4dc \ubc38\ub7f0\uc11c \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    # \ub85c\ub4dc \ubc38\ub7f0\uc11c \uc0dd\uc131\n    lb = LoadBalancer(\n        service_name=\"user_service\",\n        config=LoadBalancerConfig(\n            strategy=LoadBalancingStrategy.ROUND_ROBIN,\n            health_check_enabled=True,\n            health_check_interval=10.0\n        )\n    )\n\n    # \uc11c\ube44\uc2a4 \uc778\uc2a4\ud134\uc2a4 \ucd94\uac00\n    instances = [\n        ServiceInstance(id=\"user-1\", host=\"10.0.1.10\", port=8080, weight=1),\n        ServiceInstance(id=\"user-2\", host=\"10.0.1.11\", port=8080, weight=2),  # \ub192\uc740 \uac00\uc911\uce58\n        ServiceInstance(id=\"user-3\", host=\"10.0.1.12\", port=8080, weight=1),\n    ]\n\n    for instance in instances:\n        lb.add_instance(instance)\n\n    # \ud5ec\uc2a4\uccb4\ud06c \uc2dc\uc791\n    await lb.start_health_checks()\n\n    # \uc2e4\uc81c \uc11c\ube44\uc2a4 \ud638\ucd9c \ud568\uc218\n    async def call_user_service(instance: ServiceInstance, user_id: str) -&gt; dict:\n        \"\"\"\uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4 \ud638\ucd9c\"\"\"\n        # \uc2e4\uc81c HTTP \ud638\ucd9c \ub300\uc2e0 \uc2dc\ubbac\ub808\uc774\uc158\n        await asyncio.sleep(0.1)\n\n        # 10% \ud655\ub960\ub85c \uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\n        if random.random() &lt; 0.1:\n            raise Exception(f\"\uc11c\ube44\uc2a4 {instance.id} \ud638\ucd9c \uc2e4\ud328\")\n\n        return {\n            \"user_id\": user_id,\n            \"name\": f\"User {user_id}\",\n            \"served_by\": instance.id,\n            \"host\": f\"{instance.host}:{instance.port}\"\n        }\n\n    # \ub85c\ub4dc \ubc38\ub7f0\uc2f1\ub41c \uc694\uccad \uc2e4\ud589\n    print(\"\ub85c\ub4dc \ubc38\ub7f0\uc2f1 \ud14c\uc2a4\ud2b8 \uc2dc\uc791...\")\n\n    for i in range(10):\n        try:\n            result = await lb.call(\n                call_user_service,\n                user_id=f\"user{i+1}\"\n            )\n\n            print(f\"\uc694\uccad {i+1}: {result['served_by']}\uc5d0\uc11c \ucc98\ub9ac - {result['name']}\")\n\n        except Exception as e:\n            print(f\"\uc694\uccad {i+1}: \uc2e4\ud328 - {e}\")\n\n        await asyncio.sleep(0.5)\n\n    # \ud1b5\uacc4 \ucd9c\ub825\n    stats = lb.get_statistics()\n    print(f\"\\n=== \ub85c\ub4dc \ubc38\ub7f0\uc11c \ud1b5\uacc4 ===\")\n    print(f\"\ucd1d \uc694\uccad: {stats['total_requests']}\")\n    print(f\"\uc2e4\ud328 \uc694\uccad: {stats['failed_requests']}\")\n    print(f\"\uc2e4\ud328\uc728: {stats['failure_rate']:.2%}\")\n    print(f\"\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc778\uc2a4\ud134\uc2a4: {stats['available_instances']}/{stats['total_instances']}\")\n\n    # \uc778\uc2a4\ud134\uc2a4\ubcc4 \uc0c1\uc138 \ud1b5\uacc4\n    print(f\"\\n=== \uc778\uc2a4\ud134\uc2a4\ubcc4 \ud1b5\uacc4 ===\")\n    for instance_id, instance_stats in stats['instances'].items():\n        print(f\"{instance_id}: {instance_stats['status']} - \"\n              f\"\uc694\uccad {instance_stats['total_requests']}\uac1c, \"\n              f\"\ud3c9\uade0 \uc751\ub2f5\uc2dc\uac04 {instance_stats['average_response_time']:.3f}\ucd08\")\n\n    # \ud5ec\uc2a4\uccb4\ud06c \uc911\uc9c0\n    await lb.stop_health_checks()\n\n# \uc2e4\ud589\nasyncio.run(basic_load_balancer_example())\n</code></pre>"},{"location":"13-load-balancing/#_8","title":"\ub2e4\uc591\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc804\ub7b5","text":"<pre><code>async def test_load_balancing_strategies():\n    \"\"\"\ub2e4\uc591\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc804\ub7b5 \ud14c\uc2a4\ud2b8\"\"\"\n\n    # \uc11c\ube44\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\n    instances = [\n        ServiceInstance(id=\"server-1\", host=\"10.0.1.10\", port=8080, weight=1),\n        ServiceInstance(id=\"server-2\", host=\"10.0.1.11\", port=8080, weight=3),  # \ub192\uc740 \uac00\uc911\uce58\n        ServiceInstance(id=\"server-3\", host=\"10.0.1.12\", port=8080, weight=2),\n    ]\n\n    # \ud14c\uc2a4\ud2b8\ud560 \uc804\ub7b5\ub4e4\n    strategies = [\n        LoadBalancingStrategy.ROUND_ROBIN,\n        LoadBalancingStrategy.RANDOM,\n        LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN,\n        LoadBalancingStrategy.LEAST_CONNECTIONS,\n        LoadBalancingStrategy.LEAST_RESPONSE_TIME\n    ]\n\n    for strategy in strategies:\n        print(f\"\\n=== {strategy.value.upper()} \uc804\ub7b5 \ud14c\uc2a4\ud2b8 ===\")\n\n        # \ub85c\ub4dc \ubc38\ub7f0\uc11c \uc0dd\uc131\n        lb = LoadBalancer(\n            service_name=\"test_service\",\n            config=LoadBalancerConfig(\n                strategy=strategy,\n                health_check_enabled=False  # \ud14c\uc2a4\ud2b8\ub97c \uc704\ud574 \ube44\ud65c\uc131\ud654\n            )\n        )\n\n        # \uc778\uc2a4\ud134\uc2a4 \ucd94\uac00\n        for instance in instances:\n            instance.active_connections = 0  # \ucd08\uae30\ud654\n            instance.total_requests = 0\n            instance.total_response_time = 0.0\n            lb.add_instance(instance)\n\n        # \uc694\uccad \ubd84\uc0b0 \ud14c\uc2a4\ud2b8\n        distribution = {}\n\n        for i in range(20):\n            selected = lb.select_instance()\n            if selected:\n                # \uc5f0\uacb0 \uc218\uc640 \uc751\ub2f5 \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n                selected.active_connections += 1\n                selected.total_requests += 1\n                # \uc11c\ubc84\ubcc4\ub85c \ub2e4\ub978 \uc751\ub2f5 \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n                response_time = 0.1 + (int(selected.id.split('-')[1]) * 0.05)\n                selected.total_response_time += response_time\n                selected.last_response_time = response_time\n\n                # \ubd84\uc0b0 \ud1b5\uacc4\n                if selected.id not in distribution:\n                    distribution[selected.id] = 0\n                distribution[selected.id] += 1\n\n                # \uc5f0\uacb0 \uc885\ub8cc \uc2dc\ubbac\ub808\uc774\uc158\n                selected.active_connections = max(0, selected.active_connections - 1)\n\n        # \ubd84\uc0b0 \uacb0\uacfc \ucd9c\ub825\n        for server_id, count in distribution.items():\n            percentage = (count / 20) * 100\n            print(f\"{server_id}: {count}\ud68c ({percentage:.1f}%)\")\n\n# \uc2e4\ud589\nasyncio.run(test_load_balancing_strategies())\n</code></pre>"},{"location":"13-load-balancing/#consistent-hashing","title":"\uc77c\uad00\ub41c \ud574\uc2f1 (Consistent Hashing)","text":"<pre><code>from rfs.service_discovery.load_balancer import ConsistentHashAlgorithm\n\nasync def consistent_hashing_example():\n    \"\"\"\uc77c\uad00\ub41c \ud574\uc2f1\uc744 \uc0ac\uc6a9\ud55c \uc138\uc158 \uace0\uc815\"\"\"\n\n    # \uc77c\uad00\ub41c \ud574\uc2f1 \ub85c\ub4dc \ubc38\ub7f0\uc11c\n    lb = LoadBalancer(\n        service_name=\"session_service\",\n        config=LoadBalancerConfig(\n            strategy=LoadBalancingStrategy.CONSISTENT_HASH,\n            sticky_sessions=True,\n            session_cookie_name=\"SESSION_ID\"\n        )\n    )\n\n    # \uc11c\ubc84 \uc778\uc2a4\ud134\uc2a4 \ucd94\uac00\n    servers = [\n        ServiceInstance(id=\"cache-1\", host=\"10.0.1.20\", port=6379),\n        ServiceInstance(id=\"cache-2\", host=\"10.0.1.21\", port=6379),\n        ServiceInstance(id=\"cache-3\", host=\"10.0.1.22\", port=6379),\n    ]\n\n    for server in servers:\n        lb.add_instance(server)\n\n    # \uc0ac\uc6a9\uc790\ubcc4 \uc138\uc158 \ud14c\uc2a4\ud2b8\n    users = [\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"]\n    user_to_server = {}\n\n    print(\"=== \uc77c\uad00\ub41c \ud574\uc2f1 \ud14c\uc2a4\ud2b8 ===\")\n\n    # \ucd08\uae30 \ubc30\uce58 \ud655\uc778\n    for user in users:\n        context = {\"user_id\": user, \"session_id\": f\"session_{user}\"}\n        selected = lb.select_instance(context)\n\n        if selected:\n            user_to_server[user] = selected.id\n            print(f\"{user} -&gt; {selected.id}\")\n\n    # \uc11c\ubc84 \ud558\ub098 \uc81c\uac70 \ud6c4 \uc7ac\ubc30\uce58 \ud655\uc778\n    print(f\"\\n\uc11c\ubc84 {servers[1].id} \uc81c\uac70 \ud6c4:\")\n    lb.remove_instance(servers[1].id)\n\n    moved_users = 0\n    for user in users:\n        context = {\"user_id\": user, \"session_id\": f\"session_{user}\"}\n        selected = lb.select_instance(context)\n\n        if selected:\n            old_server = user_to_server[user]\n            new_server = selected.id\n\n            if old_server != new_server:\n                print(f\"{user}: {old_server} -&gt; {new_server} (\uc774\ub3d9)\")\n                moved_users += 1\n            else:\n                print(f\"{user}: {new_server} (\uc720\uc9c0)\")\n\n    print(f\"\\n\uc774\ub3d9\ub41c \uc0ac\uc6a9\uc790: {moved_users}/{len(users)} ({(moved_users/len(users)*100):.1f}%)\")\n\n    # \uc11c\ubc84 \ucd94\uac00 \ud6c4 \uc7ac\ubc30\uce58 \ud655\uc778\n    print(f\"\\n\uc0c8 \uc11c\ubc84 cache-4 \ucd94\uac00 \ud6c4:\")\n    new_server = ServiceInstance(id=\"cache-4\", host=\"10.0.1.23\", port=6379)\n    lb.add_instance(new_server)\n\n    moved_users = 0\n    for user in users:\n        context = {\"user_id\": user, \"session_id\": f\"session_{user}\"}\n        selected = lb.select_instance(context)\n\n        if selected:\n            # \ud604\uc7ac \uc11c\ubc84\uc640 \uc774\uc804 \uc11c\ubc84 \ube44\uad50 (\uc11c\ubc84 \uc81c\uac70 \ud6c4 \uc0c1\ud0dc \uae30\uc900)\n            prev_selected = lb.select_instance(context)  # \uc774\uc804 \uc120\ud0dd \uacb0\uacfc \uc2dc\ubbac\ub808\uc774\uc158\n\n            print(f\"{user} -&gt; {selected.id}\")\n\n# \uc2e4\ud589\nasyncio.run(consistent_hashing_example())\n</code></pre>"},{"location":"13-load-balancing/#_9","title":"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc544\ud0a4\ud14d\ucc98\uc5d0\uc11c\uc758 \ud65c\uc6a9","text":"<pre><code>import httpx\nfrom typing import Dict, List, Optional\n\nclass MicroserviceLoadBalancer:\n    \"\"\"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4\uc6a9 \ub85c\ub4dc \ubc38\ub7f0\uc11c\"\"\"\n\n    def __init__(self):\n        self.load_balancers: Dict[str, LoadBalancer] = {}\n        self.service_configs = {\n            \"user-service\": LoadBalancerConfig(\n                strategy=LoadBalancingStrategy.LEAST_RESPONSE_TIME,\n                health_check_enabled=True,\n                health_check_interval=15.0,\n                circuit_breaker_enabled=True\n            ),\n            \"order-service\": LoadBalancerConfig(\n                strategy=LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN,\n                health_check_enabled=True,\n                health_check_interval=20.0,\n                max_retries=3\n            ),\n            \"payment-service\": LoadBalancerConfig(\n                strategy=LoadBalancingStrategy.ROUND_ROBIN,\n                health_check_enabled=True,\n                health_check_interval=10.0,  # \uc911\uc694\ud55c \uc11c\ube44\uc2a4\ub77c \uc790\uc8fc \uccb4\ud06c\n                circuit_breaker_enabled=True,\n                max_consecutive_failures=2  # \uc5c4\uaca9\ud55c \uae30\uc900\n            )\n        }\n\n    def register_service(self, service_name: str, instances: List[ServiceInstance]):\n        \"\"\"\uc11c\ube44\uc2a4 \ub4f1\ub85d\"\"\"\n        config = self.service_configs.get(service_name, LoadBalancerConfig())\n\n        lb = LoadBalancer(service_name, config)\n\n        for instance in instances:\n            lb.add_instance(instance)\n\n        self.load_balancers[service_name] = lb\n\n    async def start_all_health_checks(self):\n        \"\"\"\ubaa8\ub4e0 \uc11c\ube44\uc2a4\uc758 \ud5ec\uc2a4\uccb4\ud06c \uc2dc\uc791\"\"\"\n        for lb in self.load_balancers.values():\n            await lb.start_health_checks()\n\n    async def stop_all_health_checks(self):\n        \"\"\"\ubaa8\ub4e0 \uc11c\ube44\uc2a4\uc758 \ud5ec\uc2a4\uccb4\ud06c \uc911\uc9c0\"\"\"\n        for lb in self.load_balancers.values():\n            await lb.stop_health_checks()\n\n    async def call_service(\n        self, \n        service_name: str, \n        endpoint: str, \n        method: str = \"GET\",\n        **kwargs\n    ) -&gt; Result[dict, str]:\n        \"\"\"\uc11c\ube44\uc2a4 \ud638\ucd9c\"\"\"\n\n        if service_name not in self.load_balancers:\n            return Failure(f\"\uc11c\ube44\uc2a4 '{service_name}'\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        lb = self.load_balancers[service_name]\n\n        try:\n            result = await lb.call(\n                self._http_request,\n                method=method,\n                endpoint=endpoint,\n                **kwargs\n            )\n\n            return Success(result)\n\n        except Exception as e:\n            return Failure(f\"{service_name} \ud638\ucd9c \uc2e4\ud328: {str(e)}\")\n\n    async def _http_request(\n        self, \n        instance: ServiceInstance,\n        method: str,\n        endpoint: str,\n        **kwargs\n    ) -&gt; dict:\n        \"\"\"\uc2e4\uc81c HTTP \uc694\uccad\"\"\"\n        url = f\"http://{instance.host}:{instance.port}{endpoint}\"\n\n        async with httpx.AsyncClient() as client:\n            response = await client.request(method, url, **kwargs)\n            response.raise_for_status()\n            return response.json()\n\n    def get_system_overview(self) -&gt; dict:\n        \"\"\"\uc804\uccb4 \uc2dc\uc2a4\ud15c \uac1c\uc694\"\"\"\n        overview = {\n            \"services\": {},\n            \"total_instances\": 0,\n            \"healthy_instances\": 0,\n            \"total_requests\": 0,\n            \"total_failures\": 0\n        }\n\n        for service_name, lb in self.load_balancers.items():\n            stats = lb.get_statistics()\n\n            overview[\"services\"][service_name] = {\n                \"strategy\": stats[\"strategy\"],\n                \"total_instances\": stats[\"total_instances\"],\n                \"available_instances\": stats[\"available_instances\"],\n                \"total_requests\": stats[\"total_requests\"],\n                \"failure_rate\": stats[\"failure_rate\"]\n            }\n\n            overview[\"total_instances\"] += stats[\"total_instances\"]\n            overview[\"healthy_instances\"] += stats[\"available_instances\"]\n            overview[\"total_requests\"] += stats[\"total_requests\"]\n            overview[\"total_failures\"] += stats[\"failed_requests\"]\n\n        overview[\"overall_health\"] = (\n            overview[\"healthy_instances\"] / max(overview[\"total_instances\"], 1)\n        )\n\n        return overview\n\n# \uc0ac\uc6a9 \uc608\uc81c\nasync def microservice_example():\n    \"\"\"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc608\uc81c\"\"\"\n\n    # \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ub85c\ub4dc \ubc38\ub7f0\uc11c \uc0dd\uc131\n    ms_lb = MicroserviceLoadBalancer()\n\n    # \uac01 \uc11c\ube44\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4 \ub4f1\ub85d\n    ms_lb.register_service(\"user-service\", [\n        ServiceInstance(id=\"user-1\", host=\"10.0.1.10\", port=8001),\n        ServiceInstance(id=\"user-2\", host=\"10.0.1.11\", port=8001),\n        ServiceInstance(id=\"user-3\", host=\"10.0.1.12\", port=8001, weight=2)  # \uace0\uc131\ub2a5 \uc11c\ubc84\n    ])\n\n    ms_lb.register_service(\"order-service\", [\n        ServiceInstance(id=\"order-1\", host=\"10.0.2.10\", port=8002, weight=1),\n        ServiceInstance(id=\"order-2\", host=\"10.0.2.11\", port=8002, weight=3),  # \ub192\uc740 \uac00\uc911\uce58\n    ])\n\n    ms_lb.register_service(\"payment-service\", [\n        ServiceInstance(id=\"payment-1\", host=\"10.0.3.10\", port=8003),\n        ServiceInstance(id=\"payment-2\", host=\"10.0.3.11\", port=8003),\n    ])\n\n    # \ud5ec\uc2a4\uccb4\ud06c \uc2dc\uc791\n    await ms_lb.start_all_health_checks()\n\n    try:\n        # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc2dc\ubbac\ub808\uc774\uc158\n        await simulate_e_commerce_workflow(ms_lb)\n\n        # \uc2dc\uc2a4\ud15c \uac1c\uc694 \ucd9c\ub825\n        overview = ms_lb.get_system_overview()\n        print(f\"\\n=== \uc2dc\uc2a4\ud15c \uac1c\uc694 ===\")\n        print(f\"\uc804\uccb4 \uac74\uac15\ub3c4: {overview['overall_health']:.2%}\")\n        print(f\"\ucd1d \uc778\uc2a4\ud134\uc2a4: {overview['total_instances']}\")\n        print(f\"\uac74\uac15\ud55c \uc778\uc2a4\ud134\uc2a4: {overview['healthy_instances']}\")\n        print(f\"\ucd1d \uc694\uccad: {overview['total_requests']}\")\n\n        for service_name, service_stats in overview[\"services\"].items():\n            print(f\"\\n{service_name}:\")\n            print(f\"  \uc804\ub7b5: {service_stats['strategy']}\")\n            print(f\"  \uac00\uc6a9 \uc778\uc2a4\ud134\uc2a4: {service_stats['available_instances']}/{service_stats['total_instances']}\")\n            print(f\"  \ucd1d \uc694\uccad: {service_stats['total_requests']}\")\n            print(f\"  \uc2e4\ud328\uc728: {service_stats['failure_rate']:.2%}\")\n\n    finally:\n        # \ud5ec\uc2a4\uccb4\ud06c \uc815\ub9ac\n        await ms_lb.stop_all_health_checks()\n\nasync def simulate_e_commerce_workflow(ms_lb: MicroserviceLoadBalancer):\n    \"\"\"\uc804\uc790\uc0c1\uac70\ub798 \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n\n    for order_id in range(1, 11):\n        print(f\"\\n=== \uc8fc\ubb38 {order_id} \ucc98\ub9ac ===\")\n\n        try:\n            # 1. \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c\n            user_result = await ms_lb.call_service(\n                \"user-service\", \n                f\"/users/{order_id}\",\n                timeout=5.0\n            )\n\n            if user_result.is_success():\n                print(f\"\uc0ac\uc6a9\uc790 \uc870\ud68c \uc131\uacf5: {user_result.unwrap()}\")\n            else:\n                print(f\"\uc0ac\uc6a9\uc790 \uc870\ud68c \uc2e4\ud328: {user_result.unwrap_err()}\")\n                continue\n\n            # 2. \uc8fc\ubb38 \uc0dd\uc131\n            order_result = await ms_lb.call_service(\n                \"order-service\",\n                \"/orders\",\n                method=\"POST\",\n                json={\"user_id\": order_id, \"items\": [{\"product\": \"item1\", \"qty\": 1}]},\n                timeout=10.0\n            )\n\n            if order_result.is_success():\n                print(f\"\uc8fc\ubb38 \uc0dd\uc131 \uc131\uacf5: {order_result.unwrap()}\")\n            else:\n                print(f\"\uc8fc\ubb38 \uc0dd\uc131 \uc2e4\ud328: {order_result.unwrap_err()}\")\n                continue\n\n            # 3. \uacb0\uc81c \ucc98\ub9ac\n            payment_result = await ms_lb.call_service(\n                \"payment-service\",\n                \"/payments\",\n                method=\"POST\",\n                json={\"order_id\": order_id, \"amount\": 100.0},\n                timeout=15.0\n            )\n\n            if payment_result.is_success():\n                print(f\"\uacb0\uc81c \ucc98\ub9ac \uc131\uacf5: {payment_result.unwrap()}\")\n            else:\n                print(f\"\uacb0\uc81c \ucc98\ub9ac \uc2e4\ud328: {payment_result.unwrap_err()}\")\n\n                # \uacb0\uc81c \uc2e4\ud328 \uc2dc \uc8fc\ubb38 \ucde8\uc18c (\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158)\n                await ms_lb.call_service(\n                    \"order-service\",\n                    f\"/orders/{order_id}/cancel\",\n                    method=\"POST\"\n                )\n                print(\"\uc8fc\ubb38 \ucde8\uc18c \uc644\ub8cc\")\n\n        except Exception as e:\n            print(f\"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc2e4\ud589 \uc911 \uc624\ub958: {e}\")\n\n        await asyncio.sleep(1)\n\n# \uc2e4\ud589\nasyncio.run(microservice_example())\n</code></pre>"},{"location":"13-load-balancing/#_10","title":"\ub3d9\uc801 \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \ud1b5\ud569","text":"<pre><code>import consul\nimport etcd3\n\nclass DynamicServiceRegistry:\n    \"\"\"\ub3d9\uc801 \uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\"\"\"\n\n    def __init__(self, ms_lb: MicroserviceLoadBalancer):\n        self.ms_lb = ms_lb\n        self.consul_client = consul.Consul()  # Consul \ud074\ub77c\uc774\uc5b8\ud2b8\n        self.running = False\n\n    async def start_service_discovery(self):\n        \"\"\"\uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc2dc\uc791\"\"\"\n        self.running = True\n\n        # \uc8fc\uae30\uc801\uc73c\ub85c \uc11c\ube44\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uac31\uc2e0\n        asyncio.create_task(self._update_services_periodically())\n\n    def stop_service_discovery(self):\n        \"\"\"\uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc911\uc9c0\"\"\"\n        self.running = False\n\n    async def _update_services_periodically(self):\n        \"\"\"\uc8fc\uae30\uc801 \uc11c\ube44\uc2a4 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        while self.running:\n            try:\n                await self._discover_and_update_services()\n                await asyncio.sleep(30)  # 30\ucd08\ub9c8\ub2e4 \uac31\uc2e0\n\n            except Exception as e:\n                print(f\"\uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc624\ub958: {e}\")\n                await asyncio.sleep(10)  # \uc624\ub958 \uc2dc 10\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4\n\n    async def _discover_and_update_services(self):\n        \"\"\"Consul\uc5d0\uc11c \uc11c\ube44\uc2a4 \ubc1c\uacac \ubc0f \uc5c5\ub370\uc774\ud2b8\"\"\"\n\n        # Consul\uc5d0\uc11c \uc11c\ube44\uc2a4 \ubaa9\ub85d \uc870\ud68c\n        services = self.consul_client.agent.services()\n\n        service_groups = {}\n\n        # \uc11c\ube44\uc2a4\ubcc4\ub85c \uc778\uc2a4\ud134\uc2a4 \uadf8\ub8f9\ud654\n        for service_id, service_info in services.items():\n            service_name = service_info['Service']\n\n            if service_name not in service_groups:\n                service_groups[service_name] = []\n\n            # \ud5ec\uc2a4\uccb4\ud06c \uacb0\uacfc \uc870\ud68c\n            health_info = self.consul_client.health.service(service_name)[1]\n            is_healthy = all(\n                check['Status'] == 'passing' \n                for instance in health_info \n                for check in instance.get('Checks', [])\n                if instance['Service']['ID'] == service_id\n            )\n\n            instance = ServiceInstance(\n                id=service_id,\n                host=service_info['Address'],\n                port=service_info['Port'],\n                weight=service_info.get('Meta', {}).get('weight', 1),\n                health_status=HealthStatus.HEALTHY if is_healthy else HealthStatus.UNHEALTHY,\n                metadata=service_info.get('Meta', {})\n            )\n\n            service_groups[service_name].append(instance)\n\n        # \ub85c\ub4dc \ubc38\ub7f0\uc11c \uc5c5\ub370\uc774\ud2b8\n        for service_name, instances in service_groups.items():\n            if service_name in self.ms_lb.load_balancers:\n                # \uae30\uc874 \uc11c\ube44\uc2a4 \uc5c5\ub370\uc774\ud2b8\n                self._update_service_instances(service_name, instances)\n            else:\n                # \uc0c8 \uc11c\ube44\uc2a4 \ub4f1\ub85d\n                self.ms_lb.register_service(service_name, instances)\n                print(f\"\uc0c8 \uc11c\ube44\uc2a4 \ub4f1\ub85d: {service_name}\")\n\n    def _update_service_instances(self, service_name: str, new_instances: List[ServiceInstance]):\n        \"\"\"\uc11c\ube44\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        lb = self.ms_lb.load_balancers[service_name]\n\n        # \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4 ID \uc9d1\ud569\n        current_instance_ids = set(lb.instances.keys())\n        new_instance_ids = {instance.id for instance in new_instances}\n\n        # \uc81c\uac70\ub41c \uc778\uc2a4\ud134\uc2a4\n        removed_ids = current_instance_ids - new_instance_ids\n        for instance_id in removed_ids:\n            lb.remove_instance(instance_id)\n            print(f\"\uc778\uc2a4\ud134\uc2a4 \uc81c\uac70: {service_name}/{instance_id}\")\n\n        # \ucd94\uac00\ub41c \uc778\uc2a4\ud134\uc2a4\n        added_ids = new_instance_ids - current_instance_ids\n        for instance in new_instances:\n            if instance.id in added_ids:\n                lb.add_instance(instance)\n                print(f\"\uc778\uc2a4\ud134\uc2a4 \ucd94\uac00: {service_name}/{instance.id}\")\n\n        # \uae30\uc874 \uc778\uc2a4\ud134\uc2a4 \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8\n        for instance in new_instances:\n            if instance.id in current_instance_ids:\n                existing_instance = lb.instances[instance.id]\n                existing_instance.health_status = instance.health_status\n                existing_instance.weight = instance.weight\n                existing_instance.metadata = instance.metadata\n\n# \uc0ac\uc6a9\nasync def dynamic_discovery_example():\n    \"\"\"\ub3d9\uc801 \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc608\uc81c\"\"\"\n\n    # \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ub85c\ub4dc \ubc38\ub7f0\uc11c\n    ms_lb = MicroserviceLoadBalancer()\n\n    # \ub3d9\uc801 \uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\n    registry = DynamicServiceRegistry(ms_lb)\n\n    try:\n        # \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc2dc\uc791\n        await registry.start_service_discovery()\n        await ms_lb.start_all_health_checks()\n\n        print(\"\ub3d9\uc801 \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc2e4\ud589 \uc911...\")\n\n        # 10\ubd84\uac04 \uc2e4\ud589\n        await asyncio.sleep(600)\n\n    finally:\n        # \uc815\ub9ac\n        registry.stop_service_discovery()\n        await ms_lb.stop_all_health_checks()\n\n# \uc2e4\ud589 (\uc2e4\uc81c \ud658\uacbd\uc5d0\uc11c\ub9cc)\n# asyncio.run(dynamic_discovery_example())\n</code></pre>"},{"location":"13-load-balancing/#_11","title":"\ud83c\udfa8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"13-load-balancing/#1","title":"1. \uc804\ub7b5 \uc120\ud0dd \uac00\uc774\ub4dc","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc0c1\ud669\ubcc4 \uc801\uc808\ud55c \uc804\ub7b5 \uc120\ud0dd\ndef choose_load_balancing_strategy(service_type: str, requirements: dict) -&gt; LoadBalancingStrategy:\n    \"\"\"\uc11c\ube44\uc2a4 \uc720\ud615\uacfc \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub530\ub978 \uc804\ub7b5 \uc120\ud0dd\"\"\"\n\n    if requirements.get(\"session_affinity\", False):\n        # \uc138\uc158 \uace0\uc815\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\n        return LoadBalancingStrategy.CONSISTENT_HASH\n\n    elif service_type == \"database\":\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4: \uc5f0\uacb0 \uc218 \uae30\ubc18\n        return LoadBalancingStrategy.LEAST_CONNECTIONS\n\n    elif service_type == \"api_gateway\":\n        # API \uac8c\uc774\ud2b8\uc6e8\uc774: \uc751\ub2f5 \uc2dc\uac04 \uae30\ubc18\n        return LoadBalancingStrategy.LEAST_RESPONSE_TIME\n\n    elif service_type == \"compute_intensive\":\n        # \uacc4\uc0b0 \uc9d1\uc57d\uc801: \uac00\uc911\uce58 \uae30\ubc18\n        return LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN\n\n    elif requirements.get(\"high_throughput\", False):\n        # \ub192\uc740 \ucc98\ub9ac\ub7c9: \ub79c\ub364 (\uc624\ubc84\ud5e4\ub4dc \ucd5c\uc18c)\n        return LoadBalancingStrategy.RANDOM\n\n    else:\n        # \uae30\ubcf8: \ub77c\uc6b4\ub4dc \ub85c\ube48\n        return LoadBalancingStrategy.ROUND_ROBIN\n</code></pre>"},{"location":"13-load-balancing/#2","title":"2. \ud5ec\uc2a4\uccb4\ud06c \uc124\uc815","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc11c\ube44\uc2a4\ubcc4 \ub9de\ucda4 \ud5ec\uc2a4\uccb4\ud06c\ndef configure_health_check(service_name: str) -&gt; LoadBalancerConfig:\n    \"\"\"\uc11c\ube44\uc2a4\ubcc4 \ud5ec\uc2a4\uccb4\ud06c \uc124\uc815\"\"\"\n\n    base_config = LoadBalancerConfig(health_check_enabled=True)\n\n    if service_name == \"database\":\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4: \uc790\uc8fc, \ube60\ub974\uac8c\n        base_config.health_check_interval = 15.0\n        base_config.health_check_timeout = 2.0\n        base_config.max_consecutive_failures = 2\n\n    elif service_name == \"external_api\":\n        # \uc678\ubd80 API: \ub35c \uc790\uc8fc, \uad00\ub300\ud558\uac8c\n        base_config.health_check_interval = 60.0\n        base_config.health_check_timeout = 10.0\n        base_config.max_consecutive_failures = 5\n\n    elif \"critical\" in service_name:\n        # \uc911\uc694\ud55c \uc11c\ube44\uc2a4: \uc5c4\uaca9\ud558\uac8c\n        base_config.health_check_interval = 10.0\n        base_config.health_check_timeout = 3.0\n        base_config.max_consecutive_failures = 1\n\n    return base_config\n</code></pre>"},{"location":"13-load-balancing/#3","title":"3. \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \ud3ec\uad04\uc801\uc778 \ub85c\ub4dc \ubc38\ub7f0\uc11c \ubaa8\ub2c8\ud130\ub9c1\nclass LoadBalancerMonitor:\n    def __init__(self, ms_lb: MicroserviceLoadBalancer):\n        self.ms_lb = ms_lb\n        self.alert_thresholds = {\n            \"availability\": 0.95,  # 95% \uac00\uc6a9\uc131\n            \"failure_rate\": 0.05,  # 5% \uc2e4\ud328\uc728\n            \"response_time\": 1.0   # 1\ucd08 \uc751\ub2f5\uc2dc\uac04\n        }\n\n    async def monitor_and_alert(self):\n        \"\"\"\ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc\"\"\"\n        overview = self.ms_lb.get_system_overview()\n        alerts = []\n\n        # \uc804\uccb4 \uc2dc\uc2a4\ud15c \uac00\uc6a9\uc131\n        if overview[\"overall_health\"] &lt; self.alert_thresholds[\"availability\"]:\n            alerts.append({\n                \"severity\": \"critical\",\n                \"message\": f\"\uc2dc\uc2a4\ud15c \uac00\uc6a9\uc131 {overview['overall_health']:.2%} (\uc784\uacc4\uac12: {self.alert_thresholds['availability']:.2%})\",\n                \"metric\": \"availability\"\n            })\n\n        # \uc11c\ube44\uc2a4\ubcc4 \uc138\ubd80 \ubaa8\ub2c8\ud130\ub9c1\n        for service_name, service_stats in overview[\"services\"].items():\n            if service_stats[\"failure_rate\"] &gt; self.alert_thresholds[\"failure_rate\"]:\n                alerts.append({\n                    \"severity\": \"warning\",\n                    \"message\": f\"{service_name} \uc2e4\ud328\uc728 {service_stats['failure_rate']:.2%}\",\n                    \"metric\": \"failure_rate\",\n                    \"service\": service_name\n                })\n\n        return alerts\n</code></pre>"},{"location":"13-load-balancing/#4","title":"4. \uac00\uc911\uce58 \ub3d9\uc801 \uc870\uc815","text":"<pre><code># \u2705 \uc88b\uc740 \uc608 - \uc131\ub2a5 \uae30\ubc18 \uac00\uc911\uce58 \uc790\ub3d9 \uc870\uc815\nclass AdaptiveWeightManager:\n    def __init__(self, lb: LoadBalancer):\n        self.lb = lb\n        self.adjustment_history = {}\n\n    async def adjust_weights_based_on_performance(self):\n        \"\"\"\uc131\ub2a5 \uae30\ubc18 \uac00\uc911\uce58 \uc790\ub3d9 \uc870\uc815\"\"\"\n\n        # \uc778\uc2a4\ud134\uc2a4\ubcc4 \uc131\ub2a5 \uba54\ud2b8\ub9ad \uc218\uc9d1\n        performance_scores = {}\n\n        for instance_id, instance in self.lb.instances.items():\n            if instance.total_requests &gt; 10:  # \ucda9\ubd84\ud55c \ub370\uc774\ud130\uac00 \uc788\ub294 \uacbd\uc6b0\ub9cc\n                # \uc131\ub2a5 \uc810\uc218 \uacc4\uc0b0 (\uc751\ub2f5\uc2dc\uac04 \uae30\ubc18)\n                avg_response_time = instance.average_response_time\n                error_rate = 1 - (instance.total_requests - instance.consecutive_failures) / instance.total_requests\n\n                # \uc810\uc218 \uacc4\uc0b0 (\ub0ae\uc740 \uc751\ub2f5\uc2dc\uac04, \ub0ae\uc740 \uc5d0\ub7ec\uc728\uc774 \ub192\uc740 \uc810\uc218)\n                performance_score = 1.0 / (1.0 + avg_response_time + error_rate)\n                performance_scores[instance_id] = performance_score\n\n        if not performance_scores:\n            return\n\n        # \ud3c9\uade0 \uc131\ub2a5 \ub300\ube44 \uc0c1\ub300\uc801 \uac00\uc911\uce58 \uacc4\uc0b0\n        avg_score = sum(performance_scores.values()) / len(performance_scores)\n\n        for instance_id, score in performance_scores.items():\n            relative_performance = score / avg_score\n\n            # \ud604\uc7ac \uac00\uc911\uce58\uc5d0\uc11c \uc810\uc9c4\uc801 \uc870\uc815\n            instance = self.lb.instances[instance_id]\n            current_weight = instance.weight\n\n            # 10% \uc529 \uc810\uc9c4\uc801 \uc870\uc815\n            if relative_performance &gt; 1.2:  # 20% \uc774\uc0c1 \uc6b0\uc218\n                new_weight = min(10, int(current_weight * 1.1))\n            elif relative_performance &lt; 0.8:  # 20% \uc774\uc0c1 \uc800\uc870\n                new_weight = max(1, int(current_weight * 0.9))\n            else:\n                new_weight = current_weight\n\n            if new_weight != current_weight:\n                instance.weight = new_weight\n                print(f\"\uac00\uc911\uce58 \uc870\uc815: {instance_id} {current_weight} -&gt; {new_weight} (\uc131\ub2a5: {relative_performance:.2f})\")\n</code></pre>"},{"location":"13-load-balancing/#_12","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":""},{"location":"13-load-balancing/#1-sticky-sessions","title":"1. \uc138\uc158 \uace0\uc815 (Sticky Sessions)","text":"<ul> <li>\uc11c\ubc84 \uc7a5\uc560 \uc2dc \uc138\uc158 \uc190\uc2e4 \uac00\ub2a5\uc131</li> <li>\ub85c\ub4dc \ubd84\uc0b0\uc758 \ubd88\uade0\ud615 \uc57c\uae30 \uac00\ub2a5</li> <li>\uc138\uc158 \ub370\uc774\ud130\ub294 \ubcc4\ub3c4 \uc800\uc7a5\uc18c \uc0ac\uc6a9 \uad8c\uc7a5</li> </ul>"},{"location":"13-load-balancing/#2_1","title":"2. \ud5ec\uc2a4\uccb4\ud06c \uc624\ubc84\ud5e4\ub4dc","text":"<ul> <li>\ub108\ubb34 \ube48\ubc88\ud55c \ud5ec\uc2a4\uccb4\ud06c\ub294 \uc11c\ubc84 \ubd80\ud558 \uc99d\uac00</li> <li>\ub124\ud2b8\uc6cc\ud06c \ub300\uc5ed\ud3ed \uc0ac\uc6a9\ub7c9 \uace0\ub824</li> <li>\ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328\uac00 \uc2e4\uc81c \uc7a5\uc560\uc778\uc9c0 \uad6c\ubd84 \ud544\uc694</li> </ul>"},{"location":"13-load-balancing/#3_1","title":"3. \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uc640\uc758 \uc0c1\ud638\uc791\uc6a9","text":"<ul> <li>\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4\uac00 \uc5f4\ub9ac\uba74 \ud574\ub2f9 \uc778\uc2a4\ud134\uc2a4 \uc790\ub3d9 \uc81c\uc678</li> <li>\ubcf5\uad6c \uc2dc\uc810\uc5d0\uc11c \ud2b8\ub798\ud53d \uae09\uc99d \uac00\ub2a5\uc131</li> <li>\uc810\uc9c4\uc801 \ubcf5\uad6c \uc804\ub7b5 \uace0\ub824</li> </ul>"},{"location":"13-load-balancing/#4_1","title":"4. \uc77c\uad00\ub41c \ud574\uc2f1\uc758 \ud55c\uacc4","text":"<ul> <li>\uc11c\ubc84 \ucd94\uac00/\uc81c\uac70 \uc2dc \uc77c\ubd80 \uc138\uc158 \uc7ac\ubd84\ubc30</li> <li>\uac00\uc0c1 \ub178\ub4dc \uc218\uc5d0 \ub530\ub978 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uc99d\uac00</li> <li>\uc11c\ubc84 \uc131\ub2a5 \ucc28\uc774 \uace0\ub824 \uc5b4\ub824\uc6c0</li> </ul>"},{"location":"13-load-balancing/#_13","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 - \uc7a5\uc560 \uaca9\ub9ac\uc640 \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \ud1b5\ud569</li> <li>\ubaa8\ub2c8\ud130\ub9c1 - \ub85c\ub4dc \ubc38\ub7f0\uc11c \uba54\ud2b8\ub9ad \uc218\uc9d1</li> <li>\ubc30\ud3ec - \ubb34\uc911\ub2e8 \ubc30\ud3ec\uc640 \ub85c\ub4dc \ubc38\ub7f0\uc2f1</li> <li>\ubcf4\uc548 - \ub85c\ub4dc \ubc38\ub7f0\uc11c \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d</li> </ul>"},{"location":"14-cli-interface/","title":"CLI \uc778\ud130\ud398\uc774\uc2a4 (Command Line Interface)","text":""},{"location":"14-cli-interface/#_1","title":"\uac1c\uc694","text":"<p>RFS Framework CLI\ub294 \uac1c\ubc1c\uc790 \uacbd\ud5d8\uc744 \uadf9\ub300\ud654\ud558\uae30 \uc704\ud574 \uc124\uacc4\ub41c Enterprise-Grade \uba85\ub839\ud589 \uc778\ud130\ud398\uc774\uc2a4\uc785\ub2c8\ub2e4. Rich UI\ub97c \ud1b5\ud55c \uc544\ub984\ub2e4\uc6b4 \ucd9c\ub825, \ud3ec\uad04\uc801\uc778 \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1, \uadf8\ub9ac\uace0 \uc9c1\uad00\uc801\uc778 \uba85\ub839\uc5b4 \uccb4\uacc4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"14-cli-interface/#_2","title":"\ud575\uc2ec \ud2b9\uc9d5","text":""},{"location":"14-cli-interface/#rich-console-ui","title":"\ud83c\udfa8 Rich Console UI","text":"<ul> <li>\uceec\ub7ec\ud480\ud55c \ucd9c\ub825: \uc0c1\ud0dc\ubcc4 \uc0c9\uc0c1 \ucf54\ub529 (\uc131\uacf5: \ucd08\ub85d, \uacbd\uace0: \ub178\ub791, \uc624\ub958: \ube68\uac15)</li> <li>\ud14c\uc774\ube14 \ud615\ud0dc: \uad6c\uc870\ud654\ub41c \uc815\ubcf4 \ud45c\uc2dc</li> <li>\uc9c4\ud589\ub960 \ud45c\uc2dc: \uc791\uc5c5 \uc9c4\ud589 \uc0c1\ud669 \uc2dc\uac01\ud654</li> <li>\uc544\uc774\ucf58 \uc9c0\uc6d0: \uc774\ubaa8\uc9c0\ub97c \ud65c\uc6a9\ud55c \uc9c1\uad00\uc801 \uc815\ubcf4 \uc804\ub2ec</li> </ul>"},{"location":"14-cli-interface/#_3","title":"\ud83d\udd0d \ud3ec\uad04\uc801\uc778 \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1","text":"<ul> <li>16\uac1c \ud575\uc2ec \uae30\ub2a5: \ubaa8\ub4e0 \ud504\ub808\uc784\uc6cc\ud06c \uae30\ub2a5\uc758 \uc0c1\ud0dc \uc2e4\uc2dc\uac04 \ud655\uc778</li> <li>\uc758\uc874\uc131 \uac80\uc99d: \ud544\uc218 \ubc0f \uc120\ud0dd\uc801 \uc758\uc874\uc131 \uc0c1\ud0dc \ud655\uc778</li> <li>\ud658\uacbd \uac10\uc9c0: \uac1c\ubc1c/\ud14c\uc2a4\ud2b8/\ud504\ub85c\ub355\uc158 \ud658\uacbd \uc790\ub3d9 \uac10\uc9c0</li> <li>\ud504\ub85c\uc81d\ud2b8 \ud0d0\uc9c0: RFS \ud504\ub85c\uc81d\ud2b8 \ub8e8\ud2b8 \uc790\ub3d9 \ud0d0\uc9c0</li> </ul>"},{"location":"14-cli-interface/#_4","title":"\u26a1 \uace0\uc131\ub2a5 \ubc0f \uc548\uc815\uc131","text":"<ul> <li>\ub3c5\ub9bd \uc2e4\ud589: \ud504\ub808\uc784\uc6cc\ud06c \uc784\ud3ec\ud2b8 \uc624\ub958\uc640 \ubb34\uad00\ud558\uac8c \uc2e4\ud589</li> <li>\ube60\ub978 \uc751\ub2f5: 100ms \uc774\ub0b4 \uba85\ub839\uc5b4 \uc751\ub2f5</li> <li>\uba54\ubaa8\ub9ac \ud6a8\uc728: \ucd5c\uc18c \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9</li> <li>\uc624\ub958 \ubcf5\uad6c: Graceful error handling</li> </ul>"},{"location":"14-cli-interface/#_5","title":"\uc124\uce58 \ubc0f \uc694\uad6c\uc0ac\ud56d","text":""},{"location":"14-cli-interface/#_6","title":"\uc2dc\uc2a4\ud15c \uc694\uad6c\uc0ac\ud56d","text":""},{"location":"14-cli-interface/#_7","title":"\ud544\uc218 \uc694\uad6c\uc0ac\ud56d","text":"<pre><code>Python: 3.10 \uc774\uc0c1\n\uc6b4\uc601\uccb4\uc81c: Linux, macOS, Windows\n\uba54\ubaa8\ub9ac: \ucd5c\uc18c 512MB RAM\n\ub514\uc2a4\ud06c: \ucd5c\uc18c 100MB \uc5ec\uc720\uacf5\uac04\n</code></pre>"},{"location":"14-cli-interface/#_8","title":"\uad8c\uc7a5 \uc0ac\uc591","text":"<pre><code>Python: 3.11 \uc774\uc0c1\n\uba54\ubaa8\ub9ac: 1GB \uc774\uc0c1 RAM\n\ud130\ubbf8\ub110: True Color \uc9c0\uc6d0 \ud130\ubbf8\ub110\n\ud3f0\ud2b8: Nerd Font \ub610\ub294 Unicode \uc9c0\uc6d0 \ud3f0\ud2b8\n</code></pre>"},{"location":"14-cli-interface/#_9","title":"\uc758\uc874\uc131","text":""},{"location":"14-cli-interface/#_10","title":"\ud544\uc218 \uc758\uc874\uc131","text":"<pre><code>pydantic = \"&gt;=2.5.0\"  # \ud0c0\uc785 \uc548\uc804\uc131 \ubc0f \uc124\uc815 \uad00\ub9ac\ntyping-extensions = \"&gt;=4.8.0\"  # Python 3.10 \ud638\ud658\uc131\n</code></pre>"},{"location":"14-cli-interface/#_11","title":"\uad8c\uc7a5 \uc758\uc874\uc131","text":"<pre><code>rich = \"&gt;=13.7.0\"  # Rich Console UI (\uc5c6\uc73c\uba74 \uae30\ubcf8 \ud14d\uc2a4\ud2b8)\n</code></pre>"},{"location":"14-cli-interface/#_12","title":"\uc120\ud0dd\uc801 \uc758\uc874\uc131","text":"<pre><code># \uc6f9 \uac1c\ubc1c\nfastapi = \"&gt;=0.104.0\"\nuvicorn = \"&gt;=0.24.0\"\n\n# \ud074\ub77c\uc6b0\ub4dc\ngoogle-cloud-run = \"&gt;=0.10.0\"\ngoogle-cloud-tasks = \"&gt;=2.15.0\"\ngoogle-cloud-monitoring = \"&gt;=2.16.0\"\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4\nsqlalchemy = \"&gt;=2.0.23\"\nasyncpg = \"&gt;=0.29.0\"\nredis = \"&gt;=5.0.1\"\n</code></pre>"},{"location":"14-cli-interface/#_13","title":"\uc124\uce58 \ubc29\ubc95","text":""},{"location":"14-cli-interface/#1-pypi","title":"1. PyPI \ud328\ud0a4\uc9c0 \uc124\uce58 (\uad8c\uc7a5)","text":"<pre><code># \uae30\ubcf8 \uc124\uce58\npip install rfs-framework\n\n# Rich UI \ud3ec\ud568 \uc124\uce58\npip install rfs-framework[dev]\n\n# \ubaa8\ub4e0 \uae30\ub2a5 \ud3ec\ud568 \uc124\uce58\npip install rfs-framework[all]\n\n# \uc124\uce58 \ud655\uc778\nrfs version\n</code></pre>"},{"location":"14-cli-interface/#2","title":"2. \uc18c\uc2a4 \ucf54\ub4dc\uc5d0\uc11c \uc124\uce58","text":"<pre><code># \uc800\uc7a5\uc18c \ud074\ub860\ngit clone https://github.com/interactord/rfs-framework.git\ncd rfs-framework\n\n# \uac1c\ubc1c \ubaa8\ub4dc \uc124\uce58\npip install -e \".[dev]\"\n\n# CLI \uc2e4\ud589 \ud655\uc778\npython3 rfs_cli.py version\n</code></pre>"},{"location":"14-cli-interface/#3-docker","title":"3. Docker\ub97c \ud1b5\ud55c \uc2e4\ud589","text":"<pre><code>FROM python:3.11-slim\n\n# RFS Framework \uc124\uce58\nRUN pip install rfs-framework[all]\n\n# CLI \uc2e4\ud589\nCMD [\"rfs\", \"status\"]\n</code></pre>"},{"location":"14-cli-interface/#_14","title":"\uba85\ub839\uc5b4 \uc0c1\uc138 \uac00\uc774\ub4dc","text":""},{"location":"14-cli-interface/#1-rfs-version-","title":"1. <code>rfs version</code> - \ubc84\uc804 \uc815\ubcf4 \ud45c\uc2dc","text":"<p>\ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc0c1\uc138\ud55c \ubc84\uc804 \uc815\ubcf4\uc640 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.</p>"},{"location":"14-cli-interface/#_15","title":"\uc0ac\uc6a9\ubc95","text":"<pre><code>rfs version\nrfs --version\nrfs -v\n</code></pre>"},{"location":"14-cli-interface/#_16","title":"\ucd9c\ub825 \uc815\ubcf4","text":"<pre><code>\ubc84\uc804: 4.3.0\n\ub9b4\ub9ac\uc2a4 \ub0a0\uc9dc: 2025\ub144 8\uc6d4\n\uac1c\ubc1c \ub2e8\uacc4: Production Ready\nPython \uc694\uad6c\uc0ac\ud56d: 3.10+\n\ud074\ub77c\uc6b0\ub4dc \ud50c\ub7ab\ud3fc: Google Cloud Run\n\uc544\ud0a4\ud14d\ucc98: Hexagonal Architecture\n\ubcf4\uc548: RBAC/ABAC with JWT\n\ubaa8\ub2c8\ud130\ub9c1: Performance &amp; Security Monitoring\n\ucd5c\uc801\ud654: Circuit Breaker &amp; Load Balancing\n\ubb38\uc11c\ud654: 13\uac1c \ud55c\uad6d\uc5b4 \ubaa8\ub4c8 \uc644\uc131\n\ubc30\ud3ec \uc804\ub7b5: Blue-Green, Canary, Rolling Strategies\n</code></pre>"},{"location":"14-cli-interface/#rich-ui","title":"Rich UI \ucd9c\ub825 \uc608\uc2dc","text":"<pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RFS Framework \ubc84\uc804 \uc815\ubcf4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \ud83c\udff7\ufe0f  \ubc84\uc804: 4.3.0                                                               \u2502\n\u2502 \ud83d\udcc5 \ub9b4\ub9ac\uc2a4: 2025\ub144 8\uc6d4                                                        \u2502\n\u2502 \ud83c\udfaf \ub2e8\uacc4: Production Ready                                                    \u2502\n\u2502 \ud83d\udc0d Python: 3.10+                                                             \u2502\n\u2502 \u2601\ufe0f  \ud50c\ub7ab\ud3fc: Google Cloud Run                                                  \u2502\n\u2502 \ud83c\udfd7\ufe0f  \uc544\ud0a4\ud14d\ucc98: Hexagonal Architecture                                          \u2502\n\u2502 \ud83d\udd12 \ubcf4\uc548: RBAC/ABAC with JWT                                                  \u2502\n\u2502 \ud83d\udcca \ubaa8\ub2c8\ud130\ub9c1: Performance &amp; Security Monitoring                               \u2502\n\u2502 \u26a1 \ucd5c\uc801\ud654: Circuit Breaker &amp; Load Balancing                                  \u2502\n\u2502 \ud83d\udcda \ubb38\uc11c: 13\uac1c \ud55c\uad6d\uc5b4 \ubaa8\ub4c8 \uc644\uc131                                               \u2502\n\u2502 \ud83d\ude80 \ubc30\ud3ec: Blue-Green, Canary, Rolling Strategies                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"14-cli-interface/#2-rfs-status-","title":"2. <code>rfs status</code> - \uc2dc\uc2a4\ud15c \uc0c1\ud0dc \ubaa8\ub2c8\ud130\ub9c1","text":"<p>\ud504\ub808\uc784\uc6cc\ud06c\uc758 \ubaa8\ub4e0 \uae30\ub2a5 \uc0c1\ud0dc\uc640 \uc2dc\uc2a4\ud15c \ud658\uacbd\uc744 \ud3ec\uad04\uc801\uc73c\ub85c \uc810\uac80\ud569\ub2c8\ub2e4.</p>"},{"location":"14-cli-interface/#_17","title":"\uc0ac\uc6a9\ubc95","text":"<pre><code>rfs status\nrfs stat\n</code></pre>"},{"location":"14-cli-interface/#16","title":"\ubaa8\ub2c8\ud130\ub9c1\ub418\ub294 16\uac1c \ud575\uc2ec \uae30\ub2a5","text":"\uce74\ud14c\uace0\ub9ac \uae30\ub2a5 \uc124\uba85 \ubc84\uc804 Core Result Pattern &amp; Functional Programming \ud568\uc218\ud615 \uc5d0\ub7ec \ud578\ub4e4\ub9c1 v4.3.0 Core Reactive Streams (Mono/Flux) \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac v4.3.0 Architecture Hexagonal Architecture \ud3ec\ud2b8-\uc5b4\ub311\ud130 \ud328\ud134 v4.3.0 Architecture Annotation-based Dependency Injection \uc5b4\ub178\ud14c\uc774\uc158 \uae30\ubc18 DI v4.3.0 Security RBAC/ABAC Access Control \uc5ed\ud560/\uc18d\uc131 \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4 v4.3.0 Security JWT Authentication JWT \uc778\uc99d \uc2dc\uc2a4\ud15c v4.3.0 Resilience Circuit Breaker Pattern \uc7a5\uc560 \ud5c8\uc6a9 \ud328\ud134 v4.3.0 Resilience Client-side Load Balancing \ud074\ub77c\uc774\uc5b8\ud2b8 \ub85c\ub4dc \ubc38\ub7f0\uc2f1 v4.3.0 Monitoring Performance Monitoring &amp; Metrics \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 v4.3.0 Monitoring Security Event Logging \ubcf4\uc548 \uc774\ubca4\ud2b8 \ub85c\uae45 v4.3.0 Deployment Blue-Green Strategy \ube14\ub8e8-\uadf8\ub9b0 \ubc30\ud3ec v4.3.0 Deployment Canary Strategy \uce74\ub098\ub9ac \ubc30\ud3ec v4.3.0 Deployment Rolling Strategy \ub864\ub9c1 \ubc30\ud3ec v4.3.0 Deployment Rollback Management \ub864\ubc31 \uad00\ub9ac v4.3.0 Cloud Google Cloud Run Optimization \ud074\ub77c\uc6b0\ub4dc \ub7f0 \ucd5c\uc801\ud654 v4.3.0 Docs Korean Documentation (13 modules) \ud55c\uad6d\uc5b4 \ubb38\uc11c\ud654 v4.3.0"},{"location":"14-cli-interface/#_18","title":"\uc758\uc874\uc131 \uc0c1\ud0dc \ud655\uc778","text":"<pre><code>Dependencies Status:\n  \u2705 pydantic (&gt;=2.5.0)\n  \u2705 rich (&gt;=13.7.0)\n  \u274c fastapi (&gt;=0.104.0) - optional\n  \u2705 google-cloud-run (&gt;=0.10.0) - optional\n</code></pre>"},{"location":"14-cli-interface/#_19","title":"\uc2dc\uc2a4\ud15c \uc815\ubcf4","text":"<pre><code>\ud504\ub808\uc784\uc6cc\ud06c \uc0c1\ud0dc: Production Ready\nPython \ubc84\uc804: 3.12.8\n\ud504\ub85c\uc81d\ud2b8 \ub8e8\ud2b8: /path/to/your/project\n\ud658\uacbd: Development/Production\n</code></pre>"},{"location":"14-cli-interface/#3-rfs-help-","title":"3. <code>rfs help</code> - \ub3c4\uc6c0\ub9d0 \ubc0f \uc0ac\uc6a9\ubc95","text":"<p>\ubaa8\ub4e0 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uba85\ub839\uc5b4\uc640 \uc635\uc158\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.</p>"},{"location":"14-cli-interface/#_20","title":"\uc0ac\uc6a9\ubc95","text":"<pre><code>rfs help\nrfs --help\nrfs -h\n</code></pre>"},{"location":"14-cli-interface/#_21","title":"\ud45c\uc2dc\ub418\ub294 \uc815\ubcf4","text":"<ul> <li>\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uba85\ub839\uc5b4</li> <li>\uac01 \uba85\ub839\uc5b4\uc758 \uc124\uba85 \ubc0f \uc608\uc2dc</li> <li>\uc804\uc5ed \uc635\uc158</li> <li>\ud504\ub808\uc784\uc6cc\ud06c \uc815\ubcf4 \ubc0f \ub9c1\ud06c</li> </ul>"},{"location":"14-cli-interface/#4-rfs-config-","title":"4. <code>rfs config</code> - \uc124\uc815 \uc815\ubcf4 \ud45c\uc2dc","text":"<p>\ud604\uc7ac \ud504\ub808\uc784\uc6cc\ud06c \uc124\uc815\uacfc \ud504\ub85c\uc81d\ud2b8 \uc815\ubcf4\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.</p>"},{"location":"14-cli-interface/#_22","title":"\uc0ac\uc6a9\ubc95","text":"<pre><code>rfs config\nrfs cfg\n</code></pre>"},{"location":"14-cli-interface/#_23","title":"\ud45c\uc2dc\ub418\ub294 \uc124\uc815 \uc815\ubcf4","text":"<pre><code>Framework Configuration:\n  \ubc84\uc804: 4.3.0\n  \uac1c\ubc1c \uc0c1\ud0dc: Production Ready\n  \ucd5c\uc18c Python: 3.10+\n  \ud575\uc2ec \uae30\ub2a5: 16\uac1c \ubaa8\ub4c8\n  \ubb38\uc11c\ud654: Korean (13 modules)\n  \uc544\ud0a4\ud14d\ucc98: Hexagonal\n  \ubcf4\uc548: RBAC/ABAC\n  \ud074\ub77c\uc6b0\ub4dc \ud50c\ub7ab\ud3fc: Google Cloud Run\n  \ud328\ud0a4\uc9c0 \uc774\ub984: rfs-framework\n</code></pre>"},{"location":"14-cli-interface/#_24","title":"\uace0\uae09 \uc0ac\uc6a9\ubc95","text":""},{"location":"14-cli-interface/#1","title":"1. \ud504\ub85c\uc81d\ud2b8 \uac10\uc9c0","text":"<p>CLI\ub294 \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \uc0c1\uc704\ub85c \ud0d0\uc0c9\ud558\uc5ec RFS \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9 \uac10\uc9c0\ud569\ub2c8\ub2e4.</p>"},{"location":"14-cli-interface/#_25","title":"\ud504\ub85c\uc81d\ud2b8 \ub9c8\ucee4 \ud30c\uc77c","text":"<pre><code>\uc6b0\uc120\uc21c\uc704 1: rfs.yaml, rfs.json\n\uc6b0\uc120\uc21c\uc704 2: pyproject.toml\n\uc6b0\uc120\uc21c\uc704 3: requirements.txt\n</code></pre>"},{"location":"14-cli-interface/#_26","title":"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870 \uc608\uc2dc","text":"<pre><code>my-rfs-project/\n\u251c\u2500\u2500 rfs.yaml              # RFS \ud504\ub85c\uc81d\ud2b8 \uc124\uc815\n\u251c\u2500\u2500 pyproject.toml        # Python \ud504\ub85c\uc81d\ud2b8 \uc124\uc815\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"14-cli-interface/#2_1","title":"2. \ud658\uacbd\ubcc4 \uc2e4\ud589","text":"<pre><code># \uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\nRFS_ENV=development rfs status\n\n# \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\nRFS_ENV=production rfs status\n\n# \ub514\ubc84\uadf8 \ubaa8\ub4dc \ud65c\uc131\ud654\nRFS_DEBUG=true rfs version\n</code></pre>"},{"location":"14-cli-interface/#3","title":"3. \ucd9c\ub825 \ud615\uc2dd \uc81c\uc5b4","text":"<pre><code># Rich UI \uc0ac\uc6a9 (\uae30\ubcf8\uac12, rich\uac00 \uc124\uce58\ub41c \uacbd\uc6b0)\nrfs status\n\n# \ud50c\ub808\uc778 \ud14d\uc2a4\ud2b8 \ucd9c\ub825 (rich\uac00 \uc5c6\uac70\ub098 \ube44\ud65c\uc131\ud654)\nRFS_NO_RICH=true rfs status\n\n# JSON \ucd9c\ub825 (\ud5a5\ud6c4 \ubc84\uc804)\nrfs status --format json\n</code></pre>"},{"location":"14-cli-interface/#_27","title":"\uc131\ub2a5 \ubc0f \ucd5c\uc801\ud654","text":""},{"location":"14-cli-interface/#cli","title":"CLI \uc131\ub2a5 \uc9c0\ud45c","text":"\uba54\ud2b8\ub9ad \ubaa9\ud45c \uc2e4\uc81c \uc131\uacfc \uc2dc\uc791 \uc2dc\uac04 &lt;100ms ~50ms \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 &lt;50MB ~25MB \uba85\ub839\uc5b4 \uc751\ub2f5 \uc2dc\uac04 &lt;200ms ~100ms \uc758\uc874\uc131 \uccb4\ud06c \uc2dc\uac04 &lt;500ms ~200ms"},{"location":"14-cli-interface/#_28","title":"\ucd5c\uc801\ud654 \uae30\ubc95","text":"<ol> <li>\uc9c0\uc5f0 \uc784\ud3ec\ud2b8: \ud544\uc694\ud55c \ubaa8\ub4c8\ub9cc \ub3d9\uc801\uc73c\ub85c \ub85c\ub4dc</li> <li>\uce90\uc2f1: \ubc18\ubcf5\uc801\uc778 \uac80\uc0ac \uacb0\uacfc \uce90\uc2f1</li> <li>\ubcd1\ub82c \ucc98\ub9ac: \uc758\uc874\uc131 \uccb4\ud06c\ub97c \ubcd1\ub82c\ub85c \uc218\ud589</li> <li>\uba54\ubaa8\ub9ac \uad00\ub9ac: \uc0ac\uc6a9 \ud6c4 \uc989\uc2dc \ub9ac\uc18c\uc2a4 \ud574\uc81c</li> </ol>"},{"location":"14-cli-interface/#_29","title":"\ubb38\uc81c \ud574\uacb0","text":""},{"location":"14-cli-interface/#_30","title":"\uc77c\ubc18\uc801\uc778 \ubb38\uc81c","text":""},{"location":"14-cli-interface/#1-python","title":"1. Python \ubc84\uc804 \ud638\ud658\uc131","text":"<pre><code>\u274c RFS Framework requires Python 3.10 or higher\nCurrent version: Python 3.9\n\n\ud574\uacb0\ubc29\ubc95:\n- pyenv install 3.11.0\n- pyenv global 3.11.0\n- python3 --version  # \ud655\uc778\n</code></pre>"},{"location":"14-cli-interface/#2_2","title":"2. \uc758\uc874\uc131 \uc124\uce58 \uc2e4\ud328","text":"<pre><code>\u274c pydantic (&gt;=2.5.0)\n\n\ud574\uacb0\ubc29\ubc95:\n- pip install --upgrade pip\n- pip install pydantic&gt;=2.5.0\n- pip install rfs-framework[all]\n</code></pre>"},{"location":"14-cli-interface/#3-rich-ui","title":"3. Rich UI \uad00\ub828 \ubb38\uc81c","text":"<pre><code># Rich\uac00 \uc124\uce58\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0\npip install rich&gt;=13.7.0\n\n# \ud130\ubbf8\ub110 \ud638\ud658\uc131 \ubb38\uc81c\nexport TERM=xterm-256color\n</code></pre>"},{"location":"14-cli-interface/#4","title":"4. \uad8c\ud55c \ubb38\uc81c","text":"<pre><code># \uc0ac\uc6a9\uc790 \uc124\uce58\npip install --user rfs-framework\n\n# \uac00\uc0c1\ud658\uacbd \uc0ac\uc6a9\npython3 -m venv rfs-env\nsource rfs-env/bin/activate\npip install rfs-framework\n</code></pre>"},{"location":"14-cli-interface/#_31","title":"\ub514\ubc84\uae45 \ubaa8\ub4dc","text":"<pre><code># \uc0c1\uc138\ud55c \uc624\ub958 \uc815\ubcf4\nRFS_DEBUG=true rfs status\n\n# \uc2a4\ud0dd \ud2b8\ub808\uc774\uc2a4 \ud3ec\ud568\nRFS_VERBOSE=true rfs version\n\n# \ub85c\uadf8 \ub808\ubca8 \uc124\uc815\nRFS_LOG_LEVEL=DEBUG rfs help\n</code></pre>"},{"location":"14-cli-interface/#_32","title":"\ud655\uc7a5 \ubc0f \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5","text":""},{"location":"14-cli-interface/#1-rfsyaml","title":"1. \uc124\uc815 \ud30c\uc77c (rfs.yaml)","text":"<pre><code># rfs.yaml\nrfs:\n  version: \"4.3.0\"\n  environment: \"development\"\n\ncli:\n  default_format: \"rich\"  # rich | plain | json\n  show_dependencies: true\n  show_performance_metrics: false\n\nfeatures:\n  enable_all: true\n  experimental: false\n</code></pre>"},{"location":"14-cli-interface/#2_3","title":"2. \ud658\uacbd \ubcc0\uc218 \uc124\uc815","text":"<pre><code># ~/.bashrc \ub610\ub294 ~/.zshrc\nexport RFS_ENV=development\nexport RFS_CLI_FORMAT=rich\nexport RFS_PROJECT_ROOT=/path/to/project\n</code></pre>"},{"location":"14-cli-interface/#3-aliases","title":"3. \ubcc4\uce6d (Aliases) \uc124\uc815","text":"<pre><code># \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \uba85\ub839\uc5b4 \ubcc4\uce6d\nalias rfv=\"rfs version\"\nalias rfs=\"rfs status\"\nalias rfc=\"rfs config\"\nalias rfh=\"rfs help\"\n</code></pre>"},{"location":"14-cli-interface/#cicd","title":"CI/CD \ud1b5\ud569","text":""},{"location":"14-cli-interface/#github-actions","title":"GitHub Actions","text":"<pre><code>name: RFS Framework Check\non: [push, pull_request]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.11'\n    - name: Install RFS Framework\n      run: pip install rfs-framework[all]\n    - name: Check Framework Status\n      run: |\n        rfs version\n        rfs status\n        rfs config\n</code></pre>"},{"location":"14-cli-interface/#docker","title":"Docker \ud1b5\ud569","text":"<pre><code># Multi-stage build\nFROM python:3.11-slim as builder\nRUN pip install rfs-framework[all]\n\nFROM python:3.11-slim\nCOPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=builder /usr/local/bin/rfs /usr/local/bin/rfs\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD rfs status || exit 1\n\nCMD [\"rfs\", \"status\"]\n</code></pre>"},{"location":"14-cli-interface/#api","title":"API \ub808\ud37c\ub7f0\uc2a4","text":""},{"location":"14-cli-interface/#_33","title":"\uba85\ub839\uc5b4 \uad6c\uc870","text":"<pre><code>rfs [GLOBAL_OPTIONS] &lt;COMMAND&gt; [COMMAND_OPTIONS]\n</code></pre>"},{"location":"14-cli-interface/#_34","title":"\uc804\uc5ed \uc635\uc158","text":"<pre><code>--version, -v      \ubc84\uc804 \uc815\ubcf4 \ud45c\uc2dc\n--help, -h         \ub3c4\uc6c0\ub9d0 \ud45c\uc2dc\n--verbose          \uc0c1\uc138 \ucd9c\ub825 (\ud5a5\ud6c4)\n--format FORMAT    \ucd9c\ub825 \ud615\uc2dd \uc9c0\uc815 (\ud5a5\ud6c4)\n--no-color         \uc0c9\uc0c1 \ucd9c\ub825 \ube44\ud65c\uc131\ud654 (\ud5a5\ud6c4)\n</code></pre>"},{"location":"14-cli-interface/#_35","title":"\uba85\ub839\uc5b4 \ubaa9\ub85d","text":"<pre><code>version            \ud504\ub808\uc784\uc6cc\ud06c \ubc84\uc804 \ubc0f \uae30\ub2a5 \uc815\ubcf4\nstatus             \uc2dc\uc2a4\ud15c \uc0c1\ud0dc \ubc0f \uae30\ub2a5 \ubaa8\ub2c8\ud130\ub9c1\nhelp               \ub3c4\uc6c0\ub9d0 \ubc0f \uc0ac\uc6a9\ubc95\nconfig             \uc124\uc815 \uc815\ubcf4 \ud45c\uc2dc\n</code></pre>"},{"location":"14-cli-interface/#_36","title":"\uc885\ub8cc \ucf54\ub4dc","text":"<pre><code>0                  \uc131\uacf5\n1                  \uc77c\ubc18 \uc624\ub958\n2                  \uc798\ubabb\ub41c \uc0ac\uc6a9\ubc95\n130                \uc0ac\uc6a9\uc790 \uc911\ub2e8 (Ctrl+C)\n</code></pre>"},{"location":"14-cli-interface/#_37","title":"\ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":""},{"location":"14-cli-interface/#1_1","title":"1. \uac1c\ubc1c \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ud1b5\ud569","text":"<pre><code># \ud504\ub85c\uc81d\ud2b8 \uc2dc\uc791 \uc804 \uc0c1\ud0dc \ud655\uc778\nrfs status\n\n# \uac1c\ubc1c \uc911 \uc8fc\uae30\uc801 \uc810\uac80\nwatch -n 30 rfs status\n\n# \ubc30\ud3ec \uc804 \ucd5c\uc885 \ud655\uc778\nrfs version &amp;&amp; rfs status\n</code></pre>"},{"location":"14-cli-interface/#2_4","title":"2. \uc790\ub3d9\ud654 \uc2a4\ud06c\ub9bd\ud2b8","text":"<pre><code>#!/bin/bash\n# check_rfs.sh - RFS \uc0c1\ud0dc \uc790\ub3d9 \uc810\uac80\n\necho \"\ud83d\udd0d RFS Framework \uc0c1\ud0dc \uc810\uac80 \uc2dc\uc791...\"\n\n# \ubc84\uc804 \ud655\uc778\necho \"\ud83d\udccb \ubc84\uc804 \uc815\ubcf4:\"\nrfs version\n\n# \uc2dc\uc2a4\ud15c \uc0c1\ud0dc \ud655\uc778\necho \"\ud83d\udd27 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc:\"\nrfs status\n\n# \uc124\uc815 \ud655\uc778\necho \"\u2699\ufe0f \uc124\uc815 \uc815\ubcf4:\"\nrfs config\n\necho \"\u2705 \uc0c1\ud0dc \uc810\uac80 \uc644\ub8cc!\"\n</code></pre>"},{"location":"14-cli-interface/#3_1","title":"3. \ubaa8\ub2c8\ud130\ub9c1 \ud1b5\ud569","text":"<pre><code># monitoring.py - CLI \uacb0\uacfc\ub97c \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c\uc5d0 \uc804\uc1a1\nimport subprocess\nimport json\n\ndef check_rfs_status():\n    result = subprocess.run(['rfs', 'status'], \n                          capture_output=True, text=True)\n\n    if result.returncode == 0:\n        # \uc131\uacf5\uc801\uc73c\ub85c \uc2e4\ud589\ub428\n        send_metric(\"rfs.status\", \"ok\")\n    else:\n        # \uc624\ub958 \ubc1c\uc0dd\n        send_metric(\"rfs.status\", \"error\")\n        send_alert(f\"RFS Status Check Failed: {result.stderr}\")\n</code></pre> <p>\uc774 \ubb38\uc11c\ub294 RFS Framework CLI\uc758 \ubaa8\ub4e0 \uae30\ub2a5\uacfc \uc0ac\uc6a9\ubc95\uc744 \ud3ec\uad04\uc801\uc73c\ub85c \ub2e4\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00\uc801\uc778 \uc9c8\ubb38\uc774\ub098 \ud2b9\uc815 \uae30\ub2a5\uc5d0 \ub300\ud55c \uc138\ubd80\uc0ac\ud56d\uc774 \ud544\uc694\ud558\uc2dc\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \ubb38\uc758\ud574 \uc8fc\uc138\uc694.</p>"},{"location":"15-configuration-injection/","title":"RFS Framework \uc124\uc815 \uc8fc\uc785 \uac00\uc774\ub4dc","text":""},{"location":"15-configuration-injection/#_1","title":"\uac1c\uc694","text":"<p>RFS Framework\uc5d0\uc11c \uc124\uc815(Configuration) \uac12\uc744 \uad6c\ud604\uccb4(Implementation)\uc5d0 \uc8fc\uc785\ud558\ub294 \ub2e4\uc591\ud55c \ud328\ud134\uacfc \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4.</p>"},{"location":"15-configuration-injection/#_2","title":"\ud83d\udd27 \uc8fc\uc694 \uc8fc\uc785 \ud328\ud134","text":""},{"location":"15-configuration-injection/#1-direct-import-pattern","title":"1. \uc9c1\uc811 \uac00\uc838\uc624\uae30 \ud328\ud134 (Direct Import Pattern)","text":"<p>\uac00\uc7a5 \uac04\ub2e8\ud558\uace0 \uc9c1\uc811\uc801\uc778 \ubc29\uc2dd\uc73c\ub85c, \ud544\uc694\ud55c \uacf3\uc5d0\uc11c \uc124\uc815\uc744 \uc9c1\uc811 \uac00\uc838\uc635\ub2c8\ub2e4.</p> <pre><code>from rfs.core.config import get_config\nfrom rfs.hof.core import pipe\nfrom rfs.hof.collections import first\n\nclass MyService:\n    def __init__(self):\n        \"\"\"\uc0dd\uc131\uc790\uc5d0\uc11c \uc124\uc815\uc744 \uc9c1\uc811 \uac00\uc838\uc635\ub2c8\ub2e4.\"\"\"\n        self.config = get_config()\n        self.database_url = self.config.redis_url\n        self.max_retries = self.config.max_concurrency\n\n    def process_data(self, data: dict) -&gt; Result[dict, str]:\n        \"\"\"\uc124\uc815\uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\"\"\"\n        if self.config.is_development():\n            # \uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c\ub9cc \ub514\ubc84\uadf8 \ub85c\uadf8\n            logger.debug(f\"Processing: {data}\")\n\n        # HOF\ub97c \ud65c\uc6a9\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\n        return pipe(\n            self._validate_data_size,\n            lambda result: result.bind(self._process_internal)\n        )(data)\n\n    def _validate_data_size(self, data: dict) -&gt; Result[dict, str]:\n        \"\"\"\ub370\uc774\ud130 \ud06c\uae30\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n        if len(data) &gt; self.max_retries:\n            return Failure(\"\ub370\uc774\ud130 \ud06c\uae30\uac00 \ucd5c\ub300 \ucc98\ub9ac\ub7c9\uc744 \ucd08\uacfc\ud569\ub2c8\ub2e4\")\n        return Success(data)\n</code></pre> <p>\uc7a5\uc810: \uac04\ub2e8\ud558\uace0 \uba85\ud655\ud568 \ub2e8\uc810: \ud14c\uc2a4\ud2b8\ud558\uae30 \uc5b4\ub824\uc6c0, \uc758\uc874\uc131\uc774 \uc228\uaca8\uc838 \uc788\uc74c</p>"},{"location":"15-configuration-injection/#2-helper-function-pattern","title":"2. \ud5ec\ud37c \ud568\uc218 \ud328\ud134 (Helper Function Pattern)","text":"<p>\uc810 \ud45c\uae30\ubc95\uc744 \uc9c0\uc6d0\ud558\ub294 \ud5ec\ud37c \ud568\uc218\ub97c \ud1b5\ud574 \uc124\uc815\uac12\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.</p> <pre><code>from rfs.core.helpers import get, get_config\n\nclass DatabaseService:\n    def __init__(self):\n        \"\"\"\ud5ec\ud37c \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc124\uc815\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\"\"\"\n        # \uc810 \ud45c\uae30\ubc95\uc73c\ub85c \uc911\ucca9\ub41c \uc124\uc815 \uc811\uadfc\n        self.host = get(\"database.host\", \"localhost\")\n        self.port = get(\"database.port\", 5432)\n        self.timeout = get(\"database.connection_timeout\", 30)\n\n        # \uc804\uccb4 \uc124\uc815 \uac1d\uccb4\ub3c4 \uac00\uc838\uc62c \uc218 \uc788\uc74c\n        self.config = get_config()\n\n    def connect(self) -&gt; Result[Connection, str]:\n        \"\"\"\uc124\uc815\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n        try:\n            conn = create_connection(\n                host=self.host,\n                port=self.port,\n                timeout=self.timeout\n            )\n            return Success(conn)\n        except ConnectionError as e:\n            return Failure(f\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328: {e}\")\n\n# \uc0ac\uc6a9 \uc608\uc2dc\nservice = DatabaseService()\nresult = service.connect()\n</code></pre> <p>\uc7a5\uc810: \uc720\uc5f0\ud55c \uc124\uc815 \uc811\uadfc, \uae30\ubcf8\uac12 \uc9c0\uc6d0 \ub2e8\uc810: \ub7f0\ud0c0\uc784 \uc624\ub958 \uac00\ub2a5\uc131</p>"},{"location":"15-configuration-injection/#3-constructor-injection","title":"3. \uc0dd\uc131\uc790 \uc8fc\uc785 \ud328\ud134 (Constructor Injection)","text":"<p>\uc758\uc874\uc131\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uc8fc\uc785\ubc1b\ub294 \ud328\ud134\uc785\ub2c8\ub2e4.</p> <pre><code>from dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass ServiceConfig:\n    \"\"\"\uc11c\ube44\uc2a4\ubcc4 \uc124\uc815 \ud074\ub798\uc2a4\"\"\"\n    api_endpoint: str = \"https://api.example.com\"\n    timeout: int = 30\n    max_retries: int = 3\n    debug_mode: bool = False\n\nclass APIService:\n    def __init__(self, config: Optional[ServiceConfig] = None):\n        \"\"\"\uc124\uc815\uc744 \uc0dd\uc131\uc790\ub85c \uc8fc\uc785\ubc1b\uc2b5\ub2c8\ub2e4.\"\"\"\n        self.config = config or ServiceConfig()\n\n        # \uae00\ub85c\ubc8c \uc124\uc815\uacfc \ubcd1\ud569 \uac00\ub2a5\n        global_config = get_config()\n        if global_config.is_development():\n            self.config.debug_mode = True\n\n    def call_api(self, endpoint: str, data: dict) -&gt; Result[dict, str]:\n        \"\"\"\uc124\uc815\ub41c \uac12\uc73c\ub85c API\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.\"\"\"\n        url = f\"{self.config.api_endpoint}/{endpoint}\"\n\n        for attempt in range(self.config.max_retries):\n            try:\n                response = requests.post(\n                    url, \n                    json=data, \n                    timeout=self.config.timeout\n                )\n\n                if self.config.debug_mode:\n                    logger.debug(f\"API \ud638\ucd9c \uc131\uacf5: {url}\")\n\n                return Success(response.json())\n            except requests.Timeout:\n                if attempt == self.config.max_retries - 1:\n                    return Failure(f\"API \ud638\ucd9c \ud0c0\uc784\uc544\uc6c3: {url}\")\n                continue\n\n# \uc0ac\uc6a9 \uc608\uc2dc\n# \uae30\ubcf8 \uc124\uc815\uc73c\ub85c \uc0dd\uc131\nservice = APIService()\n\n# \ucee4\uc2a4\ud140 \uc124\uc815\uc73c\ub85c \uc0dd\uc131\ncustom_config = ServiceConfig(\n    api_endpoint=\"https://custom-api.com\",\n    timeout=60,\n    max_retries=5\n)\nservice_with_custom = APIService(custom_config)\n</code></pre> <p>\uc7a5\uc810: \ud14c\uc2a4\ud2b8\ud558\uae30 \uc26c\uc6c0, \uc758\uc874\uc131\uc774 \uba85\ud655\ud568 \ub2e8\uc810: \ubcf4\uc77c\ub7ec\ud50c\ub808\uc774\ud2b8 \ucf54\ub4dc \uc99d\uac00</p>"},{"location":"15-configuration-injection/#4-dependency-injection","title":"4. \uc758\uc874\uc131 \uc8fc\uc785 \ud328\ud134 (Dependency Injection)","text":"<p>\ub370\ucf54\ub808\uc774\ud130\ub97c \ud1b5\ud574 \uc758\uc874\uc131\uc744 \uc790\ub3d9\uc73c\ub85c \uc8fc\uc785\ubc1b\ub294 \ud328\ud134\uc785\ub2c8\ub2e4.</p> <pre><code>from rfs.core.registry import default_registry, stateless\nfrom rfs.core.singleton import inject\n\n# \uc124\uc815 \uc11c\ube44\uc2a4\ub97c \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0 \ub4f1\ub85d\n@stateless\nclass ConfigService:\n    \"\"\"\uc124\uc815 \uad00\ub9ac \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        self.config = get_config()\n\n    def get_database_config(self) -&gt; dict:\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        return {\n            \"url\": self.config.redis_url,\n            \"timeout\": 30,\n            \"pool_size\": self.config.max_concurrency\n        }\n\n    def get_cache_config(self) -&gt; dict:\n        \"\"\"\uce90\uc2dc \uc124\uc815\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        return {\n            \"enabled\": True,\n            \"ttl\": 3600,\n            \"max_size\": 1000\n        }\n\n# \uc124\uc815 \uc11c\ube44\uc2a4\ub97c \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0 \ub4f1\ub85d\ndefault_registry.register(\"config_service\", ConfigService)\n\n# \uc758\uc874\uc131 \uc8fc\uc785\uc744 \ud1b5\ud574 \uc0ac\uc6a9\nclass UserService:\n\n    @inject(\"config_service\")\n    def create_user(self, user_data: dict, config_service: ConfigService) -&gt; Result[User, str]:\n        \"\"\"\uc0ac\uc6a9\uc790\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n        db_config = config_service.get_database_config()\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5f0\uacb0\n        conn = create_db_connection(**db_config)\n\n        try:\n            user = User(**user_data)\n            save_user(conn, user)\n            return Success(user)\n        except Exception as e:\n            return Failure(f\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc2e4\ud328: {e}\")\n\n    @inject(\"config_service\")\n    def get_user_cached(self, user_id: str, config_service: ConfigService) -&gt; Result[User, str]:\n        \"\"\"\uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n        cache_config = config_service.get_cache_config()\n\n        if cache_config[\"enabled\"]:\n            # \uce90\uc2dc\uc5d0\uc11c \uba3c\uc800 \ud655\uc778\n            cached_user = get_from_cache(user_id, ttl=cache_config[\"ttl\"])\n            if cached_user:\n                return Success(cached_user)\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c\n        return self._get_user_from_db(user_id)\n</code></pre> <p>\uc7a5\uc810: \uae54\ub054\ud55c \ucf54\ub4dc, \uc790\ub3d9 \uc758\uc874\uc131 \ud574\uacb0 \ub2e8\uc810: \ub9c8\ubc95\uac19\uc740 \ub3d9\uc791, \ub514\ubc84\uae45 \uc5b4\ub824\uc6c0</p>"},{"location":"15-configuration-injection/#5-registry-based-injection","title":"5. \ub808\uc9c0\uc2a4\ud2b8\ub9ac \uae30\ubc18 \uc8fc\uc785 (Registry-based Injection)","text":"<p>\uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\ub97c \ud1b5\ud574 \uc124\uc815\uc774 \ud3ec\ud568\ub41c \uc11c\ube44\uc2a4\ub97c \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.core.registry import ServiceRegistry, ServiceScope, ServiceDefinition\n\n# \uc124\uc815\uc774 \ud3ec\ud568\ub41c \uc11c\ube44\uc2a4 \uc815\uc758\nclass DatabaseConfiguration:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815 \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        config = get_config()\n        self.connection_string = config.redis_url\n        self.pool_size = config.max_concurrency\n        self.timeout = 30\n\n    def get_connection_params(self) -&gt; dict:\n        \"\"\"\uc5f0\uacb0 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        return {\n            \"connection_string\": self.connection_string,\n            \"pool_size\": self.pool_size,\n            \"timeout\": self.timeout\n        }\n\nclass CacheConfiguration:\n    \"\"\"\uce90\uc2dc \uc124\uc815 \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        config = get_config()\n        self.enabled = not config.is_test()  # \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc5d0\uc11c\ub294 \uce90\uc2dc \ube44\ud65c\uc131\ud654\n        self.ttl = 3600\n        self.max_entries = 10000\n\n    def is_cache_enabled(self) -&gt; bool:\n        \"\"\"\uce90\uc2dc \ud65c\uc131\ud654 \uc5ec\ubd80\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        return self.enabled\n\n# \uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0 \ub4f1\ub85d\nregistry = ServiceRegistry()\nregistry.register(\n    \"db_config\", \n    DatabaseConfiguration, \n    scope=ServiceScope.SINGLETON\n)\nregistry.register(\n    \"cache_config\", \n    CacheConfiguration, \n    scope=ServiceScope.SINGLETON\n)\n\n# \uc758\uc874\uc131\uc774 \uc788\ub294 \uc11c\ube44\uc2a4 \ub4f1\ub85d\nclass DataService:\n    def __init__(self, db_config: DatabaseConfiguration, cache_config: CacheConfiguration):\n        \"\"\"\uc124\uc815 \uc11c\ube44\uc2a4\ub4e4\uc744 \uc8fc\uc785\ubc1b\uc2b5\ub2c8\ub2e4.\"\"\"\n        self.db_config = db_config\n        self.cache_config = cache_config\n        self._connection = None\n\n    def get_data(self, key: str) -&gt; Result[dict, str]:\n        \"\"\"\ub370\uc774\ud130\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n        # \uce90\uc2dc \ud655\uc778\n        if self.cache_config.is_cache_enabled():\n            cached = self._get_from_cache(key)\n            if cached:\n                return Success(cached)\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc870\ud68c\n        conn_params = self.db_config.get_connection_params()\n        return self._fetch_from_db(key, conn_params)\n\n# \uc758\uc874\uc131\uacfc \ud568\uaed8 \ub4f1\ub85d\nregistry.register(\n    \"data_service\",\n    DataService,\n    dependencies=[\"db_config\", \"cache_config\"],\n    scope=ServiceScope.SINGLETON\n)\n\n# \uc0ac\uc6a9\ndata_service = registry.get(\"data_service\")\nresult = data_service.get_data(\"user:123\")\n</code></pre> <p>\uc7a5\uc810: \uc644\uc804\ud55c \uc758\uc874\uc131 \uad00\ub9ac, \uc0dd\uba85\uc8fc\uae30 \uc81c\uc5b4 \ub2e8\uc810: \ubcf5\uc7a1\uc131 \uc99d\uac00, \ud559\uc2b5 \uace1\uc120</p>"},{"location":"15-configuration-injection/#_3","title":"\ud83d\ude80 \uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"15-configuration-injection/#cloud-run","title":"Cloud Run \ud658\uacbd \ucd5c\uc801\ud654 \uc608\uc81c","text":"<pre><code>from rfs.core.config import get_config\nfrom rfs.web.server import RFSWebServer, WebServerConfig\n\nclass CloudRunOptimizedService:\n    \"\"\"Cloud Run \ud658\uacbd\uc5d0 \ucd5c\uc801\ud654\ub41c \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        # RFS \uae00\ub85c\ubc8c \uc124\uc815 \uac00\uc838\uc624\uae30\n        self.rfs_config = get_config()\n\n        # \uc6f9 \uc11c\ubc84 \uc124\uc815\uc744 \ud658\uacbd\uc5d0 \ub9de\uac8c \uc870\uc815\n        self.web_config = WebServerConfig(\n            host=\"0.0.0.0\",\n            port=int(os.environ.get(\"PORT\", 8080)),  # Cloud Run \ud3ec\ud2b8\n            debug=self.rfs_config.is_development(),\n            cloud_run_optimized=True,\n            request_timeout=self.rfs_config.cloud_run_cpu_limit,\n            enable_cors=True\n        )\n\n        # \uc11c\ubc84 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\n        self.server = RFSWebServer(self.web_config)\n\n    def configure_for_environment(self) -&gt; None:\n        \"\"\"\ud658\uacbd\ubcc4 \ucd94\uac00 \uc124\uc815\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n        if self.rfs_config.is_production():\n            # \ud504\ub85c\ub355\uc158 \ud658\uacbd \ucd5c\uc801\ud654\n            self.web_config.enable_metrics = True\n            self.web_config.enable_security_headers = True\n\n        elif self.rfs_config.is_development():\n            # \uac1c\ubc1c \ud658\uacbd \ub514\ubc84\uae45\n            self.web_config.debug = True\n            self.web_config.enable_logging = True\n\n# \uc0ac\uc6a9\nservice = CloudRunOptimizedService()\nservice.configure_for_environment()\napp = service.server.app\n</code></pre>"},{"location":"15-configuration-injection/#_4","title":"\ub2e4\uc911 \ub370\uc774\ud130 \uc18c\uc2a4 \uc124\uc815 \uc608\uc81c","text":"<pre><code>from typing import Dict, Any\nfrom rfs.core.config import get_config, RFSConfig\n\nclass MultiDataSourceConfig:\n    \"\"\"\ub2e4\uc911 \ub370\uc774\ud130 \uc18c\uc2a4 \uc124\uc815 \uad00\ub9ac\"\"\"\n\n    def __init__(self, rfs_config: RFSConfig = None):\n        self.config = rfs_config or get_config()\n\n        # \uae30\ubcf8 \ub370\uc774\ud130 \uc18c\uc2a4 \uc124\uc815\n        self.primary_db = {\n            \"url\": self.config.redis_url,\n            \"pool_size\": self.config.max_concurrency,\n            \"timeout\": 30\n        }\n\n        # \uce90\uc2dc \uc124\uc815\n        self.cache = {\n            \"enabled\": not self.config.is_test(),\n            \"redis_url\": self.config.redis_url,\n            \"ttl\": 3600\n        }\n\n        # \ud658\uacbd\ubcc4 \ucd94\uac00 \uc124\uc815\n        self._configure_environment_specific()\n\n    def _configure_environment_specific(self):\n        \"\"\"\ud658\uacbd\ubcc4 \ud2b9\ud654 \uc124\uc815\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n        match self.config.environment:\n            case Environment.DEVELOPMENT:\n                self.cache[\"ttl\"] = 60  # \uac1c\ubc1c\ud658\uacbd\uc5d0\uc11c\ub294 \uc9e7\uc740 TTL\n                self.primary_db[\"pool_size\"] = 5\n\n            case Environment.PRODUCTION:\n                self.cache[\"ttl\"] = 7200  # \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \uae34 TTL\n                self.primary_db[\"pool_size\"] = self.config.max_concurrency\n\n                # \ubc31\uc5c5 \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00\n                self.backup_db = {\n                    \"url\": self.config.custom.get(\"backup_redis_url\"),\n                    \"pool_size\": self.config.max_concurrency // 2,\n                    \"timeout\": 60\n                }\n\n            case Environment.TEST:\n                self.cache[\"enabled\"] = False\n                self.primary_db = {\n                    \"url\": \"redis://localhost:6380\",  # \ud14c\uc2a4\ud2b8 \uc804\uc6a9 \uc778\uc2a4\ud134\uc2a4\n                    \"pool_size\": 2,\n                    \"timeout\": 10\n                }\n\n    def get_database_config(self, source: str = \"primary\") -&gt; Dict[str, Any]:\n        \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        match source:\n            case \"primary\":\n                return self.primary_db\n            case \"backup\" if hasattr(self, 'backup_db'):\n                return self.backup_db\n            case _:\n                return self.primary_db\n\n    def get_cache_config(self) -&gt; Dict[str, Any]:\n        \"\"\"\uce90\uc2dc \uc124\uc815\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        return self.cache\n\n# \uc0ac\uc6a9 \uc608\uc81c\nclass DataAccessLayer:\n    def __init__(self, config: MultiDataSourceConfig = None):\n        self.config = config or MultiDataSourceConfig()\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815\n        self.primary_conn = self._create_connection(\n            self.config.get_database_config(\"primary\")\n        )\n\n        # \ubc31\uc5c5 \uc5f0\uacb0 (\ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub9cc)\n        if hasattr(self.config, 'backup_db'):\n            self.backup_conn = self._create_connection(\n                self.config.get_database_config(\"backup\")\n            )\n\n        # \uce90\uc2dc \uc124\uc815\n        cache_config = self.config.get_cache_config()\n        self.cache_enabled = cache_config[\"enabled\"]\n\n    def get_user_data(self, user_id: str) -&gt; Result[dict, str]:\n        \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n        # \uce90\uc2dc \ud655\uc778\n        if self.cache_enabled:\n            cached = self._get_from_cache(user_id)\n            if cached:\n                return Success(cached)\n\n        # \uc8fc \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c\n        try:\n            data = self._query_database(self.primary_conn, user_id)\n            return Success(data)\n        except ConnectionError:\n            # \ubc31\uc5c5 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc2dc\ub3c4 (\uc788\ub294 \uacbd\uc6b0)\n            if hasattr(self, 'backup_conn'):\n                try:\n                    data = self._query_database(self.backup_conn, user_id)\n                    return Success(data)\n                except ConnectionError:\n                    pass\n\n            return Failure(\"\ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uc5d0 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4\")\n</code></pre>"},{"location":"15-configuration-injection/#_5","title":"\ud83d\udccb \ud328\ud134 \uc120\ud0dd \uac00\uc774\ub4dc","text":""},{"location":"15-configuration-injection/#_6","title":"\uc5b8\uc81c \uc5b4\ub5a4 \ud328\ud134\uc744 \uc0ac\uc6a9\ud560\uae4c\uc694?","text":"\uc0c1\ud669 \uad8c\uc7a5 \ud328\ud134 \uc774\uc720 \uac04\ub2e8\ud55c \uc2a4\ud06c\ub9bd\ud2b8 \uc9c1\uc811 \uac00\uc838\uc624\uae30 \ube60\ub974\uace0 \uac04\ub2e8\ud568 \uc720\uc5f0\ud55c \uc124\uc815 \uc811\uadfc \ud544\uc694 \ud5ec\ud37c \ud568\uc218 \uc810 \ud45c\uae30\ubc95\uacfc \uae30\ubcf8\uac12 \uc9c0\uc6d0 \ud14c\uc2a4\ud2b8 \uac00\ub2a5\ud55c \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uc8fc\uc785 \uba85\ud655\ud55c \uc758\uc874\uc131, \ud14c\uc2a4\ud2b8 \uc6a9\uc774 \ubcf5\uc7a1\ud55c \uc11c\ube44\uc2a4 \uc758\uc874\uc131 \uc8fc\uc785 \uc790\ub3d9\ud654\ub41c \uc758\uc874\uc131 \uad00\ub9ac \ub300\uaddc\ubaa8 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \uae30\ubc18 \uc644\uc804\ud55c \uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac"},{"location":"15-configuration-injection/#_7","title":"\ud83c\udfaf \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","text":"<ol> <li> <p>\ud658\uacbd\ubcc4 \uc124\uc815 \ubd84\ub9ac <pre><code>match config.environment:\n    case Environment.DEVELOPMENT:\n        # \uac1c\ubc1c \ud658\uacbd \uc124\uc815\n    case Environment.PRODUCTION:\n        # \ud504\ub85c\ub355\uc158 \ud658\uacbd \uc124\uc815\n</code></pre></p> </li> <li> <p>\uc124\uc815 \uac80\uc99d <pre><code>@field_validator(\"redis_url\")\n@classmethod\ndef validate_redis_url(cls, v: str) -&gt; str:\n    if not v.startswith(\"redis://\"):\n        raise ValueError(\"\uc62c\ubc14\ub978 Redis URL\uc774 \uc544\ub2d9\ub2c8\ub2e4\")\n    return v\n</code></pre></p> </li> <li> <p>\uae30\ubcf8\uac12 \uc81c\uacf5 <pre><code>timeout: int = get(\"api.timeout\", 30)\nmax_retries: int = get(\"api.max_retries\", 3)\n</code></pre></p> </li> <li> <p>\ud0c0\uc785 \uc548\uc804\uc131 <pre><code>class APIConfig(BaseModel):\n    endpoint: str = Field(..., description=\"API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\")\n    timeout: int = Field(30, ge=1, le=300)\n    api_key: str = Field(..., min_length=10)\n</code></pre></p> </li> </ol>"},{"location":"15-configuration-injection/#_8","title":"\ud83d\udd27 \uace0\uae09 \ud65c\uc6a9","text":""},{"location":"15-configuration-injection/#_9","title":"\ub3d9\uc801 \uc124\uc815 \uc5c5\ub370\uc774\ud2b8","text":"<pre><code>class ConfigurableService:\n    \"\"\"\ub7f0\ud0c0\uc784\uc5d0 \uc124\uc815\uc744 \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\ub294 \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        self.config = get_config()\n        self._settings_cache = {}\n\n    def update_setting(self, key: str, value: Any) -&gt; Result[None, str]:\n        \"\"\"\uc124\uc815\uc744 \ub3d9\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4.\"\"\"\n        try:\n            # \uc124\uc815 \uac80\uc99d\n            self._validate_setting(key, value)\n\n            # \uce90\uc2dc \uc5c5\ub370\uc774\ud2b8\n            self._settings_cache[key] = value\n\n            # \uc124\uc815 \uc801\uc6a9\n            self._apply_setting_change(key, value)\n\n            return Success(None)\n        except ValueError as e:\n            return Failure(f\"\uc124\uc815 \uc5c5\ub370\uc774\ud2b8 \uc2e4\ud328: {e}\")\n\n    def get_effective_setting(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"\uce90\uc2dc\ub41c \uc124\uc815\uc744 \uc6b0\uc120\uc73c\ub85c \uc124\uc815\uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        # \ub3d9\uc801 \uc124\uc815\uc774 \uc788\uc73c\uba74 \uc6b0\uc120\n        if key in self._settings_cache:\n            return self._settings_cache[key]\n\n        # \uae00\ub85c\ubc8c \uc124\uc815\uc5d0\uc11c \uac00\uc838\uc624\uae30\n        return get(key, default)\n</code></pre>"},{"location":"15-configuration-injection/#_10","title":"\uc124\uc815 \ud504\ub85c\ud30c\uc77c\ub9c1","text":"<pre><code>class ConfigProfiler:\n    \"\"\"\uc124\uc815 \uc0ac\uc6a9 \ud328\ud134\uc744 \ubd84\uc11d\ud558\ub294 \ud504\ub85c\ud30c\uc77c\ub7ec\"\"\"\n\n    def __init__(self):\n        self.access_count: Dict[str, int] = {}\n        self.last_accessed: Dict[str, datetime] = {}\n\n    def track_access(self, key: str) -&gt; None:\n        \"\"\"\uc124\uc815 \uc811\uadfc\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4.\"\"\"\n        self.access_count[key] = self.access_count.get(key, 0) + 1\n        self.last_accessed[key] = datetime.now()\n\n    def get_usage_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"\uc124\uc815 \uc0ac\uc6a9 \ud1b5\uacc4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n        return {\n            \"most_accessed\": max(self.access_count.items(), key=lambda x: x[1]),\n            \"total_accesses\": sum(self.access_count.values()),\n            \"unique_keys\": len(self.access_count),\n            \"recent_accesses\": [\n                key for key, time in self.last_accessed.items()\n                if (datetime.now() - time).seconds &lt; 3600\n            ]\n        }\n</code></pre> <p>\uc774 \uac00\uc774\ub4dc\ub97c \ud1b5\ud574 RFS Framework\uc5d0\uc11c \uc124\uc815 \uac12\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc8fc\uc785\ud558\uace0 \uad00\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01 \ud328\ud134\uc758 \uc7a5\ub2e8\uc810\uc744 \uace0\ub824\ud558\uc5ec \ud504\ub85c\uc81d\ud2b8 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\ub294 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\uc138\uc694.</p>"},{"location":"16-hof-usage-guide/","title":"RFS Framework HOF (Higher-Order Functions) \uc0ac\uc6a9 \uac00\uc774\ub4dc","text":""},{"location":"16-hof-usage-guide/#_1","title":"\ud83c\udfaf \uac1c\uc694","text":"<p>\ud544\uc218: RFS Framework\uc758 \ub0b4\uc7a5\ub41c HOF \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\uc5ec \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc2a4\ud0c0\uc77c\ub85c \uac1c\ubc1c\ud558\uc138\uc694.</p> <p>RFS Framework\ub294 Swift, Haskell, F# \ub4f1\uc5d0\uc11c \uc601\uac10\uc744 \ubc1b\uc740 \uac15\ub825\ud55c HOF \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ucee4\uc2a4\ud140 \uad6c\ud604 \ub300\uc2e0 **\ub0b4\uc7a5\ub41c HOF\ub97c \uc6b0\uc120 \uc0ac\uc6a9**\ud558\uc5ec \ucf54\ub4dc\uc758 \uc77c\uad00\uc131\uacfc \ud488\uc9c8\uc744 \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4.</p>"},{"location":"16-hof-usage-guide/#v433","title":"\ud83d\udd27 \uc0c8\ub85c\uc6b4 \ud568\uc218\ud615 \uac1c\ubc1c \uaddc\uce59 (v4.3.3)","text":"<p>Rule 1: \uc18c\ub2e8\uc704 \uac1c\ubc1c - \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc791\uc740 \ud568\uc218 \ub2e8\uc704\ub85c \ubd84\ud574\ud558\uace0 HOF\ub97c \uc801\uadf9\uc801\uc73c\ub85c \ud65c\uc6a9\ud558\uc5ec \uc870\ud569 \uac00\ub2a5\ud558\uace0 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.</p> <p>Rule 2: \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 - \uc18c\ub2e8\uc704\ub4e4 \uac04\uc758 \ud1b5\ud569\uc740 \ubc18\ub4dc\uc2dc \ud30c\uc774\ud504\ub77c\uc778 \ud328\ud134(<code>pipe</code>, <code>compose</code>, \ubaa8\ub098\ub4dc \uccb4\uc774\ub2dd)\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \ud750\ub984\uc744 \uba85\ud655\ud558\uac8c \ud45c\ud604\ud569\ub2c8\ub2e4.</p> <p>Rule 3: \uc124\uc815/DI HOF - \uc124\uc815 \uad00\ub9ac\uc640 \uc758\uc874\uc131 \uc8fc\uc785\uc5d0\uc11c\ub3c4 HOF\ub97c \uc801\uadf9 \ud65c\uc6a9\ud558\uc5ec \uc120\uc5b8\uc801\uc774\uace0 \uc870\ud569 \uac00\ub2a5\ud55c \ud328\ud134\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4.</p>"},{"location":"16-hof-usage-guide/#hof","title":"\ud83c\udfd7\ufe0f HOF \ub77c\uc774\ube0c\ub7ec\ub9ac \uad6c\uc870","text":"<pre><code>src/rfs/hof/\n\u251c\u2500\u2500 core.py          # \ud568\uc218 \ud569\uc131, \ucee4\ub9c1, \ud30c\uc774\ud504\n\u251c\u2500\u2500 collections.py   # Swift \uc2a4\ud0c0\uc77c \uceec\ub809\uc158 \uc5f0\uc0b0\n\u251c\u2500\u2500 monads.py        # Maybe, Either, Result \ubaa8\ub098\ub4dc\n\u251c\u2500\u2500 async_hof.py     # \ube44\ub3d9\uae30 HOF \uc720\ud2f8\ub9ac\ud2f0\n\u251c\u2500\u2500 combinators.py   # \ud568\uc218 \uacb0\ud569\uc790\n\u251c\u2500\u2500 decorators.py    # \ud568\uc218\ud615 \ub370\ucf54\ub808\uc774\ud130\n\u2514\u2500\u2500 guard.py         # Guard \ud328\ud134 (Swift \uc2a4\ud0c0\uc77c)\n</code></pre>"},{"location":"16-hof-usage-guide/#hof_1","title":"\ud83d\udd25 \ud575\uc2ec HOF \ud328\ud134","text":""},{"location":"16-hof-usage-guide/#0-rule-1","title":"0. \uc18c\ub2e8\uc704 \uac1c\ubc1c \ud328\ud134 (Rule 1)","text":"<p>\u2705 \ud568\uc218\ud615 \uc18c\ub2e8\uc704 \ubd84\ud574 \uc804\ub7b5 <pre><code>from rfs.hof.core import pipe, curry, compose\nfrom rfs.hof.collections import compact_map, partition, first\nfrom rfs.core.result import Result, Success, Failure\n\n# \u274c \ub098\uc05c \uc608: \ud070 \ub2e8\uc704 \ud568\uc218\ndef process_user_registration(user_data, config):\n    # \uac80\uc99d, \ubcc0\ud658, \uc800\uc7a5, \uc54c\ub9bc\uae4c\uc9c0 \ubaa8\ub4e0 \uac83\uc744 \ud558\ub098\uc758 \ud568\uc218\uc5d0\uc11c \ucc98\ub9ac\n    if not user_data.get('email'):\n        raise ValueError(\"\uc774\uba54\uc77c\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\")\n    if '@' not in user_data['email']:\n        raise ValueError(\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c\")\n\n    # \uc911\ubcf5 \uc0ac\uc6a9\uc790 \ud655\uc778\n    existing = find_user_by_email(user_data['email'])\n    if existing:\n        raise ValueError(\"\uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc0ac\uc6a9\uc790\")\n\n    # \ube44\ubc00\ubc88\ud638 \ud574\uc2dc\n    hashed_password = hash_password(user_data['password'])\n    user_data['password'] = hashed_password\n\n    # \uc800\uc7a5\n    user = save_user(user_data)\n\n    # \ud658\uc601 \uc774\uba54\uc77c \ubc1c\uc1a1\n    send_welcome_email(user['email'])\n\n    return user\n\n# \u2705 \uc88b\uc740 \uc608: HOF\ub97c \ud65c\uc6a9\ud55c \uc18c\ub2e8\uc704 \ubd84\ud574\n@curry\ndef validate_required_field(field_name: str, data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ud544\uc218 \ud544\ub4dc\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    if not data.get(field_name):\n        return Failure(f\"{field_name}\uc774(\uac00) \ud544\uc694\ud569\ub2c8\ub2e4\")\n    return Success(data)\n\n@curry  \ndef validate_email_format(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc774\uba54\uc77c \ud615\uc2dd\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    email = data.get('email', '')\n    if '@' not in email or '.' not in email.split('@')[1]:\n        return Failure(\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c \ud615\uc2dd\uc785\ub2c8\ub2e4\")\n    return Success(data)\n\ndef check_user_uniqueness(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc911\ubcf5\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\"\"\"\n    existing = find_user_by_email(data['email'])\n    if existing:\n        return Failure(\"\uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc0ac\uc6a9\uc790\uc785\ub2c8\ub2e4\")\n    return Success(data)\n\ndef hash_user_password(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ube44\ubc00\ubc88\ud638\ub97c \ud574\uc2dc\ud569\ub2c8\ub2e4.\"\"\"\n    hashed = hash_password(data['password'])\n    return Success({**data, 'password': hashed})\n\ndef persist_user(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        user = save_user(data)\n        return Success(user)\n    except Exception as e:\n        return Failure(f\"\uc800\uc7a5 \uc2e4\ud328: {str(e)}\")\n\ndef notify_user_welcome(user: dict) -&gt; Result[dict, str]:\n    \"\"\"\ud658\uc601 \uc54c\ub9bc\uc744 \ubc1c\uc1a1\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        send_welcome_email(user['email'])\n        return Success(user)\n    except Exception as e:\n        return Failure(f\"\uc54c\ub9bc \ubc1c\uc1a1 \uc2e4\ud328: {str(e)}\")\n\n# \uc18c\ub2e8\uc704\ub4e4\uc744 \ud30c\uc774\ud504\ub77c\uc778\uc73c\ub85c \uc870\ud569 (Rule 2)\nregister_user_pipeline = pipe(\n    validate_required_field('email'),\n    lambda result: result.bind(validate_required_field('password')),\n    lambda result: result.bind(validate_email_format),\n    lambda result: result.bind(check_user_uniqueness),\n    lambda result: result.bind(hash_user_password),\n    lambda result: result.bind(persist_user),\n    lambda result: result.bind(notify_user_welcome)\n)\n\n# \uc0ac\uc6a9\nuser_data = {\"email\": \"user@example.com\", \"password\": \"securepass\"}\nresult = register_user_pipeline(user_data)\n\nif result.is_success():\n    user = result.unwrap()\n    print(f\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \uc644\ub8cc: {user['email']}\")\nelse:\n    error = result.unwrap_error()\n    print(f\"\ub4f1\ub85d \uc2e4\ud328: {error}\")\n</code></pre></p> <p>\ud83c\udfaf \uc18c\ub2e8\uc704 \ubd84\ud574 \uccb4\ud06c\ub9ac\uc2a4\ud2b8 - [ ] \uac01 \ud568\uc218\ub294 \ub2e8\uc77c \ucc45\uc784\uc744 \uac00\uc9d0 (\ud55c \uac00\uc9c0\ub9cc \uc218\ud589) - [ ] \ud568\uc218\ub294 5-15\uc904 \ub0b4\uc678\ub85c \uac04\uacb0\ud568 - [ ] \ubaa8\ub4e0 \ud568\uc218\ub294 Result \ud0c0\uc785\uc744 \ubc18\ud658\ud558\uc5ec \uc5d0\ub7ec \ucc98\ub9ac \uba85\uc2dc - [ ] \ucee4\ub9c1\uc744 \ud65c\uc6a9\ud558\uc5ec \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac80\uc99d/\ubcc0\ud658 \ud568\uc218 \uc791\uc131 - [ ] \ubd80\uc218 \ud6a8\uacfc(side effect)\ub97c \uba85\ud655\ud788 \ubd84\ub9ac - [ ] \ud568\uc218 \uc774\ub984\uc740 \ub3d9\uc0ac\ud615\uc73c\ub85c \uba85\ud655\ud55c \uc758\ub3c4 \ud45c\ud604</p>"},{"location":"16-hof-usage-guide/#1-rule-2","title":"1. \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 \ud328\ud134 (Rule 2)","text":"<p>\u274c \ub098\uc05c \uc608: \uc808\ucc28\uc801 \ud1b5\ud569 (Rule 2 \uc704\ubc18) <pre><code># \uc808\ucc28\uc801 \uc5f0\uacb0 - \ud53c\ud574\uc57c \ud560 \ubc29\uc2dd (\ud30c\uc774\ud504\ub77c\uc778 \uc5c6\uc74c)\ndef process_user_data(data):\n    # \ub2e8\uacc4\ubcc4\ub85c \uc9c1\uc811 \ud638\ucd9c, \uc5d0\ub7ec \ucc98\ub9ac \ubd88\uba85\ud655\n    cleaned = clean_data(data)\n    if not cleaned:\n        return None\n\n    validated = validate_data(cleaned)\n    if not validated:\n        return None\n\n    transformed = transform_data(validated)\n    if not transformed:\n        return None\n\n    return save_data(transformed)\n\n# \ud638\ucd9c\ud558\ub294 \uacf3\uc5d0\uc11c\ub3c4 \uc5d0\ub7ec \ucc98\ub9ac \uc5b4\ub824\uc6c0\nresult = process_user_data(user_input)\nif not result:\n    print(\"\uc5b4\ub514\uc11c \uc2e4\ud328\ud588\ub294\uc9c0 \uc54c \uc218 \uc5c6\uc74c\")\n</code></pre></p> <p>\u2705 \uc88b\uc740 \uc608: \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 (Rule 2 \uc801\uc6a9) <pre><code>from rfs.hof.core import pipe, compose\nfrom rfs.core.result import Result, Success, Failure\nfrom datetime import datetime\n\n# \uac01 \ub2e8\uacc4\ub294 \uc18c\ub2e8\uc704\ub85c \ubd84\ub9ac (Rule 1)\ndef clean_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ub370\uc774\ud130\ub97c \uc815\uc81c\ud569\ub2c8\ub2e4.\"\"\"\n    if not data:\n        return Failure(\"\ube48 \ub370\uc774\ud130\uc785\ub2c8\ub2e4\")\n    # \ubd88\ud544\uc694\ud55c \ud544\ub4dc \uc81c\uac70\n    cleaned = {k: v for k, v in data.items() if v is not None}\n    return Success(cleaned)\n\ndef validate_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ub370\uc774\ud130 \uc720\ud6a8\uc131\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    required_fields = [\"name\", \"email\"]\n    for field in required_fields:\n        if field not in data:\n            return Failure(f\"\ud544\uc218 \ud544\ub4dc \ub204\ub77d: {field}\")\n    return Success(data)\n\ndef transform_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ub370\uc774\ud130\ub97c \ubcc0\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    transformed = {\n        **data,\n        \"created_at\": datetime.now().isoformat(),\n        \"email\": data[\"email\"].lower()\n    }\n    return Success(transformed)\n\ndef save_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ub370\uc774\ud130\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        # \uc2e4\uc81c \uc800\uc7a5 \ub85c\uc9c1\n        saved_user = {**data, \"id\": \"generated_id\"}\n        return Success(saved_user)\n    except Exception as e:\n        return Failure(f\"\uc800\uc7a5 \uc2e4\ud328: {str(e)}\")\n\n# \ud30c\uc774\ud504\ub77c\uc778\uc744 \ud1b5\ud55c \uc18c\ub2e8\uc704 \ud1b5\ud569 (Rule 2)\nprocess_user_pipeline = pipe(\n    clean_data,\n    lambda result: result.bind(validate_data),\n    lambda result: result.bind(transform_data),\n    lambda result: result.bind(save_data)\n)\n\n# \uace0\uae09 \ud30c\uc774\ud504\ub77c\uc778: \uc870\uac74\ubd80 \ubd84\uae30\ub3c4 \ud568\uc218\ud615\uc73c\ub85c\ndef create_conditional_pipeline(is_premium: bool):\n    \"\"\"\uc870\uac74\uc5d0 \ub530\ub77c \ub2e4\ub978 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    base_steps = [\n        clean_data,\n        lambda result: result.bind(validate_data),\n        lambda result: result.bind(transform_data)\n    ]\n\n    if is_premium:\n        premium_steps = [\n            lambda result: result.bind(add_premium_features),\n            lambda result: result.bind(send_premium_notification)\n        ]\n        return pipe(*base_steps, *premium_steps, lambda result: result.bind(save_data))\n    else:\n        return pipe(*base_steps, lambda result: result.bind(save_data))\n\n# \uc0ac\uc6a9 - \uba85\ud655\ud55c \uc5d0\ub7ec \ucd94\uc801\uacfc \ucc98\ub9ac\nresult = process_user_pipeline(user_input)\nif result.is_success():\n    user = result.unwrap()\n    print(f\"\uc0ac\uc6a9\uc790 \ucc98\ub9ac \uc644\ub8cc: {user['name']} (ID: {user['id']})\")\nelse:\n    error = result.unwrap_error()\n    print(f\"\ucc98\ub9ac \uc2e4\ud328: {error}\")\n    # \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub85c \uc5b4\ub290 \ub2e8\uacc4\uc5d0\uc11c \uc2e4\ud328\ud588\ub294\uc9c0 \uba85\ud655\ud788 \uc54c \uc218 \uc788\uc74c\n</code></pre></p> <p>\ud83d\udd04 \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 \ud328\ud134 \uc885\ub958</p> <ol> <li>\uc21c\ucc28 \ud30c\uc774\ud504\ub77c\uc778: <code>pipe(f1, f2, f3)</code> - \ub370\uc774\ud130\uac00 \uc21c\uc11c\ub300\ub85c \ud750\ub984</li> <li>\ubaa8\ub098\ub4dc \uccb4\uc774\ub2dd: <code>result.bind(f1).bind(f2).bind(f3)</code> - Result \ud0c0\uc785 \uc720\uc9c0</li> <li>\ubd84\uae30 \ud30c\uc774\ud504\ub77c\uc778: \uc870\uac74\uc5d0 \ub530\ub77c \ub2e4\ub978 \uacbd\ub85c</li> <li>\ubcd1\ud569 \ud30c\uc774\ud504\ub77c\uc778: \uc5ec\ub7ec \uc18c\uc2a4\ub97c \ud558\ub098\ub85c \ud569\uc131</li> <li>\ube44\ub3d9\uae30 \ud30c\uc774\ud504\ub77c\uc778: <code>async_pipe()</code> \ube44\ub3d9\uae30 \uc791\uc5c5 \uc5f0\uacb0</li> </ol> <p>\ud83d\udcca \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 \uccb4\ud06c\ub9ac\uc2a4\ud2b8 - [ ] \ubaa8\ub4e0 \ub2e8\uacc4 \uac04 \uc5f0\uacb0\uc740 <code>pipe()</code> \ub610\ub294 \ubaa8\ub098\ub4dc \uccb4\uc774\ub2dd \uc0ac\uc6a9 - [ ] \uc911\uac04 \uacb0\uacfc\ub97c \uc784\uc2dc \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uc9c0 \uc54a\uc74c - [ ] \uc5d0\ub7ec \ucc98\ub9ac\uac00 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ud1b5\ud574 \uc790\ub3d9\uc73c\ub85c \uc804\ud30c - [ ] \uac01 \ud30c\uc774\ud504\ub77c\uc778\uc740 \ub2e8\uc77c \ucc45\uc784\uc744 \uac00\uc9d0 (\ud55c \uac00\uc9c0 \uc6cc\ud06c\ud50c\ub85c\uc6b0) - [ ] \uc870\uac74\ubd80 \ub85c\uc9c1\ub3c4 \ud568\uc218\ud615 \ud328\ud134\uc73c\ub85c \ud45c\ud604 - [ ] \ud30c\uc774\ud504\ub77c\uc778 \uc790\uccb4\uac00 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub2e8\uc704</p>"},{"location":"16-hof-usage-guide/#2-collection-operations","title":"2. \uceec\ub809\uc158 \uc5f0\uc0b0 (Collection Operations)","text":"<p>\u274c \ub098\uc05c \uc608: \uba85\ub839\ud615 \ub8e8\ud504 <pre><code># \ucee4\uc2a4\ud140 \uad6c\ud604 - \ud53c\ud574\uc57c \ud560 \ubc29\uc2dd\ndef process_orders(orders):\n    valid_orders = []\n    for order in orders:\n        if order.get(\"amount\", 0) &gt; 0:\n            valid_orders.append(order)\n\n    processed_orders = []\n    for order in valid_orders:\n        order[\"processed_at\"] = datetime.now()\n        order[\"tax\"] = order[\"amount\"] * 0.1\n        processed_orders.append(order)\n\n    # \uae08\uc561\ubcc4\ub85c \uadf8\ub8f9\ud654\n    groups = {}\n    for order in processed_orders:\n        amount_range = \"high\" if order[\"amount\"] &gt; 1000 else \"low\"\n        if amount_range not in groups:\n            groups[amount_range] = []\n        groups[amount_range].append(order)\n\n    return groups\n</code></pre></p> <p>\u2705 \uc88b\uc740 \uc608: RFS HOF \uc0ac\uc6a9 <pre><code>from rfs.hof.collections import (\n    compact_map, group_by, first, partition\n)\nfrom rfs.hof.core import pipe, curry\nfrom rfs.core.result import Result, Success\n\n@curry\ndef add_tax_and_timestamp(tax_rate: float, order: dict) -&gt; dict:\n    \"\"\"\uc8fc\ubb38\uc5d0 \uc138\uae08\uacfc \ud0c0\uc784\uc2a4\ud0ec\ud504\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.\"\"\"\n    return {\n        **order,\n        \"processed_at\": datetime.now().isoformat(),\n        \"tax\": order[\"amount\"] * tax_rate\n    }\n\ndef validate_order(order: dict) -&gt; Optional[dict]:\n    \"\"\"\uc8fc\ubb38\uc744 \uac80\uc99d\ud558\uace0 \uc720\ud6a8\ud55c \uacbd\uc6b0 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    return order if order.get(\"amount\", 0) &gt; 0 else None\n\ndef categorize_by_amount(order: dict) -&gt; str:\n    \"\"\"\uc8fc\ubb38 \uae08\uc561\uc5d0 \ub530\ub77c \uce74\ud14c\uace0\ub9ac\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    match order[\"amount\"]:\n        case amount if amount &gt; 1000:\n            return \"high\"\n        case amount if amount &gt; 100:\n            return \"medium\"\n        case _:\n            return \"low\"\n\n# HOF\ub97c \uc0ac\uc6a9\ud55c \ud568\uc218\ud615 \ud30c\uc774\ud504\ub77c\uc778\nprocess_orders = pipe(\n    # \uc720\ud6a8\ud55c \uc8fc\ubb38\ub9cc \ud544\ud130\ub9c1 (compact_map \uc0ac\uc6a9)\n    lambda orders: compact_map(validate_order, orders),\n    # \uc138\uae08\uacfc \ud0c0\uc784\uc2a4\ud0ec\ud504 \ucd94\uac00 (\ucee4\ub9c1 \ud65c\uc6a9)\n    lambda orders: list(map(add_tax_and_timestamp(0.1), orders)),\n    # \uae08\uc561\ubcc4\ub85c \uadf8\ub8f9\ud654\n    lambda orders: group_by(categorize_by_amount, orders)\n)\n\n# \uc0ac\uc6a9\nresult = process_orders(orders)\n</code></pre></p>"},{"location":"16-hof-usage-guide/#3-monads","title":"3. \ubaa8\ub098\ub4dc \ud65c\uc6a9 (Monads)","text":"<p>\u274c \ub098\uc05c \uc608: \uc911\ucca9\ub41c \uc608\uc678 \ucc98\ub9ac <pre><code># \ucee4\uc2a4\ud140 \uad6c\ud604 - \ud53c\ud574\uc57c \ud560 \ubc29\uc2dd\ndef get_user_profile(user_id):\n    try:\n        user = fetch_user(user_id)\n        if user is None:\n            return None\n\n        try:\n            profile = fetch_profile(user.profile_id)\n            if profile is None:\n                return None\n\n            try:\n                preferences = fetch_preferences(profile.id)\n                return {\n                    \"user\": user,\n                    \"profile\": profile, \n                    \"preferences\": preferences\n                }\n            except Exception:\n                return None\n        except Exception:\n            return None\n    except Exception:\n        return None\n</code></pre></p> <p>\u2705 \uc88b\uc740 \uc608: RFS HOF \ubaa8\ub098\ub4dc \uc0ac\uc6a9 <pre><code>from rfs.hof.monads import Maybe, Result\nfrom rfs.hof.core import pipe\n\ndef fetch_user_safe(user_id: str) -&gt; Maybe[User]:\n    \"\"\"\uc0ac\uc6a9\uc790\ub97c \uc548\uc804\ud558\uac8c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        user = fetch_user(user_id)\n        return Maybe.just(user) if user else Maybe.nothing()\n    except Exception:\n        return Maybe.nothing()\n\ndef fetch_profile_safe(user: User) -&gt; Maybe[Profile]:\n    \"\"\"\ud504\ub85c\ud544\uc744 \uc548\uc804\ud558\uac8c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        profile = fetch_profile(user.profile_id)\n        return Maybe.just(profile) if profile else Maybe.nothing()\n    except Exception:\n        return Maybe.nothing()\n\ndef fetch_preferences_safe(profile: Profile) -&gt; Maybe[dict]:\n    \"\"\"\uc124\uc815\uc744 \uc548\uc804\ud558\uac8c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        preferences = fetch_preferences(profile.id)\n        return Maybe.just(preferences)\n    except Exception:\n        return Maybe.nothing()\n\ndef build_user_profile(user: User, profile: Profile, preferences: dict) -&gt; dict:\n    \"\"\"\uc0ac\uc6a9\uc790 \ud504\ub85c\ud544\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return {\n        \"user\": user,\n        \"profile\": profile,\n        \"preferences\": preferences\n    }\n\n# \ubaa8\ub098\ub4dc \uccb4\uc774\ub2dd\uc744 \uc0ac\uc6a9\ud55c \uc548\uc804\ud55c \ud30c\uc774\ud504\ub77c\uc778\ndef get_user_profile(user_id: str) -&gt; Maybe[dict]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc804\uccb4 \ud504\ub85c\ud544\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n    return (\n        fetch_user_safe(user_id)\n        .bind(lambda user: \n            fetch_profile_safe(user)\n            .bind(lambda profile:\n                fetch_preferences_safe(profile)\n                .map(lambda prefs: build_user_profile(user, profile, prefs))\n            )\n        )\n    )\n\n# \uc0ac\uc6a9\nresult = get_user_profile(\"user123\")\nif result.is_just():\n    profile = result.unwrap()\n    print(f\"\ud504\ub85c\ud544 \ub85c\ub4dc \uc644\ub8cc: {profile['user'].name}\")\nelse:\n    print(\"\ud504\ub85c\ud544\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n</code></pre></p>"},{"location":"16-hof-usage-guide/#4-swift","title":"4. Swift \uc2a4\ud0c0\uc77c \uceec\ub809\uc158 \uc5f0\uc0b0","text":"<p>\u274c \ub098\uc05c \uc608: \uba85\ub839\ud615 \uac80\uc0c9\uacfc \ubcc0\ud658 <pre><code># \ucee4\uc2a4\ud140 \uad6c\ud604 - \ud53c\ud574\uc57c \ud560 \ubc29\uc2dd\ndef find_and_process_products(products, category, min_price):\n    # \uccab \ubc88\uc9f8 \ub9e4\uce6d \uc81c\ud488 \ucc3e\uae30\n    target_product = None\n    for product in products:\n        if product.category == category and product.price &gt;= min_price:\n            target_product = product\n            break\n\n    if not target_product:\n        return []\n\n    # \uad00\ub828 \uc81c\ud488\ub4e4 \ubcc0\ud658\n    related = []\n    for product in products:\n        if (product.category == category and \n            product.id != target_product.id and \n            product.price &gt; 0):\n            discounted = product.price * 0.9\n            related.append({\n                \"id\": product.id,\n                \"name\": product.name,\n                \"original_price\": product.price,\n                \"discounted_price\": discounted\n            })\n\n    return related\n</code></pre></p> <p>\u2705 \uc88b\uc740 \uc608: RFS HOF Swift \uc2a4\ud0c0\uc77c \uc0ac\uc6a9 <pre><code>from rfs.hof.collections import (\n    first, compact_map, partition, group_by\n)\n\ndef find_and_process_products(products, category: str, min_price: float):\n    \"\"\"\uc81c\ud488\uc744 \ucc3e\uace0 \uad00\ub828 \uc81c\ud488\ub4e4\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.\"\"\"\n\n    # first\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc870\uac74\uc5d0 \ub9de\ub294 \uccab \ubc88\uc9f8 \uc81c\ud488 \ucc3e\uae30 (Swift \uc2a4\ud0c0\uc77c)\n    target_product = first(\n        products, \n        lambda p: p.category == category and p.price &gt;= min_price\n    )\n\n    if not target_product:\n        return []\n\n    # compact_map\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\uacfc \ud544\ud130\ub9c1\uc744 \ub3d9\uc2dc\uc5d0 (Swift \uc2a4\ud0c0\uc77c)\n    def transform_related_product(product) -&gt; Optional[dict]:\n        \"\"\"\uad00\ub828 \uc81c\ud488\uc744 \ubcc0\ud658\ud569\ub2c8\ub2e4. None\uc774\uba74 \ud544\ud130\ub9c1\ub429\ub2c8\ub2e4.\"\"\"\n        if (product.category == category and \n            product.id != target_product.id and \n            product.price &gt; 0):\n            return {\n                \"id\": product.id,\n                \"name\": product.name,\n                \"original_price\": product.price,\n                \"discounted_price\": product.price * 0.9\n            }\n        return None  # \uc870\uac74\uc5d0 \ub9de\uc9c0 \uc54a\uc73c\uba74 None \ubc18\ud658\n\n    return compact_map(transform_related_product, products)\n\n# \uace0\uae09 \uc608\uc81c: \uc81c\ud488 \ubd84\ub958 \ubc0f \ud1b5\uacc4\ndef analyze_product_categories(products):\n    \"\"\"\uc81c\ud488\uc744 \ubd84\uc11d\ud558\uace0 \uce74\ud14c\uace0\ub9ac\ubcc4 \ud1b5\uacc4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n\n    # partition\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc7ac\uace0\uac00 \uc788\ub294 \uc81c\ud488\uacfc \uc5c6\ub294 \uc81c\ud488\uc73c\ub85c \ubd84\ub9ac\n    in_stock, out_of_stock = partition(lambda p: p.stock &gt; 0, products)\n\n    # group_by\ub97c \uc0ac\uc6a9\ud558\uc5ec \uce74\ud14c\uace0\ub9ac\ubcc4\ub85c \uadf8\ub8f9\ud654\n    categories = group_by(lambda p: p.category, in_stock)\n\n    # \uac01 \uce74\ud14c\uace0\ub9ac\ubcc4 \ud1b5\uacc4 \uacc4\uc0b0\n    stats = {}\n    for category, items in categories.items():\n        stats[category] = {\n            \"count\": len(items),\n            \"avg_price\": sum(p.price for p in items) / len(items),\n            \"total_stock\": sum(p.stock for p in items),\n            \"premium_items\": len([p for p in items if p.price &gt; 100])\n        }\n\n    return {\n        \"in_stock_count\": len(in_stock),\n        \"out_of_stock_count\": len(out_of_stock),\n        \"categories\": stats\n    }\n</code></pre></p>"},{"location":"16-hof-usage-guide/#5-hof","title":"5. \ube44\ub3d9\uae30 HOF \ud65c\uc6a9","text":"<p>\u274c \ub098\uc05c \uc608: \uc218\ub3d9 \ube44\ub3d9\uae30 \ucc98\ub9ac <pre><code># \ucee4\uc2a4\ud140 \uad6c\ud604 - \ud53c\ud574\uc57c \ud560 \ubc29\uc2dd\nasync def fetch_user_data_batch(user_ids):\n    results = []\n    for user_id in user_ids:\n        try:\n            user = await fetch_user(user_id)\n            if user:\n                try:\n                    profile = await fetch_profile(user.profile_id)\n                    results.append({\"user\": user, \"profile\": profile})\n                except Exception:\n                    results.append({\"user\": user, \"profile\": None})\n        except Exception:\n            pass\n    return results\n</code></pre></p> <p>\u2705 \uc88b\uc740 \uc608: RFS HOF \ube44\ub3d9\uae30 \uc0ac\uc6a9 <pre><code>from rfs.hof.async_hof import async_map, async_filter, async_retry\nfrom rfs.hof.monads import Result\nimport asyncio\n\n@async_retry(max_retries=3)\nasync def fetch_user_with_profile(user_id: str) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790\uc640 \ud504\ub85c\ud544\uc744 \ud568\uaed8 \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        # \uc0ac\uc6a9\uc790 \uc870\ud68c\n        user = await fetch_user(user_id)\n        if not user:\n            return Failure(f\"\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {user_id}\")\n\n        # \ud504\ub85c\ud544 \uc870\ud68c\n        profile = await fetch_profile(user.profile_id)\n\n        return Success({\n            \"user\": user,\n            \"profile\": profile,\n            \"user_id\": user_id\n        })\n    except Exception as e:\n        return Failure(f\"\uc870\ud68c \uc2e4\ud328 ({user_id}): {str(e)}\")\n\nasync def fetch_user_data_batch(user_ids: list[str]) -&gt; list[dict]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ubc30\uce58 \ub370\uc774\ud130\ub97c \ube44\ub3d9\uae30\ub85c \uc870\ud68c\ud569\ub2c8\ub2e4.\"\"\"\n\n    # async_map\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcd1\ub82c \ucc98\ub9ac\n    results = await async_map(fetch_user_with_profile, user_ids)\n\n    # \uc131\uacf5\ud55c \uacb0\uacfc\ub9cc \ud544\ud130\ub9c1\ud558\uace0 \ucd94\ucd9c\n    successful_results = [\n        result.unwrap() for result in results \n        if result.is_success()\n    ]\n\n    return successful_results\n\n# \uc0ac\uc6a9 \uc608\uc81c\nasync def main():\n    user_ids = [\"user1\", \"user2\", \"user3\", \"user4\", \"user5\"]\n    batch_results = await fetch_user_data_batch(user_ids)\n    print(f\"\uc131\uacf5\uc801\uc73c\ub85c \uc870\ud68c\ub41c \uc0ac\uc6a9\uc790: {len(batch_results)}\uba85\")\n</code></pre></p>"},{"location":"16-hof-usage-guide/#_2","title":"\ud83c\udfaf \uc2e4\uc81c \ud504\ub85c\ub355\uc158 \ud65c\uc6a9 \uc608\uc81c","text":""},{"location":"16-hof-usage-guide/#1-api","title":"1. API \uc751\ub2f5 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778","text":"<pre><code>from rfs.hof.core import pipe, curry\nfrom rfs.hof.collections import compact_map, group_by, first\nfrom rfs.hof.monads import Result\nfrom rfs.core.result import Success, Failure\n\n@curry\ndef validate_api_response(schema: dict, response: dict) -&gt; Result[dict, str]:\n    \"\"\"API \uc751\ub2f5\uc744 \uc2a4\ud0a4\ub9c8\ub85c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    required_fields = schema.get(\"required\", [])\n    for field in required_fields:\n        if field not in response:\n            return Failure(f\"\ud544\uc218 \ud544\ub4dc \ub204\ub77d: {field}\")\n    return Success(response)\n\ndef normalize_response(response: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc751\ub2f5\uc744 \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.\"\"\"\n    normalized = {\n        \"id\": response.get(\"id\"),\n        \"name\": response.get(\"name\", \"\").strip(),\n        \"email\": response.get(\"email\", \"\").lower(),\n        \"created_at\": response.get(\"created_at\"),\n        \"metadata\": response.get(\"metadata\", {})\n    }\n    return Success(normalized)\n\ndef enrich_with_cache(response: dict) -&gt; Result[dict, str]:\n    \"\"\"\uce90\uc2dc\uc5d0\uc11c \ucd94\uac00 \uc815\ubcf4\ub85c \ubcf4\uac15\ud569\ub2c8\ub2e4.\"\"\"\n    user_id = response[\"id\"]\n    cached_data = get_from_cache(f\"user:{user_id}\")\n\n    enriched = {\n        **response,\n        \"permissions\": cached_data.get(\"permissions\", []) if cached_data else [],\n        \"last_login\": cached_data.get(\"last_login\") if cached_data else None\n    }\n    return Success(enriched)\n\n# \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\ndef create_api_processor(schema: dict):\n    \"\"\"API \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return pipe(\n        validate_api_response(schema),  # \ucee4\ub9c1\ub41c \ud568\uc218 \uc0ac\uc6a9\n        lambda result: result.bind(normalize_response),\n        lambda result: result.bind(enrich_with_cache)\n    )\n\n# \uc0ac\uc6a9\nuser_schema = {\n    \"required\": [\"id\", \"name\", \"email\"],\n    \"optional\": [\"created_at\", \"metadata\"]\n}\n\nprocess_user_response = create_api_processor(user_schema)\n\n# API \uc751\ub2f5 \ucc98\ub9ac\napi_response = {\n    \"id\": \"123\",\n    \"name\": \"  \uae40\ucca0\uc218  \",\n    \"email\": \"KIM@EXAMPLE.COM\",\n    \"created_at\": \"2024-01-15T10:00:00Z\"\n}\n\nresult = process_user_response(api_response)\nif result.is_success():\n    processed_user = result.unwrap()\n    print(f\"\ucc98\ub9ac \uc644\ub8cc: {processed_user['name']} ({processed_user['email']})\")\n</code></pre>"},{"location":"16-hof-usage-guide/#2","title":"2. \ub370\uc774\ud130 \ubd84\uc11d \ud30c\uc774\ud504\ub77c\uc778","text":"<pre><code>from rfs.hof.collections import (\n    group_by, partition, compact_map, fold_left,\n    first, last, drop_while, take_while\n)\nfrom rfs.hof.core import compose, curry\n\n@curry\ndef calculate_metrics(metric_type: str, orders: list) -&gt; dict:\n    \"\"\"\uc8fc\ubb38 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n    match metric_type:\n        case \"revenue\":\n            return {\n                \"total\": sum(o[\"amount\"] for o in orders),\n                \"average\": sum(o[\"amount\"] for o in orders) / len(orders) if orders else 0,\n                \"count\": len(orders)\n            }\n        case \"frequency\":\n            customer_orders = group_by(lambda o: o[\"customer_id\"], orders)\n            return {\n                \"unique_customers\": len(customer_orders),\n                \"repeat_customers\": len([c for c, ords in customer_orders.items() if len(ords) &gt; 1]),\n                \"avg_orders_per_customer\": len(orders) / len(customer_orders) if customer_orders else 0\n            }\n        case _:\n            return {}\n\ndef analyze_sales_trends(orders: list) -&gt; dict:\n    \"\"\"\ub9e4\ucd9c \ud2b8\ub80c\ub4dc\ub97c \ubd84\uc11d\ud569\ub2c8\ub2e4.\"\"\"\n\n    # \ub0a0\uc9dc\ubcc4\ub85c \uc8fc\ubb38 \uadf8\ub8f9\ud654\n    daily_orders = group_by(\n        lambda o: o[\"created_at\"][:10],  # YYYY-MM-DD\ub9cc \ucd94\ucd9c\n        orders\n    )\n\n    # \uace0\uac00\uce58 vs \uc800\uac00\uce58 \uc8fc\ubb38 \ubd84\ub9ac\n    high_value, low_value = partition(lambda o: o[\"amount\"] &gt; 1000, orders)\n\n    # \ucd5c\uadfc 30\uc77c \uc8fc\ubb38\ub9cc \ud544\ud130\ub9c1 (take_while \uc0ac\uc6a9)\n    sorted_orders = sorted(orders, key=lambda o: o[\"created_at\"], reverse=True)\n    recent_orders = take_while(\n        lambda o: is_within_days(o[\"created_at\"], 30),\n        sorted_orders\n    )\n\n    # \uac01 \uc138\uadf8\uba3c\ud2b8\ubcc4 \uba54\ud2b8\ub9ad \uacc4\uc0b0 (\ucee4\ub9c1 \ud65c\uc6a9)\n    calculate_revenue = calculate_metrics(\"revenue\")\n    calculate_frequency = calculate_metrics(\"frequency\")\n\n    return {\n        \"daily_trends\": {\n            date: calculate_revenue(day_orders)\n            for date, day_orders in daily_orders.items()\n        },\n        \"segments\": {\n            \"high_value\": {\n                \"revenue\": calculate_revenue(high_value),\n                \"frequency\": calculate_frequency(high_value)\n            },\n            \"low_value\": {\n                \"revenue\": calculate_revenue(low_value),\n                \"frequency\": calculate_frequency(low_value)\n            }\n        },\n        \"recent_performance\": calculate_revenue(recent_orders),\n        \"peak_day\": max(daily_orders.items(), key=lambda x: len(x[1]))[0] if daily_orders else None\n    }\n\ndef is_within_days(date_str: str, days: int) -&gt; bool:\n    \"\"\"\ub0a0\uc9dc\uac00 \uc9c0\uc815\ub41c \uc77c\uc218 \ub0b4\uc5d0 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\"\"\"\n    from datetime import datetime, timedelta\n    order_date = datetime.fromisoformat(date_str.replace('Z', '+00:00'))\n    cutoff = datetime.now() - timedelta(days=days)\n    return order_date &gt;= cutoff\n</code></pre>"},{"location":"16-hof-usage-guide/#3-di-hof-rule-3","title":"3. \uc124\uc815/DI HOF \ud328\ud134 (Rule 3)","text":"<p>\u2705 \uc124\uc815 \uad00\ub9ac\uc5d0\uc11c HOF \ud65c\uc6a9</p> <pre><code>from rfs.hof.core import pipe, curry, partial\nfrom rfs.hof.collections import compact_map, merging\nfrom rfs.hof.monads import Maybe, Result\nfrom rfs.core.result import Success, Failure\n\n@curry\ndef validate_config_field(field_name: str, validator: callable, config: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc124\uc815 \ud544\ub4dc\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    if field_name not in config:\n        return Failure(f\"\ud544\uc218 \uc124\uc815 \ub204\ub77d: {field_name}\")\n\n    value = config[field_name]\n    if not validator(value):\n        return Failure(f\"\uc798\ubabb\ub41c \uc124\uc815 \uac12: {field_name} = {value}\")\n\n    return Success(config)\n\ndef load_config_from_env() -&gt; dict:\n    \"\"\"\ud658\uacbd \ubcc0\uc218\uc5d0\uc11c \uc124\uc815\uc744 \ub85c\ub4dc\ud569\ub2c8\ub2e4.\"\"\"\n    import os\n    env_config = {}\n\n    # RFS_ \uc811\ub450\uc0ac\uac00 \uc788\ub294 \ud658\uacbd \ubcc0\uc218\ub9cc \uc218\uc9d1\n    rfs_vars = {k: v for k, v in os.environ.items() if k.startswith(\"RFS_\")}\n\n    for key, value in rfs_vars.items():\n        config_key = key[4:].lower()  # RFS_ \uc81c\uac70\ud558\uace0 \uc18c\ubb38\uc790\ub85c\n\n        # \ud0c0\uc785 \ubcc0\ud658\n        if value.lower() in ('true', 'false'):\n            env_config[config_key] = value.lower() == 'true'\n        elif value.isdigit():\n            env_config[config_key] = int(value)\n        else:\n            env_config[config_key] = value\n\n    return env_config\n\ndef apply_config_defaults(config: dict) -&gt; dict:\n    \"\"\"\uae30\ubcf8 \uc124\uc815\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n    defaults = {\n        \"debug\": False,\n        \"port\": 8080,\n        \"max_connections\": 100,\n        \"timeout\": 30,\n        \"log_level\": \"INFO\"\n    }\n\n    # merging\uc744 \uc0ac\uc6a9\ud558\uc5ec \uae30\ubcf8\uac12\uacfc \ubcd1\ud569 (\uae30\uc874\uac12 \uc6b0\uc120)\n    return merging(defaults, config, lambda default, current: current)\n\ndef transform_config_values(config: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc124\uc815\uac12\uc744 \ubcc0\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    transformed = {}\n\n    for key, value in config.items():\n        match key:\n            case \"port\":\n                if not (1 &lt;= value &lt;= 65535):\n                    return Failure(f\"\uc798\ubabb\ub41c \ud3ec\ud2b8 \ubc88\ud638: {value}\")\n                transformed[key] = value\n            case \"log_level\":\n                if value.upper() not in [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]:\n                    return Failure(f\"\uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ub85c\uadf8 \ub808\ubca8: {value}\")\n                transformed[key] = value.upper()\n            case \"timeout\":\n                if value &lt;= 0:\n                    return Failure(f\"\ud0c0\uc784\uc544\uc6c3\uc740 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4: {value}\")\n                transformed[key] = value\n            case _:\n                transformed[key] = value\n\n    return Success(transformed)\n\n# \uac80\uc99d \ud568\uc218\ub4e4 \uc815\uc758 (\ucee4\ub9c1\uc5d0\uc11c \uc0ac\uc6a9)\nis_positive_int = lambda x: isinstance(x, int) and x &gt; 0\nis_valid_log_level = lambda x: isinstance(x, str) and x.upper() in [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]\nis_boolean = lambda x: isinstance(x, bool)\n\n# \uc124\uc815 \ub85c\ub4dc \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\nload_and_validate_config = pipe(\n    load_config_from_env,\n    apply_config_defaults,\n    transform_config_values,\n    lambda result: result.bind(validate_config_field(\"port\", is_positive_int)),\n    lambda result: result.bind(validate_config_field(\"debug\", is_boolean)),\n    lambda result: result.bind(validate_config_field(\"log_level\", is_valid_log_level))\n)\n\n# \uc0ac\uc6a9\nconfig_result = load_and_validate_config()\nif config_result.is_success():\n    config = config_result.unwrap()\n    print(f\"\uc124\uc815 \ub85c\ub4dc \uc644\ub8cc: \ud3ec\ud2b8 {config['port']}, \ub514\ubc84\uadf8 {config['debug']}\")\nelse:\n    error = config_result.unwrap_error()\n    print(f\"\uc124\uc815 \ub85c\ub4dc \uc2e4\ud328: {error}\")\n</code></pre>"},{"location":"16-hof-usage-guide/#di","title":"\ud83c\udfd7\ufe0f \uace0\uae09 \ud328\ud134: \uc18c\ub2e8\uc704 + \ud30c\uc774\ud504\ub77c\uc778 + \uc124\uc815/DI","text":""},{"location":"16-hof-usage-guide/#_3","title":"\ud1b5\ud569 \uc608\uc81c: \uc804\uc790\uc0c1\uac70\ub798 \uc8fc\ubb38 \ucc98\ub9ac \uc2dc\uc2a4\ud15c","text":"<pre><code>from rfs.hof.core import pipe, curry, compose\nfrom rfs.hof.collections import compact_map, partition, first, group_by\nfrom rfs.hof.monads import Maybe, Result\nfrom rfs.core.result import Success, Failure\nfrom rfs.core.config import get_config\n\n# Rule 3: \uc124\uc815/DI\uc5d0\uc11c\ub3c4 HOF \ud65c\uc6a9\n@curry\ndef with_config(config_key: str, func: callable, *args):\n    \"\"\"\uc124\uc815\uac12\uacfc \ud568\uaed8 \ud568\uc218\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    config_value = get_config(config_key)\n    return func(config_value, *args)\n\n@curry\ndef validate_with_rules(rule_set: str, data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc124\uc815\ub41c \uaddc\uce59\uc73c\ub85c \ub370\uc774\ud130\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    rules = get_config(f\"validation.{rule_set}\")\n\n    for rule_name, rule_func in rules.items():\n        if not rule_func(data):\n            return Failure(f\"\uac80\uc99d \uc2e4\ud328: {rule_name}\")\n\n    return Success(data)\n\n# Rule 1: \uc18c\ub2e8\uc704 \ud568\uc218\ub4e4\ndef calculate_item_total(item: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0c1\ud488 \ucd1d\uc561\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        total = item['price'] * item['quantity']\n        return Success({**item, 'total': total})\n    except KeyError as e:\n        return Failure(f\"\ud544\uc218 \ud544\ub4dc \ub204\ub77d: {e}\")\n\ndef apply_item_discount(discount_rate: float, item: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0c1\ud488\uc5d0 \ud560\uc778\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n    if 0 &lt;= discount_rate &lt;= 1:\n        discounted_total = item['total'] * (1 - discount_rate)\n        return Success({**item, 'discounted_total': discounted_total})\n    return Failure(\"\uc798\ubabb\ub41c \ud560\uc778\uc728\uc785\ub2c8\ub2e4\")\n\ndef validate_inventory(item: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc7ac\uace0\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\"\"\"\n    available_stock = get_inventory_count(item['product_id'])\n    if available_stock &gt;= item['quantity']:\n        return Success(item)\n    return Failure(f\"\uc7ac\uace0 \ubd80\uc871: {item['product_id']}\")\n\ndef calculate_shipping(items: list, address: dict) -&gt; Result[float, str]:\n    \"\"\"\ubc30\uc1a1\ube44\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n    total_weight = sum(item.get('weight', 0) for item in items)\n    shipping_rates = get_config('shipping.rates')\n\n    base_rate = shipping_rates.get(address['zone'], shipping_rates['default'])\n    shipping_cost = base_rate + (total_weight * 0.5)\n\n    return Success(shipping_cost)\n\ndef apply_tax_rate(tax_rate: float, total: float) -&gt; float:\n    \"\"\"\uc138\uae08\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n    return total * (1 + tax_rate)\n\n# Rule 2: \ud30c\uc774\ud504\ub77c\uc778\uc73c\ub85c \uc18c\ub2e8\uc704\ub4e4 \ud1b5\ud569\n# \uc0c1\ud488 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\nprocess_order_item = pipe(\n    calculate_item_total,\n    lambda result: result.bind(with_config('discount.member_rate', apply_item_discount)),\n    lambda result: result.bind(validate_inventory)\n)\n\n# \uc8fc\ubb38 \uc804\uccb4 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\ndef create_order_pipeline(customer_type: str):\n    \"\"\"\uace0\uac1d \ud0c0\uc785\uc5d0 \ub530\ub978 \uc8fc\ubb38 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n\n    def process_order_items(order: dict) -&gt; Result[dict, str]:\n        \"\"\"\ubaa8\ub4e0 \uc0c1\ud488\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.\"\"\"\n        items = order.get('items', [])\n\n        # compact_map\uc73c\ub85c \uac01 \uc0c1\ud488 \ucc98\ub9ac, \uc2e4\ud328\ud55c \uac83\uc740 \uc790\ub3d9\uc73c\ub85c \uc81c\uc678\n        def process_item_safe(item):\n            result = process_order_item(item)\n            return result.unwrap() if result.is_success() else None\n\n        processed_items = compact_map(process_item_safe, items)\n\n        if not processed_items:\n            return Failure(\"\ucc98\ub9ac \uac00\ub2a5\ud55c \uc0c1\ud488\uc774 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n        return Success({**order, 'items': processed_items})\n\n    def calculate_order_totals(order: dict) -&gt; Result[dict, str]:\n        \"\"\"\uc8fc\ubb38 \ucd1d\uc561\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n        items_total = sum(item.get('discounted_total', item['total']) for item in order['items'])\n\n        # \ubc30\uc1a1\ube44 \uacc4\uc0b0\n        shipping_result = calculate_shipping(order['items'], order['shipping_address'])\n        if not shipping_result.is_success():\n            return Failure(shipping_result.unwrap_error())\n\n        shipping_cost = shipping_result.unwrap()\n\n        # \uc138\uae08 \uacc4\uc0b0 (\uace0\uac1d \ud0c0\uc785\ubcc4 \ucc28\ub4f1 \uc801\uc6a9)\n        tax_rate = get_config(f'tax.{customer_type}', 0.1)  # \uae30\ubcf8 10%\n        final_total = apply_tax_rate(tax_rate, items_total + shipping_cost)\n\n        return Success({\n            **order,\n            'subtotal': items_total,\n            'shipping_cost': shipping_cost,\n            'tax_rate': tax_rate,\n            'final_total': final_total\n        })\n\n    def validate_payment_method(order: dict) -&gt; Result[dict, str]:\n        \"\"\"\uacb0\uc81c \ubc29\ubc95\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n        return validate_with_rules(f'payment.{customer_type}', order)\n\n    def reserve_inventory(order: dict) -&gt; Result[dict, str]:\n        \"\"\"\uc7ac\uace0\ub97c \uc608\uc57d\ud569\ub2c8\ub2e4.\"\"\"\n        try:\n            for item in order['items']:\n                reserve_stock(item['product_id'], item['quantity'])\n            return Success({**order, 'inventory_reserved': True})\n        except Exception as e:\n            return Failure(f\"\uc7ac\uace0 \uc608\uc57d \uc2e4\ud328: {str(e)}\")\n\n    # \uace0\uac1d \ud0c0\uc785\ubcc4 \ub9de\ucda4\ud615 \ud30c\uc774\ud504\ub77c\uc778\n    return pipe(\n        process_order_items,\n        lambda result: result.bind(calculate_order_totals),\n        lambda result: result.bind(validate_payment_method),\n        lambda result: result.bind(reserve_inventory)\n    )\n\n# \uc0ac\uc6a9 \uc608\uc81c\norder_data = {\n    'customer_id': 'CUST123',\n    'items': [\n        {'product_id': 'P001', 'price': 100, 'quantity': 2, 'weight': 1.5},\n        {'product_id': 'P002', 'price': 50, 'quantity': 1, 'weight': 0.8}\n    ],\n    'shipping_address': {'zone': 'domestic'},\n    'payment_method': 'credit_card'\n}\n\n# VIP \uace0\uac1d\uc6a9 \ud30c\uc774\ud504\ub77c\uc778\nvip_order_pipeline = create_order_pipeline('vip')\nresult = vip_order_pipeline(order_data)\n\nif result.is_success():\n    processed_order = result.unwrap()\n    print(f\"\uc8fc\ubb38 \ucc98\ub9ac \uc644\ub8cc: \ucd1d\uc561 {processed_order['final_total']}\uc6d0\")\nelse:\n    print(f\"\uc8fc\ubb38 \ucc98\ub9ac \uc2e4\ud328: {result.unwrap_error()}\")\n\n# \uc77c\ubc18 \uace0\uac1d\uc6a9 \ud30c\uc774\ud504\ub77c\uc778\uc740 \ub2e4\ub978 \uaddc\uce59 \uc801\uc6a9\nregular_order_pipeline = create_order_pipeline('regular')\n</code></pre> <p>\ud83c\udfaf \ud1b5\ud569 \ud328\ud134\uc758 \uc7a5\uc810</p> <ol> <li>\uc870\ud569 \uac00\ub2a5\uc131: \uac01 \uc18c\ub2e8\uc704\uac00 \ub3c5\ub9bd\uc801\uc774\ub77c \ub2e4\uc591\ud55c \uc870\ud569 \uac00\ub2a5</li> <li>\ud14c\uc2a4\ud2b8 \uc6a9\uc774\uc131: \uac01 \ud568\uc218\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8 \uac00\ub2a5</li> <li>\uc7ac\uc0ac\uc6a9\uc131: \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub2e4\ub978 \ucee8\ud14d\uc2a4\ud2b8\uc5d0\uc11c\ub3c4 \uc7ac\uc0ac\uc6a9</li> <li>\uc5d0\ub7ec \ucd94\uc801: \ud30c\uc774\ud504\ub77c\uc778\uc744 \ud1b5\ud574 \uc815\ud655\ud55c \uc2e4\ud328 \uc9c0\uc810 \ud30c\uc545</li> <li>\uc124\uc815 \uc8fc\ub3c4: \ucf54\ub4dc \ubcc0\uacbd \uc5c6\uc774 \uc124\uc815\uc73c\ub85c \ub3d9\uc791 \uc81c\uc5b4</li> </ol>"},{"location":"16-hof-usage-guide/#hof_2","title":"\ud83d\udccb HOF \uc0ac\uc6a9 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":""},{"location":"16-hof-usage-guide/#_4","title":"\u2705 \uc0c8\ub85c\uc6b4 \ud568\uc218\ud615 \uac1c\ubc1c \uaddc\uce59 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":""},{"location":"16-hof-usage-guide/#rule-1","title":"Rule 1: \uc18c\ub2e8\uc704 \uac1c\ubc1c \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> \uac01 \ud568\uc218\ub294 5-15\uc904 \ub0b4\uc678\ub85c \uc791\uc131</li> <li> \ud568\uc218\ub2f9 \ud558\ub098\uc758 \uba85\ud655\ud55c \ucc45\uc784\ub9cc \uc218\ud589</li> <li> \ubaa8\ub4e0 \ud568\uc218\uac00 Result \ud0c0\uc785 \ubc18\ud658\uc73c\ub85c \uc5d0\ub7ec \ucc98\ub9ac \uba85\uc2dc</li> <li> \ubd80\uc218 \ud6a8\uacfc(side effect) \ucd5c\uc18c\ud654 \ubc0f \uba85\uc2dc\uc801 \ubd84\ub9ac</li> <li> \uc21c\uc218 \ud568\uc218 \uc6b0\uc120, \ud544\uc694\uc2dc\uc5d0\ub9cc \ubd88\uc21c \ud568\uc218 \uc0ac\uc6a9</li> <li> \ucee4\ub9c1\uacfc \ubd80\ubd84 \uc801\uc6a9\uc73c\ub85c \uc7ac\uc0ac\uc6a9\uc131 \ud5a5\uc0c1</li> <li> \ud568\uc218 \uc774\ub984\uc73c\ub85c \uc758\ub3c4\uc640 \ub3d9\uc791 \uba85\ud655\ud788 \ud45c\ud604</li> </ul>"},{"location":"16-hof-usage-guide/#rule-2","title":"Rule 2: \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> \uc18c\ub2e8\uc704 \uac04 \uc5f0\uacb0\uc740 <code>pipe()</code> \ub610\ub294 \ubaa8\ub098\ub4dc \uccb4\uc774\ub2dd\ub9cc \uc0ac\uc6a9</li> <li> \uc911\uac04 \uacb0\uacfc\ub97c \uc784\uc2dc \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uc9c0 \uc54a\uc74c</li> <li> \uc870\uac74\ubd80 \ub85c\uc9c1\ub3c4 \ud568\uc218\ud615 \ud328\ud134\uc73c\ub85c \ud45c\ud604</li> <li> \uc5d0\ub7ec\uac00 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ud1b5\ud574 \uc790\ub3d9\uc73c\ub85c \uc804\ud30c\ub428</li> <li> \uac01 \ud30c\uc774\ud504\ub77c\uc778\uc774 \ud558\ub098\uc758 \uc644\uc804\ud55c \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ud45c\ud604</li> <li> \ud30c\uc774\ud504\ub77c\uc778 \uc790\uccb4\uac00 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub2e8\uc704\ub85c \uc124\uacc4</li> <li> \ube44\ub3d9\uae30 \uc791\uc5c5\ub3c4 <code>async_pipe</code> \ud328\ud134 \uc0ac\uc6a9</li> </ul>"},{"location":"16-hof-usage-guide/#rule-3-di-hof","title":"Rule 3: \uc124\uc815/DI HOF \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> \uc124\uc815 \ub85c\ub4dc\uc640 \uac80\uc99d\uc5d0 HOF \ud30c\uc774\ud504\ub77c\uc778 \uc0ac\uc6a9</li> <li> \uc758\uc874\uc131 \uc8fc\uc785\uc5d0\uc11c \ucee4\ub9c1\uacfc \ubd80\ubd84 \uc801\uc6a9 \ud65c\uc6a9</li> <li> \uc124\uc815 \uae30\ubc18 \uc870\uac74\ubd80 \ub85c\uc9c1\uc744 HOF\ub85c \ucd94\uc0c1\ud654</li> <li> \ud658\uacbd\ubcc4 \uc124\uc815\uc744 \ud568\uc218\ud615 \ud328\ud134\uc73c\ub85c \uad00\ub9ac</li> <li> \uc124\uc815 \ubcc0\uacbd\uc774 \ucf54\ub4dc \uc218\uc815 \uc5c6\uc774 \ub3d9\uc791 \ubcc0\uacbd \uac00\ub2a5</li> <li> \uc124\uc815 \uac80\uc99d\uacfc \ubcc0\ud658\ub3c4 \ud30c\uc774\ud504\ub77c\uc778\uc73c\ub85c \ucc98\ub9ac</li> <li> DI \ucee8\ud14c\uc774\ub108\ubcf4\ub2e4 HOF \uae30\ubc18 \uc8fc\uc785 \uc6b0\uc120 \uc0ac\uc6a9</li> </ul>"},{"location":"16-hof-usage-guide/#hof_3","title":"\u2705 \uc6b0\uc120 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 HOF\ub4e4","text":""},{"location":"16-hof-usage-guide/#_5","title":"\ud568\uc218 \ud569\uc131","text":"<ul> <li> <code>pipe()</code> - \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud568\uc218 \uc5f0\uacb0</li> <li> <code>compose()</code> - \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ud568\uc218 \uc5f0\uacb0</li> <li> <code>curry()</code> - \ubd80\ubd84 \uc801\uc6a9\uc744 \uc704\ud55c \ucee4\ub9c1</li> <li> <code>partial()</code> - \uc778\uc218 \ubd80\ubd84 \uc801\uc6a9</li> </ul>"},{"location":"16-hof-usage-guide/#swift","title":"\uceec\ub809\uc158 \uc5f0\uc0b0 (Swift \uc2a4\ud0c0\uc77c \uc6b0\uc120)","text":"<ul> <li> <code>first()</code> - \uc870\uac74\uc5d0 \ub9de\ub294 \uccab \ubc88\uc9f8 \uc694\uc18c</li> <li> <code>compact_map()</code> - \ubcc0\ud658 + None \ud544\ud130\ub9c1</li> <li> <code>flat_map()</code> - \ubcc0\ud658 + \ud3c9\uba74\ud654</li> <li> <code>partition()</code> - \uc870\uac74\uc73c\ub85c \ubd84\ud560</li> <li> <code>group_by()</code> - \ud0a4\ub85c \uadf8\ub8f9\ud654</li> <li> <code>fold_left()</code> / <code>fold_right()</code> - \ucd95\uc57d \uc5f0\uc0b0</li> </ul>"},{"location":"16-hof-usage-guide/#_6","title":"\ubaa8\ub098\ub4dc \ud328\ud134","text":"<ul> <li> <code>Maybe</code> - \uc635\uc154\ub110 \uac12 \ucc98\ub9ac</li> <li> <code>Result</code> - \uc5d0\ub7ec\uac00 \uc788\ub294 \uc5f0\uc0b0</li> <li> <code>Either</code> - \ub450 \uac00\uc9c0 \ud0c0\uc785 \uc911 \ud558\ub098</li> </ul>"},{"location":"16-hof-usage-guide/#hof_4","title":"\ube44\ub3d9\uae30 HOF","text":"<ul> <li> <code>async_map()</code> - \ube44\ub3d9\uae30 \ub9e4\ud551</li> <li> <code>async_filter()</code> - \ube44\ub3d9\uae30 \ud544\ud130\ub9c1</li> <li> <code>async_retry()</code> - \uc7ac\uc2dc\ub3c4 \ub370\ucf54\ub808\uc774\ud130</li> </ul>"},{"location":"16-hof-usage-guide/#_7","title":"\u274c \ud53c\ud574\uc57c \ud560 \uc548\ud2f0\ud328\ud134","text":"<ol> <li> <p>\ubc18\ubcf5\uc801\uc778 \ub8e8\ud504 \ub300\uc2e0 HOF \uc0ac\uc6a9 <pre><code># \u274c \ud53c\ud560 \uac83\nresult = []\nfor item in items:\n    if condition(item):\n        result.append(transform(item))\n\n# \u2705 HOF \uc0ac\uc6a9\nresult = compact_map(\n    lambda item: transform(item) if condition(item) else None, \n    items\n)\n</code></pre></p> </li> <li> <p>\uc911\ucca9\ub41c \uc608\uc678 \ucc98\ub9ac \ub300\uc2e0 \ubaa8\ub098\ub4dc \uc0ac\uc6a9 <pre><code># \u274c \ud53c\ud560 \uac83\ntry:\n    result1 = operation1()\n    try:\n        result2 = operation2(result1)\n        return result2\n    except Exception:\n        return None\nexcept Exception:\n    return None\n\n# \u2705 \ubaa8\ub098\ub4dc \uc0ac\uc6a9\nreturn (\n    Maybe.from_try(operation1)\n    .bind(lambda r1: Maybe.from_try(lambda: operation2(r1)))\n)\n</code></pre></p> </li> <li> <p>\ucee4\uc2a4\ud140 \ud568\uc218 \ud569\uc131 \ub300\uc2e0 pipe \uc0ac\uc6a9 <pre><code># \u274c \ud53c\ud560 \uac83\ndef process(data):\n    return step3(step2(step1(data)))\n\n# \u2705 pipe \uc0ac\uc6a9\nprocess = pipe(step1, step2, step3)\n</code></pre></p> </li> </ol>"},{"location":"16-hof-usage-guide/#_8","title":"\ud83d\ude80 \uc131\ub2a5 \ucd5c\uc801\ud654 \ud301","text":""},{"location":"16-hof-usage-guide/#1","title":"1. \uc9c0\uc5f0 \ud3c9\uac00 \ud65c\uc6a9","text":"<pre><code>from rfs.hof.collections import take, drop_while\nfrom itertools import islice\n\n# \ud070 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc870\uac74\uc5d0 \ub9de\ub294 \ucc98\uc74c 10\uac1c\ub9cc \ucc98\ub9ac\ndef find_first_matches(large_dataset, condition):\n    return take(10, filter(condition, large_dataset))\n</code></pre>"},{"location":"16-hof-usage-guide/#2_1","title":"2. \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ud30c\uc774\ud504\ub77c\uc778","text":"<pre><code>from rfs.hof.core import pipe\nfrom rfs.hof.collections import chunk\n\n# \ub300\uc6a9\ub7c9 \ub370\uc774\ud130\ub97c \uccad\ud06c \ub2e8\uc704\ub85c \ucc98\ub9ac\nprocess_large_data = pipe(\n    lambda data: chunk(data, 1000),  # 1000\uac1c\uc529 \uccad\ud06c\n    lambda chunks: map(process_chunk, chunks),\n    list\n)\n</code></pre>"},{"location":"16-hof-usage-guide/#3-hof","title":"3. \ubcd1\ub82c \ucc98\ub9ac\uc640 HOF \uacb0\ud569","text":"<pre><code>from concurrent.futures import ProcessPoolExecutor\nfrom rfs.hof.collections import partition\n\ndef parallel_process_with_hof(data, num_workers=4):\n    # \uc791\uc5c5\uc744 \uade0\ub4f1\ud558\uac8c \ubd84\ud560\n    chunks = chunk(data, len(data) // num_workers)\n\n    with ProcessPoolExecutor(max_workers=num_workers) as executor:\n        # \uac01 \uccad\ud06c\ub97c \ubcd1\ub82c\ub85c \ucc98\ub9ac\n        futures = [executor.submit(process_chunk_with_hof, chunk) for chunk in chunks]\n        results = [f.result() for f in futures]\n\n    # \uacb0\uacfc\ub97c \ud3c9\uba74\ud654\n    return flatten(results)\n</code></pre>"},{"location":"16-hof-usage-guide/#_9","title":"\ud83c\udfaf \uc0c8\ub85c\uc6b4 \ud568\uc218\ud615 \uac1c\ubc1c \uaddc\uce59 \uc801\uc6a9 \uac00\uc774\ub4dc","text":""},{"location":"16-hof-usage-guide/#_10","title":"\uae30\uc874 \ucf54\ub4dc\ub97c \ud568\uc218\ud615 \uaddc\uce59\uc73c\ub85c \ubcc0\ud658","text":"<p>1\ub2e8\uacc4: \uc18c\ub2e8\uc704\ub85c \ubd84\ud574 (Rule 1) - \ud070 \ud568\uc218\ub97c \ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59\uc5d0 \ub530\ub77c \ubd84\ud574 - \uac01 \ub2e8\uc704\uac00 \ub3c5\ub9bd\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8 \uac00\ub2a5\ud558\ub3c4\ub85d \ubd84\ub9ac - Result \ud0c0\uc785\uc73c\ub85c \uc5d0\ub7ec \ucc98\ub9ac \uba85\uc2dc\ud654</p> <p>2\ub2e8\uacc4: \ud30c\uc774\ud504\ub77c\uc778\uc73c\ub85c \ud1b5\ud569 (Rule 2) - \ubd84\ud574\ub41c \uc18c\ub2e8\uc704\ub4e4\uc744 <code>pipe()</code> \ub610\ub294 \ubaa8\ub098\ub4dc \uccb4\uc774\ub2dd\uc73c\ub85c \uc5f0\uacb0 - \uc911\uac04 \uc0c1\ud0dc \ubcc0\uc218 \uc81c\uac70, \ub370\uc774\ud130 \ud750\ub984 \uba85\uc2dc\ud654 - \uc870\uac74\ubd80 \ub85c\uc9c1\uc744 \ud568\uc218\ud615 \ubd84\uae30 \ud328\ud134\uc73c\ub85c \ubcc0\ud658</p> <p>3\ub2e8\uacc4: \uc124\uc815/DI HOF \uc801\uc6a9 (Rule 3) - \ud558\ub4dc\ucf54\ub529\ub41c \uac12\ub4e4\uc744 \uc124\uc815 \uae30\ubc18\uc73c\ub85c \uc804\ud658 - \uc758\uc874\uc131 \uc8fc\uc785\uc744 \ucee4\ub9c1\uacfc \ubd80\ubd84 \uc801\uc6a9\uc73c\ub85c \ub300\uccb4 - \ud658\uacbd\ubcc4 \ub3d9\uc791\uc744 HOF \uae30\ubc18 \ucd94\uc0c1\ud654\ub85c \uad00\ub9ac</p>"},{"location":"16-hof-usage-guide/#v433_1","title":"\uc810\uc9c4\uc801 \ub3c4\uc785 \uc804\ub7b5 (v4.3.3)","text":"<p>Phase 1: \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \uac1c\ubc1c - [ ] \ubaa8\ub4e0 \uc2e0\uaddc \uae30\ub2a5\uc744 3\uac00\uc9c0 \uaddc\uce59 \uc801\uc6a9\ud558\uc5ec \uac1c\ubc1c - [ ] \uae30\uc874 \ud328\ud134\uacfc \ube44\uad50\ud558\uc5ec \ud6a8\uacfc \uce21\uc815 - [ ] \ud300\uc6d0\ub4e4\uc5d0\uac8c \uc0c8\ub85c\uc6b4 \ud328\ud134 \uad50\uc721</p> <p>Phase 2: \ud56b\ud53d\uc2a4 \ubc0f \ub9ac\ud329\ud1a0\ub9c1 - [ ] \ubc84\uadf8 \uc218\uc815 \uc2dc \ud574\ub2f9 \ud568\uc218\ub97c \uc18c\ub2e8\uc704\ub85c \ubd84\ud574 - [ ] \uae30\uc874 \ub85c\uc9c1\uc744 \ud30c\uc774\ud504\ub77c\uc778 \ud328\ud134\uc73c\ub85c \ubcc0\ud658 - [ ] \uc124\uc815 \ud558\ub4dc\ucf54\ub529 \ubc1c\uacac \uc2dc HOF \ud328\ud134 \uc801\uc6a9</p> <p>Phase 3: \ub808\uac70\uc2dc \ubaa8\ub4c8 \uc804\ud658 - [ ] \ubcf5\uc7a1\ud55c \ub808\uac70\uc2dc \ubaa8\ub4c8\uc744 \uaddc\uce59\uc5d0 \ub530\ub77c \uc7ac\uad6c\uc131 - [ ] \uae30\uc874 \uc778\ud130\ud398\uc774\uc2a4 \uc720\uc9c0\ud558\uba74\uc11c \ub0b4\ubd80 \uad6c\uc870\ub9cc \ubcc0\uacbd - [ ] A/B \ud14c\uc2a4\ud2b8\ub85c \uc131\ub2a5 \ubc0f \uc720\uc9c0\ubcf4\uc218\uc131 \uac80\uc99d</p> <p>Phase 4: \ud504\ub85c\uc81d\ud2b8 \uc804\uccb4 \ud45c\uc900\ud654 - [ ] \ubaa8\ub4e0 \uc0c8\ub85c\uc6b4 \ucf54\ub4dc\uac00 3\uac00\uc9c0 \uaddc\uce59\uc744 \uc900\uc218 - [ ] \ucf54\ub4dc \ub9ac\ubdf0\uc5d0\uc11c \uaddc\uce59 \uc900\uc218 \uc5ec\ubd80 \uac80\ud1a0 - [ ] \uc790\ub3d9\ud654 \ub3c4\uad6c\ub85c \ud328\ud134 \uc900\uc218 \uac80\uc0ac</p>"},{"location":"16-hof-usage-guide/#_11","title":"\ud300 \ub3c4\uc785 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<p>\uac1c\ubc1c\uc790 \uad50\uc721 - [ ] \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubcf8 \uac1c\ub150 \uad50\uc721 - [ ] RFS HOF \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\ubc95 \uad50\uc721 - [ ] \uc0c8\ub85c\uc6b4 3\uac00\uc9c0 \uaddc\uce59 \uc6cc\ud06c\uc0f5 \uc2e4\uc2dc - [ ] \uc2e4\uc804 \uc608\uc81c\ub97c \ud1b5\ud55c hands-on \uc5f0\uc2b5</p> <p>\ucf54\ub4dc \ud488\uc9c8 \uad00\ub9ac - [ ] \ucf54\ub4dc \ub9ac\ubdf0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \uaddc\uce59 \ubc18\uc601 - [ ] \ub9b0\ud130/\ud0c0\uc785\uccb4\ucee4\uc5d0 HOF \uc0ac\uc6a9 \uac80\uc0ac \ucd94\uac00 - [ ] CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc5d0 \ud568\uc218\ud615 \ud328\ud134 \uac80\uc99d \ub2e8\uacc4 \ucd94\uac00 - [ ] \uba54\ud2b8\ub9ad \uc218\uc9d1: \ud568\uc218 \uae38\uc774, \ud30c\uc774\ud504\ub77c\uc778 \uc0ac\uc6a9\uc728, \uc5d0\ub7ec \ucc98\ub9ac \uba85\uc2dc\uc728</p> <p>\uc131\uacfc \uce21\uc815 - [ ] \ubc84\uadf8 \ubc1c\uc0dd\ub960 \ubcc0\ud654 \ucd94\uc801 - [ ] \ucf54\ub4dc \ub9ac\ubdf0 \uc2dc\uac04 \ub2e8\ucd95 \uce21\uc815 - [ ] \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 \ud5a5\uc0c1\ub3c4 \ud655\uc778 - [ ] \uac1c\ubc1c \uc18d\ub3c4 \ubc0f \uc720\uc9c0\ubcf4\uc218\uc131 \uac1c\uc120\ub3c4 \ud3c9\uac00</p> <p>\uacb0\ub860: RFS Framework v4.3.3\uc758 \uc0c8\ub85c\uc6b4 \ud568\uc218\ud615 \uac1c\ubc1c \uaddc\uce59\uc744 \ud1b5\ud574 \uc18c\ub2e8\uc704 \uac1c\ubc1c, \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569, \uc124\uc815/DI HOF**\ub97c \uccb4\uacc4\uc801\uc73c\ub85c \uc801\uc6a9\ud558\uc138\uc694. \uc774\ub97c \ud1b5\ud574 **\uc870\ud569 \uac00\ub2a5\ud558\uace0, \ud14c\uc2a4\ud2b8\ud558\uae30 \uc27d\uace0, \uc720\uc9c0\ubcf4\uc218\uac00 \uc26c\uc6b4 \uc9c4\uc815\ud55c \ud568\uc218\ud615 \uc2a4\ud0c0\uc77c\uc758 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"16-hof-usage-guide/#_12","title":"\ud83d\udcc8 \uae30\ub300 \ud6a8\uacfc","text":"<p>\ucf54\ub4dc \ud488\uc9c8 \ud5a5\uc0c1 - \ud83c\udfaf \ud568\uc218\uc758 \ud3c9\uade0 \uae38\uc774 50% \ub2e8\ucd95 (\uc18c\ub2e8\uc704 \uac1c\ubc1c) - \ud83d\udd04 \ubcf5\uc7a1\ub3c4 30% \uac10\uc18c (\ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569) - \u2699\ufe0f \uc124\uc815 \ubcc0\uacbd\uc5d0 \ub530\ub978 \ucf54\ub4dc \uc218\uc815 80% \uac10\uc18c (\uc124\uc815/DI HOF)</p> <p>\uac1c\ubc1c \uc0dd\uc0b0\uc131 \uc99d\ub300 - \u2705 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131 \uc2dc\uac04 40% \ub2e8\ucd95 - \ud83d\udc1b \ubc84\uadf8 \ucd94\uc801 \ubc0f \uc218\uc815 \uc2dc\uac04 60% \ub2e8\ucd95 - \ud83d\udd27 \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \uac1c\ubc1c \uc2dc \uae30\uc874 \ucf54\ub4dc \uc7ac\uc0ac\uc6a9\ub960 70% \uc99d\uac00</p> <p>\uc720\uc9c0\ubcf4\uc218\uc131 \uac1c\uc120 - \ud83d\udcd6 \ucf54\ub4dc \uac00\ub3c5\uc131 \ubc0f \uc774\ud574\ub3c4 \ud5a5\uc0c1 - \ud83d\udd04 \ubcc0\uacbd \uc601\ud5a5\ub3c4 \ucd5c\uc18c\ud654 - \ud83d\udccb \ubb38\uc11c\ud654 \uc790\ub3d9\ud654 (\ud568\uc218\ud615 \ud328\ud134 \uc790\uccb4\uac00 \ubb38\uc11c)</p> <p>\uc0c8\ub85c\uc6b4 \ud568\uc218\ud615 \uac1c\ubc1c \uaddc\uce59\uc744 \uc9c0\uae08\ubd80\ud130 \uc801\uc6a9\ud558\uc5ec \ucc28\uc138\ub300 RFS \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud558\uc138\uc694!</p>"},{"location":"17-functional-development-rules/","title":"RFS Framework \ud568\uc218\ud615 \uac1c\ubc1c 3\ub300 \ud544\uc218 \uaddc\uce59","text":""},{"location":"17-functional-development-rules/#_1","title":"\ud83c\udfaf \uac1c\uc694","text":"<p>RFS Framework\uc5d0\uc11c \uc77c\uad00\ub41c \ud568\uc218\ud615 \uac1c\ubc1c \ud328\ud134\uc744 \uc704\ud55c **3\uac00\uc9c0 \ud544\uc218 \uaddc\uce59**\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 RFS Framework \uac1c\ubc1c\uc790\ub294 \uc774 \uaddc\uce59\uc744 \ubc18\ub4dc\uc2dc \uc900\uc218\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"17-functional-development-rules/#3","title":"\ud83d\udccb 3\ub300 \ud544\uc218 \uaddc\uce59","text":"<ol> <li>\uc791\uc740 \ub2e8\uc704 \ud568\uc218\ud615 \uac1c\ubc1c: \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc791\uc740 \ub2e8\uc704\ub85c \ubd84\ud574\ud558\uace0 HOF \ub77c\uc774\ube0c\ub7ec\ub9ac \uc801\uadf9 \ud65c\uc6a9</li> <li>\ud30c\uc774\ud504\ub77c\uc778 \uae30\ubc18 \ud1b5\ud569: \uc791\uc740 \ub2e8\uc704\ub4e4\uc744 \uc870\ud569\ud560 \ub54c \ubc18\ub4dc\uc2dc \ud30c\uc774\ud504\ub77c\uc778 \ud328\ud134 \uc0ac\uc6a9  </li> <li>HOF \uae30\ubc18 \uc124\uc815/\uc8fc\uc785: \uc124\uc815 \uad00\ub9ac\uc640 \uc758\uc874\uc131 \uc8fc\uc785\uc5d0\uc11c HOF \ud328\ud134 \ud65c\uc6a9</li> </ol>"},{"location":"17-functional-development-rules/#1","title":"\ud83d\udd27 \uaddc\uce59 1: \uc791\uc740 \ub2e8\uc704 \ud568\uc218\ud615 \uac1c\ubc1c","text":""},{"location":"17-functional-development-rules/#_2","title":"\ud575\uc2ec \uc6d0\uce59","text":"<ul> <li>\ub2e8\uc77c \ucc45\uc784: \uac01 \ud568\uc218\ub294 \ud558\ub098\uc758 \uba85\ud655\ud55c \uc5ed\ud560\ub9cc \uc218\ud589</li> <li>HOF \uc6b0\uc120: RFS HOF \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc801\uadf9\uc801\uc73c\ub85c \ud65c\uc6a9</li> <li>\ubd88\ubcc0\uc131: \ub370\uc774\ud130 \ubcc0\uacbd \ub300\uc2e0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uc0dd\uc131</li> <li>\uc21c\uc218 \ud568\uc218: \ubd80\uc791\uc6a9(side-effect) \ucd5c\uc18c\ud654</li> </ul>"},{"location":"17-functional-development-rules/#_3","title":"\u274c \ub098\uc05c \uc608: \ud070 \ub369\uc5b4\ub9ac \ud568\uc218","text":"<pre><code>def process_user_registration(user_data):\n    \"\"\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d\uc744 \ucc98\ub9ac\ud558\ub294 \ud070 \ud568\uc218 - \ud53c\ud574\uc57c \ud560 \ud328\ud134\"\"\"\n\n    # \ub370\uc774\ud130 \uac80\uc99d\n    if not user_data.get(\"email\"):\n        raise ValueError(\"\uc774\uba54\uc77c\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\")\n    if \"@\" not in user_data.get(\"email\", \"\"):\n        raise ValueError(\"\uc62c\ubc14\ub978 \uc774\uba54\uc77c \ud615\uc2dd\uc774 \uc544\ub2d9\ub2c8\ub2e4\")\n    if len(user_data.get(\"password\", \"\")) &lt; 8:\n        raise ValueError(\"\ube44\ubc00\ubc88\ud638\ub294 8\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\")\n\n    # \ub370\uc774\ud130 \uc815\uc81c\n    cleaned_data = {}\n    cleaned_data[\"email\"] = user_data[\"email\"].lower().strip()\n    cleaned_data[\"name\"] = user_data.get(\"name\", \"\").strip()\n    cleaned_data[\"phone\"] = user_data.get(\"phone\", \"\").replace(\"-\", \"\")\n\n    # \ube44\ubc00\ubc88\ud638 \ud574\uc2f1\n    import hashlib\n    cleaned_data[\"password\"] = hashlib.sha256(\n        user_data[\"password\"].encode()\n    ).hexdigest()\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\n    try:\n        db.users.insert(cleaned_data)\n\n        # \ud658\uc601 \uc774\uba54\uc77c \ubc1c\uc1a1\n        email_service.send(\n            to=cleaned_data[\"email\"],\n            subject=\"\ud658\uc601\ud569\ub2c8\ub2e4!\",\n            template=\"welcome\",\n            data={\"name\": cleaned_data[\"name\"]}\n        )\n\n        # \ub85c\uadf8 \uae30\ub85d\n        logger.info(f\"\uc0c8 \uc0ac\uc6a9\uc790 \ub4f1\ub85d: {cleaned_data['email']}\")\n\n        return {\"success\": True, \"user_id\": cleaned_data[\"id\"]}\n\n    except Exception as e:\n        logger.error(f\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \uc2e4\ud328: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"17-functional-development-rules/#_4","title":"\u2705 \uc88b\uc740 \uc608: \uc791\uc740 \ub2e8\uc704 \ud568\uc218\ud615 \ubd84\ud574","text":"<pre><code>from rfs.hof.core import pipe, curry\nfrom rfs.hof.collections import compact_map, first\nfrom rfs.hof.monads import Maybe, Result\nfrom rfs.core.result import Success, Failure\nfrom typing import Dict, Any\n\n# 1. \uac80\uc99d \ud568\uc218\ub4e4 (\uc791\uc740 \ub2e8\uc704)\ndef validate_email(email: str) -&gt; Result[str, str]:\n    \"\"\"\uc774\uba54\uc77c \uc720\ud6a8\uc131\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    if not email:\n        return Failure(\"\uc774\uba54\uc77c\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\")\n    if \"@\" not in email:\n        return Failure(\"\uc62c\ubc14\ub978 \uc774\uba54\uc77c \ud615\uc2dd\uc774 \uc544\ub2d9\ub2c8\ub2e4\")\n    return Success(email)\n\ndef validate_password(password: str) -&gt; Result[str, str]:\n    \"\"\"\ube44\ubc00\ubc88\ud638 \uc720\ud6a8\uc131\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    if len(password) &lt; 8:\n        return Failure(\"\ube44\ubc00\ubc88\ud638\ub294 8\uc790 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\")\n    return Success(password)\n\ndef validate_name(name: str) -&gt; Result[str, str]:\n    \"\"\"\uc774\ub984 \uc720\ud6a8\uc131\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    cleaned_name = name.strip()\n    if not cleaned_name:\n        return Failure(\"\uc774\ub984\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\")\n    return Success(cleaned_name)\n\n# 2. \ub370\uc774\ud130 \uc815\uc81c \ud568\uc218\ub4e4 (\uc791\uc740 \ub2e8\uc704)\ndef normalize_email(email: str) -&gt; str:\n    \"\"\"\uc774\uba54\uc77c\uc744 \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.\"\"\"\n    return email.lower().strip()\n\ndef normalize_phone(phone: str) -&gt; str:\n    \"\"\"\uc804\ud654\ubc88\ud638\ub97c \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.\"\"\"\n    return phone.replace(\"-\", \"\").replace(\" \", \"\")\n\ndef hash_password(password: str) -&gt; str:\n    \"\"\"\ube44\ubc00\ubc88\ud638\ub97c \ud574\uc2dc\ud654\ud569\ub2c8\ub2e4.\"\"\"\n    import hashlib\n    return hashlib.sha256(password.encode()).hexdigest()\n\n# 3. \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \ud568\uc218\ub4e4 (\uc791\uc740 \ub2e8\uc704)\ndef create_user_record(user_data: dict) -&gt; dict:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub808\ucf54\ub4dc\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return {\n        \"email\": normalize_email(user_data[\"email\"]),\n        \"name\": user_data[\"name\"].strip(),\n        \"phone\": normalize_phone(user_data.get(\"phone\", \"\")),\n        \"password\": hash_password(user_data[\"password\"]),\n        \"created_at\": datetime.now().isoformat()\n    }\n\n# HOF\ub97c \uc0ac\uc6a9\ud55c \uac80\uc99d \uccb4\uc778\n@curry\ndef validate_user_field(validator: callable, field_name: str, user_data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\uc758 \ud2b9\uc815 \ud544\ub4dc\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    field_value = user_data.get(field_name, \"\")\n    return validator(field_value).map(lambda _: user_data)\n\n# 4. \ud1b5\ud569 \uac80\uc99d \ud568\uc218 (HOF \ud65c\uc6a9)\ndef validate_user_data(user_data: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc885\ud569\uc801\uc73c\ub85c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    # curry\ub97c \ud65c\uc6a9\ud55c \ubd80\ubd84 \uc801\uc6a9\n    validate_email_field = validate_user_field(validate_email, \"email\")\n    validate_password_field = validate_user_field(validate_password, \"password\")\n    validate_name_field = validate_user_field(validate_name, \"name\")\n\n    # \uac80\uc99d \uccb4\uc778 \uad6c\uc131\n    return (\n        Success(user_data)\n        .bind(validate_email_field)\n        .bind(validate_password_field) \n        .bind(validate_name_field)\n    )\n\ndef save_user_to_db(user_record: dict) -&gt; Result[str, str]:\n    \"\"\"\uc0ac\uc6a9\uc790\ub97c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        user_id = db.users.insert(user_record)\n        return Success(user_id)\n    except Exception as e:\n        return Failure(f\"\uc800\uc7a5 \uc2e4\ud328: {str(e)}\")\n\ndef send_welcome_email(user_record: dict) -&gt; Result[bool, str]:\n    \"\"\"\ud658\uc601 \uc774\uba54\uc77c\uc744 \ubc1c\uc1a1\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        email_service.send(\n            to=user_record[\"email\"],\n            subject=\"\ud658\uc601\ud569\ub2c8\ub2e4!\",\n            template=\"welcome\",\n            data={\"name\": user_record[\"name\"]}\n        )\n        return Success(True)\n    except Exception as e:\n        return Failure(f\"\uc774\uba54\uc77c \ubc1c\uc1a1 \uc2e4\ud328: {str(e)}\")\n\ndef log_user_registration(user_record: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub4f1\ub85d\uc744 \ub85c\uae45\ud569\ub2c8\ub2e4.\"\"\"\n    logger.info(f\"\uc0c8 \uc0ac\uc6a9\uc790 \ub4f1\ub85d: {user_record['email']}\")\n    return Success(user_record)\n</code></pre>"},{"location":"17-functional-development-rules/#2","title":"\ud83d\udd17 \uaddc\uce59 2: \ud30c\uc774\ud504\ub77c\uc778 \uae30\ubc18 \ud1b5\ud569","text":""},{"location":"17-functional-development-rules/#_5","title":"\ud575\uc2ec \uc6d0\uce59","text":"<ul> <li>pipe() \ud544\uc218: \uc791\uc740 \ud568\uc218\ub4e4\uc744 \uc870\ud569\ud560 \ub54c \ubc18\ub4dc\uc2dc <code>pipe()</code> \uc0ac\uc6a9</li> <li>\uc21c\ucc28 \ucc98\ub9ac: \ub370\uc774\ud130\uac00 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ud1b5\ud574 \ub2e8\uacc4\ubcc4\ub85c \ubcc0\ud658</li> <li>\uc5d0\ub7ec \uc804\ud30c: Result \ud328\ud134\uc73c\ub85c \uc5d0\ub7ec\uac00 \uc548\uc804\ud558\uac8c \uc804\ud30c</li> <li>\uac00\ub3c5\uc131: \ub370\uc774\ud130 \ud50c\ub85c\uc6b0\uac00 \uba85\ud655\ud558\uac8c \ud45c\ud604</li> </ul>"},{"location":"17-functional-development-rules/#_6","title":"\u274c \ub098\uc05c \uc608: \uc911\ucca9\ub41c \ud568\uc218 \ud638\ucd9c","text":"<pre><code>def process_user_registration_bad(user_data):\n    \"\"\"\uc911\ucca9\ub41c \ud568\uc218 \ud638\ucd9c - \ud53c\ud574\uc57c \ud560 \ud328\ud134\"\"\"\n\n    # \uae4a\uc740 \uc911\ucca9\uc73c\ub85c \uac00\ub3c5\uc131 \uc800\ud558\n    validation_result = validate_user_data(user_data)\n    if validation_result.is_failure():\n        return validation_result\n\n    user_record = create_user_record(validation_result.unwrap())\n\n    save_result = save_user_to_db(user_record)\n    if save_result.is_failure():\n        return save_result\n\n    user_id = save_result.unwrap()\n    user_record[\"id\"] = user_id\n\n    email_result = send_welcome_email(user_record)\n    if email_result.is_failure():\n        # \uc774\uba54\uc77c \uc2e4\ud328\ub294 \uc804\uccb4 \uc2e4\ud328\ub85c \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc74c\n        logger.warning(f\"\ud658\uc601 \uc774\uba54\uc77c \uc2e4\ud328: {email_result.unwrap_error()}\")\n\n    log_result = log_user_registration(user_record)\n    if log_result.is_failure():\n        logger.warning(f\"\ub85c\uae45 \uc2e4\ud328: {log_result.unwrap_error()}\")\n\n    return Success({\"user_id\": user_id, \"email\": user_record[\"email\"]})\n</code></pre>"},{"location":"17-functional-development-rules/#pipe","title":"\u2705 \uc88b\uc740 \uc608: pipe\ub97c \uc0ac\uc6a9\ud55c \ud30c\uc774\ud504\ub77c\uc778","text":"<pre><code>from rfs.hof.core import pipe, compose\nfrom rfs.hof.collections import compact_map\n\ndef process_user_registration(user_data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ud30c\uc774\ud504\ub77c\uc778\uc744 \uc0ac\uc6a9\ud55c \uc0ac\uc6a9\uc790 \ub4f1\ub85d \ucc98\ub9ac\"\"\"\n\n    # \uba54\uc778 \ub4f1\ub85d \ud30c\uc774\ud504\ub77c\uc778\n    registration_pipeline = pipe(\n        validate_user_data,                    # 1. \ub370\uc774\ud130 \uac80\uc99d\n        lambda result: result.map(create_user_record),  # 2. \uc0ac\uc6a9\uc790 \ub808\ucf54\ub4dc \uc0dd\uc131\n        lambda result: result.bind(save_user_to_db_with_record),  # 3. DB \uc800\uc7a5\n        lambda result: result.bind(handle_post_registration)      # 4. \ud6c4\uc18d \ucc98\ub9ac\n    )\n\n    return registration_pipeline(user_data)\n\ndef save_user_to_db_with_record(user_record: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub808\ucf54\ub4dc\ub97c \uc800\uc7a5\ud558\uace0 ID\ub97c \ud3ec\ud568\ud55c \uc644\uc804\ud55c \ub808\ucf54\ub4dc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    return (\n        save_user_to_db(user_record)\n        .map(lambda user_id: {**user_record, \"id\": user_id})\n    )\n\ndef handle_post_registration(user_record: dict) -&gt; Result[dict, str]:\n    \"\"\"\ub4f1\ub85d \ud6c4 \ucc98\ub9ac\ub97c \ub2f4\ub2f9\ud558\ub294 \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    # \ud6c4\uc18d \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778 (\uc2e4\ud328\ud574\ub3c4 \uc804\uccb4\uac00 \uc2e4\ud328\ud558\uc9c0 \uc54a\uc74c)\n    post_processing_pipeline = pipe(\n        send_welcome_email_safe,  # \uc774\uba54\uc77c \ubc1c\uc1a1 (\uc2e4\ud328 \ud5c8\uc6a9)\n        log_user_registration,    # \ub85c\uadf8 \uae30\ub85d\n    )\n\n    # \ud6c4\uc18d \ucc98\ub9ac \uc2e4\ud589 (\uc2e4\ud328\ud574\ub3c4 \uba54\uc778 \uacb0\uacfc\uc5d0 \uc601\ud5a5 \uc5c6\uc74c)\n    post_result = post_processing_pipeline(user_record)\n    if post_result.is_failure():\n        logger.warning(f\"\ud6c4\uc18d \ucc98\ub9ac \uc2e4\ud328: {post_result.unwrap_error()}\")\n\n    # \uba54\uc778 \uacb0\uacfc \ubc18\ud658\n    return Success({\n        \"user_id\": user_record[\"id\"],\n        \"email\": user_record[\"email\"]\n    })\n\ndef send_welcome_email_safe(user_record: dict) -&gt; Result[dict, str]:\n    \"\"\"\uc548\uc804\ud55c \uc774\uba54\uc77c \ubc1c\uc1a1 (\uc2e4\ud328\ud574\ub3c4 \ud30c\uc774\ud504\ub77c\uc778 \uc911\ub2e8 \uc548\ub428)\"\"\"\n    email_result = send_welcome_email(user_record)\n    if email_result.is_failure():\n        logger.warning(f\"\ud658\uc601 \uc774\uba54\uc77c \uc2e4\ud328: {email_result.unwrap_error()}\")\n\n    # \uc774\uba54\uc77c \uc2e4\ud328\uc640 \uad00\uacc4\uc5c6\uc774 \uc0ac\uc6a9\uc790 \ub808\ucf54\ub4dc \uacc4\uc18d \uc804\ub2ec\n    return Success(user_record)\n\n# \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778 \uc608\uc81c\ndef process_user_batch(user_list: list) -&gt; Result[list, str]:\n    \"\"\"\ubc30\uce58 \uc0ac\uc6a9\uc790 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    batch_processing_pipeline = pipe(\n        lambda users: compact_map(\n            lambda user: process_user_registration(user)\n                        .map(lambda result: result)\n                        .unwrap_or(None),  # \uc2e4\ud328\ud55c \uc0ac\uc6a9\uc790\ub294 None\uc73c\ub85c\n            users\n        ),\n        lambda successful_users: Success(successful_users),\n        lambda result: result.map(\n            lambda users: group_by(lambda u: u.get(\"department\", \"\uae30\ud0c0\"), users)\n        )\n    )\n\n    return batch_processing_pipeline(user_list)\n\n# \uc124\uc815 \uae30\ubc18 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\ndef create_user_processing_pipeline(config: dict):\n    \"\"\"\uc124\uc815\uc5d0 \ub530\ub77c \ub3d9\uc801\uc73c\ub85c \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4.\"\"\"\n\n    steps = [validate_user_data]  # \uae30\ubcf8 \uac80\uc99d\uc740 \ud56d\uc0c1 \ud3ec\ud568\n\n    # \uc124\uc815\uc5d0 \ub530\ub77c \ub2e8\uacc4 \ucd94\uac00\n    if config.get(\"enable_enrichment\"):\n        steps.append(lambda result: result.map(enrich_user_data))\n\n    if config.get(\"enable_duplication_check\"):\n        steps.append(lambda result: result.bind(check_duplicate_user))\n\n    steps.extend([\n        lambda result: result.map(create_user_record),\n        lambda result: result.bind(save_user_to_db_with_record)\n    ])\n\n    if config.get(\"send_welcome_email\"):\n        steps.append(lambda result: result.bind(handle_post_registration))\n\n    # \ub3d9\uc801\uc73c\ub85c \uad6c\uc131\ub41c \ud30c\uc774\ud504\ub77c\uc778 \ubc18\ud658\n    return pipe(*steps)\n</code></pre>"},{"location":"17-functional-development-rules/#3-hof","title":"\u2699\ufe0f \uaddc\uce59 3: HOF \uae30\ubc18 \uc124\uc815/\uc8fc\uc785","text":""},{"location":"17-functional-development-rules/#_7","title":"\ud575\uc2ec \uc6d0\uce59","text":"<ul> <li>\ud568\uc218\ud615 \uc124\uc815: \uc124\uc815 \uac12\ub4e4\uc744 \ud568\uc218\ud615 \ubc29\uc2dd\uc73c\ub85c \uc870\ud569</li> <li>\ucee4\ub9c1 \ud65c\uc6a9: \uc124\uc815 \uac12\ub4e4\uc744 \ubd80\ubd84 \uc801\uc6a9\uc73c\ub85c \uc8fc\uc785</li> <li>\ubd88\ubcc0 \uc124\uc815: \uc124\uc815 \uac1d\uccb4\ub97c \uc9c1\uc811 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uace0 \uc0c8\ub85c\uc6b4 \uc124\uc815 \uc0dd\uc131</li> <li>\ud0c0\uc785 \uc548\uc804\uc131: \uc124\uc815 \uac12\ub4e4\uc758 \ud0c0\uc785 \uc548\uc804\uc131 \ubcf4\uc7a5</li> </ul>"},{"location":"17-functional-development-rules/#_8","title":"\u274c \ub098\uc05c \uc608: \uba85\ub839\ud615 \uc124\uc815 \uad00\ub9ac","text":"<pre><code># \uba85\ub839\ud615 \uc124\uc815 - \ud53c\ud574\uc57c \ud560 \ud328\ud134\nclass DatabaseConfig:\n    def __init__(self):\n        self.host = \"localhost\"\n        self.port = 5432\n        self.database = \"myapp\"\n        self.username = None\n        self.password = None\n        self.ssl_enabled = False\n        self.pool_size = 10\n\n    def apply_environment_overrides(self):\n        \"\"\"\ud658\uacbd \ubcc0\uc218\ub85c \uc124\uc815 \ub36e\uc5b4\uc4f0\uae30 - \uac00\ubcc0\uc131\uc73c\ub85c \uc778\ud55c \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5\"\"\"\n        if os.getenv(\"DB_HOST\"):\n            self.host = os.getenv(\"DB_HOST\")\n        if os.getenv(\"DB_PORT\"):\n            self.port = int(os.getenv(\"DB_PORT\"))\n        if os.getenv(\"DB_NAME\"):\n            self.database = os.getenv(\"DB_NAME\")\n        # ... \uacc4\uc18d\ud574\uc11c \uac00\ubcc0 \uc0c1\ud0dc \ubcc0\uacbd\n\n    def validate(self):\n        \"\"\"\uac80\uc99d \ub85c\uc9c1\uc774 \uc124\uc815 \ud074\ub798\uc2a4\uc5d0 \uac15\uacb0\ud569\"\"\"\n        errors = []\n        if not self.username:\n            errors.append(\"\uc0ac\uc6a9\uc790\uba85\uc774 \ud544\uc694\ud569\ub2c8\ub2e4\")\n        if not self.password:\n            errors.append(\"\ube44\ubc00\ubc88\ud638\uac00 \ud544\uc694\ud569\ub2c8\ub2e4\")\n        if self.pool_size &lt;= 0:\n            errors.append(\"\uc5f0\uacb0 \ud480 \ud06c\uae30\ub294 \uc591\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4\")\n\n        if errors:\n            raise ValueError(\"; \".join(errors))\n\n# \uc758\uc874\uc131 \uc8fc\uc785\ub3c4 \uba85\ub839\ud615\uc73c\ub85c \ucc98\ub9ac\ndef create_database_service():\n    config = DatabaseConfig()\n    config.apply_environment_overrides()\n    config.validate()\n    return DatabaseService(config)\n</code></pre>"},{"location":"17-functional-development-rules/#hof","title":"\u2705 \uc88b\uc740 \uc608: HOF\ub97c \ud65c\uc6a9\ud55c \ud568\uc218\ud615 \uc124\uc815","text":"<pre><code>from rfs.hof.core import pipe, curry, compose\nfrom rfs.hof.collections import compact_map, fold_left\nfrom rfs.hof.monads import Maybe, Result\nfrom rfs.core.result import Success, Failure\nfrom dataclasses import dataclass\nfrom typing import Dict, Any, Callable\n\n@dataclass(frozen=True)  # \ubd88\ubcc0 \uc124\uc815 \uac1d\uccb4\nclass DatabaseConfig:\n    host: str\n    port: int\n    database: str\n    username: str\n    password: str\n    ssl_enabled: bool = False\n    pool_size: int = 10\n    timeout: int = 30\n\n# 1. \uc124\uc815 \uc0dd\uc131 \ud568\uc218\ub4e4 (\uc791\uc740 \ub2e8\uc704)\ndef create_default_database_config() -&gt; DatabaseConfig:\n    \"\"\"\uae30\ubcf8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return DatabaseConfig(\n        host=\"localhost\",\n        port=5432,\n        database=\"myapp\",\n        username=\"user\",\n        password=\"password\"\n    )\n\n@curry\ndef override_config_field(field_name: str, new_value: Any, config: DatabaseConfig) -&gt; DatabaseConfig:\n    \"\"\"\uc124\uc815 \ud544\ub4dc\ub97c \ud568\uc218\ud615\uc73c\ub85c \ub36e\uc5b4\uc501\ub2c8\ub2e4.\"\"\"\n    return dataclasses.replace(config, **{field_name: new_value})\n\ndef load_env_value(env_key: str, converter: Callable = str) -&gt; Maybe[Any]:\n    \"\"\"\ud658\uacbd \ubcc0\uc218\ub97c \uc548\uc804\ud558\uac8c \ub85c\ub4dc\ud569\ub2c8\ub2e4.\"\"\"\n    env_value = os.getenv(env_key)\n    if env_value is None:\n        return Maybe.nothing()\n\n    try:\n        return Maybe.just(converter(env_value))\n    except (ValueError, TypeError):\n        return Maybe.nothing()\n\n# 2. \uc124\uc815 \uac80\uc99d \ud568\uc218\ub4e4 (\uc791\uc740 \ub2e8\uc704)\n@curry\ndef validate_config_field(field_name: str, validator: Callable, config: DatabaseConfig) -&gt; Result[DatabaseConfig, str]:\n    \"\"\"\uc124\uc815 \ud544\ub4dc\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n    field_value = getattr(config, field_name)\n    if not validator(field_value):\n        return Failure(f\"\uc798\ubabb\ub41c {field_name}: {field_value}\")\n    return Success(config)\n\ndef is_valid_host(host: str) -&gt; bool:\n    \"\"\"\ud638\uc2a4\ud2b8\uba85 \uc720\ud6a8\uc131\uc744 \uac80\uc0ac\ud569\ub2c8\ub2e4.\"\"\"\n    return bool(host and len(host.strip()) &gt; 0)\n\ndef is_valid_port(port: int) -&gt; bool:\n    \"\"\"\ud3ec\ud2b8 \ubc88\ud638 \uc720\ud6a8\uc131\uc744 \uac80\uc0ac\ud569\ub2c8\ub2e4.\"\"\"\n    return isinstance(port, int) and 1 &lt;= port &lt;= 65535\n\ndef is_positive_int(value: int) -&gt; bool:\n    \"\"\"\uc591\uc758 \uc815\uc218\uc778\uc9c0 \uac80\uc0ac\ud569\ub2c8\ub2e4.\"\"\"\n    return isinstance(value, int) and value &gt; 0\n\n# 3. \ud658\uacbd \ubcc0\uc218 \uc801\uc6a9 \ud30c\uc774\ud504\ub77c\uc778\ndef apply_environment_overrides(config: DatabaseConfig) -&gt; DatabaseConfig:\n    \"\"\"\ud658\uacbd \ubcc0\uc218\ub97c \ud568\uc218\ud615\uc73c\ub85c \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n\n    # \ud658\uacbd \ubcc0\uc218 \ub9e4\ud551\uacfc \ubcc0\ud658\uae30 \uc815\uc758\n    env_mappings = [\n        (\"DB_HOST\", \"host\", str),\n        (\"DB_PORT\", \"port\", int),\n        (\"DB_NAME\", \"database\", str),\n        (\"DB_USER\", \"username\", str),\n        (\"DB_PASSWORD\", \"password\", str),\n        (\"DB_SSL\", \"ssl_enabled\", lambda x: x.lower() == 'true'),\n        (\"DB_POOL_SIZE\", \"pool_size\", int),\n        (\"DB_TIMEOUT\", \"timeout\", int),\n    ]\n\n    # \ud658\uacbd \ubcc0\uc218 \uc801\uc6a9 \ud30c\uc774\ud504\ub77c\uc778\n    def apply_env_override(config: DatabaseConfig, mapping: tuple) -&gt; DatabaseConfig:\n        env_key, field_name, converter = mapping\n\n        env_value = load_env_value(env_key, converter)\n        if env_value.is_just():\n            return override_config_field(field_name, env_value.unwrap(), config)\n        return config\n\n    # fold_left\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ud658\uacbd \ubcc0\uc218\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uc801\uc6a9\n    return fold_left(apply_env_override, config, env_mappings)\n\n# 4. \uc124\uc815 \uac80\uc99d \ud30c\uc774\ud504\ub77c\uc778\ndef validate_database_config(config: DatabaseConfig) -&gt; Result[DatabaseConfig, str]:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \uc885\ud569\uc801\uc73c\ub85c \uac80\uc99d\ud569\ub2c8\ub2e4.\"\"\"\n\n    validation_pipeline = pipe(\n        validate_config_field(\"host\", is_valid_host),\n        lambda result: result.bind(validate_config_field(\"port\", is_valid_port)),\n        lambda result: result.bind(validate_config_field(\"pool_size\", is_positive_int)),\n        lambda result: result.bind(validate_config_field(\"timeout\", is_positive_int)),\n    )\n\n    return validation_pipeline(config)\n\n# 5. \uc124\uc815 \ub85c\ub4dc \ub9c8\uc2a4\ud130 \ud30c\uc774\ud504\ub77c\uc778\ndef load_database_config() -&gt; Result[DatabaseConfig, str]:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \ub85c\ub4dc\ud558\ub294 \uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    config_pipeline = pipe(\n        create_default_database_config,     # \uae30\ubcf8 \uc124\uc815 \uc0dd\uc131\n        apply_environment_overrides,        # \ud658\uacbd \ubcc0\uc218 \uc801\uc6a9\n        validate_database_config,           # \uac80\uc99d\n    )\n\n    return config_pipeline()\n\n# 6. \ucee4\ub9c1\uc744 \ud65c\uc6a9\ud55c \uc758\uc874\uc131 \uc8fc\uc785\n@curry\ndef create_service_with_config(service_factory: Callable, config: DatabaseConfig):\n    \"\"\"\uc124\uc815\uc744 \uc8fc\uc785\ud558\uc5ec \uc11c\ube44\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return service_factory(config)\n\n@curry  \ndef create_database_service(config: DatabaseConfig) -&gt; Result[DatabaseService, str]:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc11c\ube44\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    try:\n        return Success(DatabaseService(config))\n    except Exception as e:\n        return Failure(f\"\uc11c\ube44\uc2a4 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n@curry\ndef create_cache_service(config: DatabaseConfig) -&gt; Result[CacheService, str]:\n    \"\"\"\uce90\uc2dc \uc11c\ube44\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\uc744 \uae30\ubc18\uc73c\ub85c \uce90\uc2dc \uc124\uc815 \ucd94\ucd9c\n    cache_config = CacheConfig(\n        host=config.host,\n        port=config.port + 1000,  # \uce90\uc2dc\ub294 DB \ud3ec\ud2b8 + 1000\n        timeout=config.timeout\n    )\n\n    try:\n        return Success(CacheService(cache_config))\n    except Exception as e:\n        return Failure(f\"\uce90\uc2dc \uc11c\ube44\uc2a4 \uc0dd\uc131 \uc2e4\ud328: {str(e)}\")\n\n# 7. \uc11c\ube44\uc2a4 \ucd08\uae30\ud654 \ud30c\uc774\ud504\ub77c\uc778\ndef initialize_services() -&gt; Result[dict, str]:\n    \"\"\"\ubaa8\ub4e0 \uc11c\ube44\uc2a4\ub97c \ucd08\uae30\ud654\ud558\ub294 \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n\n    def create_all_services(config: DatabaseConfig) -&gt; Result[dict, str]:\n        \"\"\"\uc124\uc815\uc744 \uae30\ubc18\uc73c\ub85c \ubaa8\ub4e0 \uc11c\ube44\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n\n        # \ucee4\ub9c1\uc744 \ud65c\uc6a9\ud55c \uc11c\ube44\uc2a4 \ud329\ud1a0\ub9ac\ub4e4\n        db_service_factory = create_service_with_config(create_database_service)\n        cache_service_factory = create_service_with_config(create_cache_service)\n\n        # \uac01 \uc11c\ube44\uc2a4 \uc0dd\uc131\n        db_result = db_service_factory(config)\n        cache_result = cache_service_factory(config)\n\n        # \ubaa8\ub4e0 \uc11c\ube44\uc2a4\uac00 \uc131\uacf5\uc801\uc73c\ub85c \uc0dd\uc131\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\n        if db_result.is_failure():\n            return db_result\n        if cache_result.is_failure():\n            return cache_result\n\n        return Success({\n            \"database\": db_result.unwrap(),\n            \"cache\": cache_result.unwrap()\n        })\n\n    # \uc804\uccb4 \ucd08\uae30\ud654 \ud30c\uc774\ud504\ub77c\uc778\n    initialization_pipeline = pipe(\n        load_database_config,               # \uc124\uc815 \ub85c\ub4dc\n        lambda result: result.bind(create_all_services),  # \uc11c\ube44\uc2a4 \uc0dd\uc131\n    )\n\n    return initialization_pipeline()\n\n# 8. \ub3d9\uc801 \uc124\uc815 \uc5c5\ub370\uc774\ud2b8 (\ud568\uc218\ud615 \ubc29\uc2dd)\n@curry\ndef update_config_section(section_updates: Dict[str, Any], config: DatabaseConfig) -&gt; DatabaseConfig:\n    \"\"\"\uc124\uc815\uc758 \uc5ec\ub7ec \ud544\ub4dc\ub97c \ud55c\ubc88\uc5d0 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4.\"\"\"\n    return dataclasses.replace(config, **section_updates)\n\ndef apply_runtime_config_updates(config: DatabaseConfig, updates: list) -&gt; DatabaseConfig:\n    \"\"\"\ub7f0\ud0c0\uc784 \uc124\uc815 \uc5c5\ub370\uc774\ud2b8\ub97c \uc801\uc6a9\ud569\ub2c8\ub2e4.\"\"\"\n\n    # \uc5c5\ub370\uc774\ud2b8 \ud568\uc218\ub4e4\uc758 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub3d9\uc801\uc73c\ub85c \uad6c\uc131\n    update_pipeline = pipe(*[\n        update_config_section(update_dict) \n        for update_dict in updates\n    ])\n\n    return update_pipeline(config)\n\n# \uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c\ndef example_usage():\n    \"\"\"\uc124\uc815 \ubc0f \uc8fc\uc785 \uc2dc\uc2a4\ud15c \uc0ac\uc6a9 \uc608\uc81c\"\"\"\n\n    # 1. \uc11c\ube44\uc2a4 \ucd08\uae30\ud654\n    services_result = initialize_services()\n\n    if services_result.is_failure():\n        logger.error(f\"\uc11c\ube44\uc2a4 \ucd08\uae30\ud654 \uc2e4\ud328: {services_result.unwrap_error()}\")\n        return\n\n    services = services_result.unwrap()\n    db_service = services[\"database\"]\n    cache_service = services[\"cache\"]\n\n    # 2. \ub7f0\ud0c0\uc784 \uc124\uc815 \uc5c5\ub370\uc774\ud2b8 \uc608\uc81c\n    runtime_updates = [\n        {\"pool_size\": 20},       # \uc5f0\uacb0 \ud480 \ud06c\uae30 \uc99d\uac00\n        {\"timeout\": 45},         # \ud0c0\uc784\uc544\uc6c3 \uc99d\uac00\n    ]\n\n    updated_config = apply_runtime_config_updates(\n        db_service.config, \n        runtime_updates\n    )\n\n    # 3. \uc5c5\ub370\uc774\ud2b8\ub41c \uc124\uc815\uc73c\ub85c \uc0c8 \uc11c\ube44\uc2a4 \uc0dd\uc131\n    new_service_result = create_database_service(updated_config)\n    if new_service_result.is_success():\n        db_service = new_service_result.unwrap()\n        logger.info(\"\uc124\uc815\uc774 \uc5c5\ub370\uc774\ud2b8\ub41c \uc11c\ube44\uc2a4\ub85c \uad50\uccb4\ub418\uc5c8\uc2b5\ub2c8\ub2e4\")\n</code></pre>"},{"location":"17-functional-development-rules/#_9","title":"\ud83d\udccb \uc2e4\ubb34 \uc801\uc6a9 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":""},{"location":"17-functional-development-rules/#1_1","title":"\u2705 \uaddc\uce59 1: \uc791\uc740 \ub2e8\uc704 \ud568\uc218\ud615 \uac1c\ubc1c","text":"<ul> <li> \uac01 \ud568\uc218\uac00 **\ub2e8\uc77c \ucc45\uc784**\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uac00?</li> <li> \ud568\uc218\uc758 \uae38\uc774\uac00 **20\uc904 \uc774\ud558**\uc778\uac00?</li> <li> **RFS HOF \ub77c\uc774\ube0c\ub7ec\ub9ac**\ub97c \uc801\uadf9 \ud65c\uc6a9\ud588\ub294\uac00?</li> <li> **\ubd80\uc791\uc6a9(side-effect)**\uc774 \ucd5c\uc18c\ud654\ub418\uc5c8\ub294\uac00?</li> <li> \ud568\uc218\uac00 **\uc21c\uc218\ud568\uc218**\uc5d0 \uac00\uae4c\uc6b4\uac00?</li> <li> **\ubd88\ubcc0 \ub370\uc774\ud130**\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294\uac00?</li> </ul>"},{"location":"17-functional-development-rules/#2_1","title":"\u2705 \uaddc\uce59 2: \ud30c\uc774\ud504\ub77c\uc778 \uae30\ubc18 \ud1b5\ud569","text":"<ul> <li> \uc791\uc740 \ud568\uc218\ub4e4\uc744 \uc870\ud569\ud560 \ub54c **pipe()**\ub97c \uc0ac\uc6a9\ud588\ub294\uac00?</li> <li> \ub370\uc774\ud130\uac00 **\ub2e8\uacc4\ubcc4\ub85c \ubcc0\ud658**\ub418\uace0 \uc788\ub294\uac00?</li> <li> **Result \ud328\ud134**\uc73c\ub85c \uc5d0\ub7ec\uac00 \uc548\uc804\ud558\uac8c \uc804\ud30c\ub418\ub294\uac00?</li> <li> \ud30c\uc774\ud504\ub77c\uc778\uc758 **\ub370\uc774\ud130 \ud50c\ub85c\uc6b0**\uac00 \uba85\ud655\ud55c\uac00?</li> <li> \uc911\ucca9\ub41c \ud568\uc218 \ud638\ucd9c\uc744 \ud53c\ud588\ub294\uac00?</li> <li> \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc774 **\uc5ec\ub7ec \ub2e8\uacc4\ub85c \ubd84\ud574**\ub418\uc5c8\ub294\uac00?</li> </ul>"},{"location":"17-functional-development-rules/#3-hof_1","title":"\u2705 \uaddc\uce59 3: HOF \uae30\ubc18 \uc124\uc815/\uc8fc\uc785","text":"<ul> <li> **\ucee4\ub9c1(curry)**\uc744 \uc124\uc815/\uc8fc\uc785\uc5d0 \ud65c\uc6a9\ud588\ub294\uac00?</li> <li> \uc124\uc815 \uac1d\uccb4\uac00 **\ubd88\ubcc0(immutable)**\ud55c\uac00?</li> <li> \uc124\uc815 \uac80\uc99d\uc5d0 **\ud568\uc218\ud615 \ud328\ud134**\uc744 \uc0ac\uc6a9\ud588\ub294\uac00?</li> <li> \ud658\uacbd \ubcc0\uc218 \ucc98\ub9ac\uac00 \uc548\uc804\ud558\uac8c \uad6c\ud604\ub418\uc5c8\ub294\uac00?</li> <li> \uc758\uc874\uc131 \uc8fc\uc785\uc774 **\ud0c0\uc785 \uc548\uc804**\ud55c\uac00?</li> <li> \uc124\uc815 \uc5c5\ub370\uc774\ud2b8\uac00 \ud568\uc218\ud615\uc73c\ub85c \uad6c\ud604\ub418\uc5c8\ub294\uac00?</li> </ul>"},{"location":"17-functional-development-rules/#anti-patterns","title":"\ud83d\udeab \uae08\uc9c0 \ud328\ud134 (Anti-Patterns)","text":""},{"location":"17-functional-development-rules/#1_2","title":"1. \ud070 \ub369\uc5b4\ub9ac \ud568\uc218","text":"<pre><code># \u274c \uae08\uc9c0: \uc5ec\ub7ec \ucc45\uc784\uc744 \uac00\uc9c4 \ud070 \ud568\uc218\ndef process_everything(data):\n    # 100\uc904 \uc774\uc0c1\uc758 \ubcf5\uc7a1\ud55c \ub85c\uc9c1\n    pass\n</code></pre>"},{"location":"17-functional-development-rules/#2_2","title":"2. \uc911\ucca9\ub41c \uc870\uac74\ubb38/\uc608\uc678\ucc98\ub9ac","text":"<pre><code># \u274c \uae08\uc9c0: \uae4a\uc740 \uc911\ucca9\ntry:\n    result = operation1()\n    try:\n        result2 = operation2(result)\n        try:\n            result3 = operation3(result2)\n        except:\n            pass\n    except:\n        pass\nexcept:\n    pass\n</code></pre>"},{"location":"17-functional-development-rules/#3_1","title":"3. \uac00\ubcc0 \uc0c1\ud0dc \ub0a8\uc6a9","text":"<pre><code># \u274c \uae08\uc9c0: \uac00\ubcc0 \uc0c1\ud0dc \uc9c1\uc811 \ubcc0\uacbd\nconfig.host = \"new_host\"\nconfig.port = 5433\nconfig.validate()  # \uc0c1\ud0dc \ubcc0\uacbd \ud6c4 \uac80\uc99d\n</code></pre>"},{"location":"17-functional-development-rules/#4-hof","title":"4. HOF \ubbf8\ud65c\uc6a9","text":"<pre><code># \u274c \uae08\uc9c0: HOF \ub300\uc2e0 \uba85\ub839\ud615 \ub8e8\ud504\nresults = []\nfor item in items:\n    if condition(item):\n        results.append(transform(item))\n</code></pre>"},{"location":"17-functional-development-rules/#_10","title":"\ud83c\udfaf \ud300 \uac1c\ubc1c \uac00\uc774\ub4dc\ub77c\uc778","text":""},{"location":"17-functional-development-rules/#_11","title":"\ucf54\ub4dc \ub9ac\ubdf0 \uc2dc \ud655\uc778\uc0ac\ud56d","text":"<ol> <li>3\ub300 \uaddc\uce59 \uc900\uc218 \uc5ec\ubd80 \ud655\uc778</li> <li>HOF \ud65c\uc6a9\ub3c4 \uc810\uac80  </li> <li>\ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131 \uc801\uc808\uc131 \uac80\ud1a0</li> <li>\ud568\uc218 \ubd84\ud574 \uc218\uc900 \ud3c9\uac00</li> </ol>"},{"location":"17-functional-development-rules/#_12","title":"\uc2e0\uaddc \uae30\ub2a5 \uac1c\ubc1c \ud504\ub85c\uc138\uc2a4","text":"<ol> <li>\uae30\ub2a5\uc744 \uc791\uc740 \ub2e8\uc704\ub85c \ubd84\ud574 \uacc4\ud68d</li> <li>\uac01 \ub2e8\uc704\ubcc4 HOF \ud328\ud134 \uc801\uc6a9 \uc124\uacc4</li> <li>\ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc870 \uc124\uacc4</li> <li>\uad6c\ud604 \ubc0f \ud14c\uc2a4\ud2b8</li> <li>3\ub300 \uaddc\uce59 \uc900\uc218 \uac80\uc99d</li> </ol>"},{"location":"17-functional-development-rules/#_13","title":"\ub808\uac70\uc2dc \ucf54\ub4dc \ub9ac\ud329\ud1a0\ub9c1","text":"<ol> <li>\ud604\uc7ac \ucf54\ub4dc \ubd84\uc11d \ubc0f \ubb38\uc81c\uc810 \ud30c\uc545</li> <li>\uc791\uc740 \ub2e8\uc704\ub85c \ubd84\ud574 \uac00\ub2a5\ud55c \ubd80\ubd84 \uc2dd\ubcc4</li> <li>HOF \ud328\ud134 \uc801\uc6a9 \uacc4\ud68d \uc218\ub9bd</li> <li>\ub2e8\uacc4\uc801 \ub9ac\ud329\ud1a0\ub9c1 \uc2e4\ud589</li> <li>\ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud55c \uac80\uc99d</li> </ol>"},{"location":"17-functional-development-rules/#_14","title":"\ud83d\udd0d \uc608\uc678 \uc0c1\ud669 \ucc98\ub9ac","text":""},{"location":"17-functional-development-rules/#_15","title":"\uc5b8\uc81c \uaddc\uce59\uc744 \uc720\uc5f0\ud558\uac8c \uc801\uc6a9\ud560 \uc218 \uc788\ub294\uac00?","text":"<ol> <li>\uc131\ub2a5\uc774 \ub9e4\uc6b0 \uc911\uc694\ud55c \ud56b\uc2a4\ud31f \ucf54\ub4dc</li> <li>\uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640\uc758 \uc778\ud130\ud398\uc774\uc2a4 \ubd80\ubd84</li> <li>\ub808\uac70\uc2dc \uc2dc\uc2a4\ud15c\uacfc\uc758 \ud1b5\ud569 \uc9c0\uc810</li> <li>\ud504\ub85c\ud1a0\ud0c0\uc774\ud551\uc774\ub098 \uc2e4\ud5d8\uc801 \ucf54\ub4dc</li> </ol>"},{"location":"17-functional-development-rules/#_16","title":"\uc608\uc678 \uc801\uc6a9 \uc2dc \uc8fc\uc758\uc0ac\ud56d","text":"<ul> <li>**\uba85\ud655\ud55c \uc8fc\uc11d**\uc73c\ub85c \uc608\uc678 \uc0ac\uc720 \uae30\ub85d</li> <li>\uae30\uc220 \ubd80\ucc44 \uc774\uc288\ub85c \ub4f1\ub85d\ud558\uc5ec \ucd94\ud6c4 \uac1c\uc120 \uacc4\ud68d</li> <li>**\ud300 \uc804\uccb4 \ub17c\uc758**\ub97c \ud1b5\ud55c \uc608\uc678 \uc2b9\uc778</li> <li>\uac00\ub2a5\ud55c \ud55c \ube60\ub978 \uc2dc\uc77c \ub0b4 \uaddc\uce59 \uc900\uc218 \ucf54\ub4dc\ub85c \ub9ac\ud329\ud1a0\ub9c1</li> </ul>"},{"location":"17-functional-development-rules/#_17","title":"\ud83d\udcda \ucd94\uac00 \ud559\uc2b5 \uc790\ub8cc","text":""},{"location":"17-functional-development-rules/#rfs-framework","title":"RFS Framework \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>HOF \uc0ac\uc6a9 \uac00\uc774\ub4dc</li> <li>Result \ud328\ud134 \uac00\uc774\ub4dc</li> <li>\ud30c\uc774\ud504\ub77c\uc778 \uc124\uacc4 \ud328\ud134</li> </ul>"},{"location":"17-functional-development-rules/#_18","title":"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ucc38\uace0 \uc790\ub8cc","text":"<ul> <li>Swift \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ud615 \uba54\uc11c\ub4dc\ub4e4</li> <li>Haskell \ud568\uc218 \ud569\uc131 \ud328\ud134</li> <li>F# \ud30c\uc774\ud504\ub77c\uc778 \uc5f0\uc0b0\uc790</li> <li>Clojure \ubd88\ubcc0 \ub370\uc774\ud130 \uad6c\uc870</li> </ul> <p>\uacb0\ub860: \uc774 3\uac00\uc9c0 \ud544\uc218 \uaddc\uce59\uc744 \ud1b5\ud574 RFS Framework\uc5d0\uc11c **\uc77c\uad00\ub418\uace0 \uc720\uc9c0\ubcf4\uc218\ud558\uae30 \uc26c\uc6b4 \ud568\uc218\ud615 \ucf54\ub4dc**\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uac1c\ubc1c\uc790\ub294 \uc774 \uaddc\uce59\uc744 \uc219\uc9c0\ud558\uace0 \uc77c\uc0c1\uc801\uc778 \uac1c\ubc1c\uc5d0 \uc801\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"18-database/","title":"18. Database","text":"<p>RFS Framework \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9 \ubc0f ORM \uc2dc\uc2a4\ud15c.</p>"},{"location":"18-database/#_1","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9 \uac1c\uc694","text":"<p>RFS Framework\ub294 \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640\uc758 \uc5f0\ub3d9\uc744 \uc9c0\uc6d0\ud558\uba70, \ub2e8\uc21c\ud55c ORM \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"18-database/#_2","title":"\uc9c0\uc6d0 \ub370\uc774\ud130\ubca0\uc774\uc2a4","text":"<ul> <li>PostgreSQL: \uc8fc\uc694 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4</li> <li>SQLite: \uac1c\ubc1c \ubc0f \ud14c\uc2a4\ud2b8\uc6a9</li> <li>MySQL: \ub808\uac70\uc2dc \uc2dc\uc2a4\ud15c \uc9c0\uc6d0</li> <li>Redis: \uce90\uc2dc\uc6a9</li> </ul>"},{"location":"18-database/#_3","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from rfs.database import DatabaseManager, Model\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815\ndb = DatabaseManager(\"postgresql://user:pass@localhost/db\")\n\n# \ubaa8\ub378 \uc815\uc758\nclass User(Model):\n    id: int\n    name: str\n    email: str\n\n    class Meta:\n        table_name = \"users\"\n        primary_key = \"id\"\n\n# CRUD \uc791\uc5c5\nuser = User.create(name=\"John\", email=\"john@example.com\")\nusers = User.find_all()\nUser.update(user.id, name=\"John Doe\")\nUser.delete(user.id)\n</code></pre>"},{"location":"18-database/#_4","title":"\ud2b8\ub79c\uc7ad\uc158 \uc9c0\uc6d0","text":"<pre><code>from rfs.database import transaction\n\n@transaction\ndef transfer_money(from_user_id: int, to_user_id: int, amount: float):\n    from_user = User.find(from_user_id)\n    to_user = User.find(to_user_id)\n\n    from_user.balance -= amount\n    to_user.balance += amount\n\n    from_user.save()\n    to_user.save()\n</code></pre>"},{"location":"18-database/#_5","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Transactions - \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc2a4\ud15c</li> <li>Result Pattern - \uc548\uc804\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc870\uc791</li> <li>Configuration - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815</li> </ul>"},{"location":"20-code-quality/","title":"\ucf54\ub4dc \ud488\uc9c8 \uad00\ub9ac \uc2dc\uc2a4\ud15c (Code Quality Management)","text":""},{"location":"20-code-quality/#_1","title":"\uac1c\uc694","text":"<p>RFS Framework\uc758 \ud1b5\ud569 \ucf54\ub4dc \ud488\uc9c8 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc740 \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09 \ucf54\ub4dc\ubca0\uc774\uc2a4\uc758 \ud488\uc9c8\uc744 \uccb4\uacc4\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uace0 \uac1c\uc120\ud558\ub294 \ud3ec\uad04\uc801\uc778 \uac00\uc774\ub4dc\ub77c\uc778\uc785\ub2c8\ub2e4. \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ud134, Result \ubaa8\ub098\ub4dc, \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ub4f1 \ud604\ub300\uc801\uc778 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784\uc744 \ud1b5\ud574 \uc548\uc804\ud558\uace0 \uc720\uc9c0\ubcf4\uc218\uac00 \uc26c\uc6b4 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud569\ub2c8\ub2e4.</p>"},{"location":"20-code-quality/#_2","title":"\ud575\uc2ec \ud488\uc9c8 \uc6d0\uce59","text":""},{"location":"20-code-quality/#_3","title":"\ud83c\udfaf \ucf54\ub4dc \ud488\uc9c8 \ucca0\ud559","text":"<ul> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc6b0\uc120: \ubd88\ubcc0\uc131, \uc21c\uc218 \ud568\uc218, \ud568\uc218 \ud569\uc131</li> <li>\ud0c0\uc785 \uc548\uc804\uc131: \uc644\uc804\ud55c \ud0c0\uc785 \ud78c\ud2b8\uc640 \uc815\uc801 \ud0c0\uc785 \uac80\uc0ac</li> <li>\uba85\uc2dc\uc801 \uc624\ub958 \ucc98\ub9ac: Result \ud328\ud134\uc744 \ud1b5\ud55c \uc608\uc678 \uc5c6\ub294 \uc5d0\ub7ec \ud578\ub4e4\ub9c1</li> <li>\uc120\uc5b8\uc801 \ud504\ub85c\uadf8\ub798\ubc0d: \uba85\ub839\ud615\ubcf4\ub2e4 \uc120\uc5b8\uc801 \uc2a4\ud0c0\uc77c \uc120\ud638</li> </ul>"},{"location":"20-code-quality/#_4","title":"\ud83d\udee1\ufe0f \uc548\uc804\uc131 \ubcf4\uc7a5","text":"<ul> <li>\ubd88\ubcc0\uc131 \uc6d0\uce59: \ub370\uc774\ud130 \uc218\uc815 \ub300\uc2e0 \uc0c8\ub85c\uc6b4 \uac1d\uccb4 \uc0dd\uc131</li> <li>Railway Oriented Programming: Result \ud0c0\uc785\uc744 \ud1b5\ud55c \uc624\ub958 \uc804\ud30c</li> <li>\ud0c0\uc785 \uccb4\ud06c: Mypy\ub97c \ud1b5\ud55c \uc815\uc801 \ud0c0\uc785 \uac80\uc99d</li> <li>\ud14c\uc2a4\ud2b8 \uc6b0\uc120: TDD \uc811\uadfc\ubc95\uacfc 80% \uc774\uc0c1 \ucee4\ubc84\ub9ac\uc9c0</li> </ul>"},{"location":"20-code-quality/#_5","title":"\ud83d\udd27 \ucf54\ub4dc \uc2a4\ud0c0\uc77c","text":"<ul> <li>PEP 8 \uc900\uc218: Python \ud45c\uc900 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc</li> <li>Black \ud3ec\ub9f7\ud305: \uc77c\uad00\ub41c \ucf54\ub4dc \ud3ec\ub9f7</li> <li>isort: \uccb4\uacc4\uc801\uc778 import \uc815\ub82c</li> <li>\uba85\ud655\ud55c \ub124\uc774\ubc0d: \uc758\ub3c4\uac00 \uba85\ud655\ud55c \ubcc0\uc218/\ud568\uc218\uba85</li> </ul>"},{"location":"20-code-quality/#_6","title":"\ud83d\udcca \ud488\uc9c8 \uba54\ud2b8\ub9ad","text":"<ul> <li>\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0: \ucd5c\uc18c 80% \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0</li> <li>\ubcf5\uc7a1\ub3c4 \uad00\ub9ac: \uc21c\ud658 \ubcf5\uc7a1\ub3c4 10 \uc774\ud558</li> <li>\uc911\ubcf5 \uc81c\uac70: DRY \uc6d0\uce59 \uc900\uc218</li> <li>\ubb38\uc11c\ud654: \ubaa8\ub4e0 \uacf5\uac1c API \ubb38\uc11c\ud654</li> </ul>"},{"location":"20-code-quality/#_7","title":"\uc124\uce58 \ubc0f \uc124\uc815","text":""},{"location":"20-code-quality/#_8","title":"\uc0ac\uc804 \uc694\uad6c\uc0ac\ud56d","text":"<pre><code># Python 3.10 \uc774\uc0c1 \ud544\uc694\npython --version\n\n# \ud544\uc218 \ud328\ud0a4\uc9c0 \uc124\uce58\npip install PyYAML black isort mypy\n</code></pre>"},{"location":"20-code-quality/#_9","title":"\uc124\uc815 \ud30c\uc77c","text":"<p><code>.rfs-quality/config/quality.yaml</code> \ud30c\uc77c\uc744 \ud1b5\ud574 \uc2dc\uc2a4\ud15c\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4:</p> <pre><code>backup:\n  enabled: true              # \ubc31\uc5c5 \ud65c\uc131\ud654\n  auto_backup: true         # \uc790\ub3d9 \ubc31\uc5c5\n  retention_days: 7         # \ubc31\uc5c5 \ubcf4\uad00 \uae30\uac04\n  max_sessions: 10          # \ucd5c\ub300 \uc138\uc158 \uc218\n\nquality:\n  checks:\n    - syntax                # \uad6c\ubb38 \uac80\uc0ac\n    - types                 # \ud0c0\uc785 \uac80\uc0ac\n    - style                 # \uc2a4\ud0c0\uc77c \uac80\uc0ac\n    - functional            # \ud568\uc218\ud615 \uaddc\uce59\n\n  transformations:\n    safe_mode: true         # \uc548\uc804 \ubaa8\ub4dc\n    rollback_on_error: true # \uc624\ub958 \uc2dc \ub864\ubc31\n    parallel: false         # \ubcd1\ub82c \ucc98\ub9ac\n\n  thresholds:\n    max_violations_increase: 0  # \uc704\ubc18 \uc99d\uac00 \ud5c8\uc6a9\uce58\n    min_quality_score: 85.0     # \ucd5c\uc18c \ud488\uc9c8 \uc810\uc218\n\n  exclusions:\n    functional:             # \ud568\uc218\ud615 \uaddc\uce59 \uc81c\uc678 \ud328\ud134\n      - \"**/cache*.py\"\n      - \"**/metrics*.py\"\n      - \"**/test_*.py\"\n\n    directories:            # \uc81c\uc678 \ub514\ub809\ud1a0\ub9ac\n      - \"__pycache__\"\n      - \".git\"\n      - \".pytest_cache\"\n      - \"venv\"\n</code></pre>"},{"location":"20-code-quality/#_10","title":"\uba85\ub839\uc5b4 \uc0c1\uc138 \uac00\uc774\ub4dc","text":""},{"location":"20-code-quality/#1-check","title":"1. \ud488\uc9c8 \uac80\uc0ac (check)","text":"<p>\ucf54\ub4dc\ubca0\uc774\uc2a4\uc758 \ud488\uc9c8\uc744 \uac80\uc0ac\ud558\uace0 \ubcf4\uace0\uc11c\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.</p> <pre><code># \uae30\ubcf8 \uac80\uc0ac\nrfs-quality check\n\n# \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac \uac80\uc0ac\nrfs-quality check src/rfs/core\n\n# \uc790\ub3d9 \ubc31\uc5c5\uacfc \ud568\uaed8 \uac80\uc0ac\nrfs-quality check --auto-backup\n\n# JSON \ud615\uc2dd\uc73c\ub85c \uacb0\uacfc \ucd9c\ub825\nrfs-quality check --format json\n</code></pre> <p>\uac80\uc0ac \ud56d\ubaa9: - Python \uad6c\ubb38 \uc624\ub958 - \ud0c0\uc785 \ud78c\ud2b8 \uc77c\uad00\uc131 - \ucf54\ub4dc \uc2a4\ud0c0\uc77c \uc704\ubc18 - \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc704\ubc18 - \ubcf5\uc7a1\ub3c4 \uba54\ud2b8\ub9ad</p> <p>\ucd9c\ub825 \uc608\uc2dc: <pre><code>\ud83d\udd0d \ud488\uc9c8 \uac80\uc0ac \uc2dc\uc791: src/rfs\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\u2705 \uad6c\ubb38 \uac80\uc0ac: \ud1b5\uacfc (0 \uc624\ub958)\n\u26a0\ufe0f  \uc2a4\ud0c0\uc77c \uac80\uc0ac: 15 \uc704\ubc18 \ubc1c\uacac\n\u274c \ud568\uc218\ud615 \uac80\uc0ac: 8 \uc704\ubc18 \ubc1c\uacac\n\u2705 \ud0c0\uc785 \uac80\uc0ac: \ud1b5\uacfc\n\n\ud83d\udcca \uc804\uccb4 \ud488\uc9c8 \uc810\uc218: 87.5/100\n\ud83d\udca1 \uac1c\uc120 \uc81c\uc548: rfs-quality fix --safe \uc2e4\ud589 \uad8c\uc7a5\n</code></pre></p>"},{"location":"20-code-quality/#2-fix","title":"2. \uc790\ub3d9 \uc218\uc815 (fix)","text":"<p>\ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \uac1c\uc120\ud558\uace0 \ud488\uc9c8 \uaddc\uce59\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.</p> <pre><code># \uc548\uc804 \ubaa8\ub4dc\ub85c \ubaa8\ub4e0 \uc218\uc815 \uc801\uc6a9\nrfs-quality fix --safe\n\n# \ud2b9\uc815 \ubcc0\ud658\ub9cc \uc801\uc6a9\nrfs-quality fix --type functional\nrfs-quality fix --type black\n\n# Dry run \ubaa8\ub4dc (\uc2dc\ubbac\ub808\uc774\uc158)\nrfs-quality fix --dry-run\n\n# \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\ub9cc \uc218\uc815\nrfs-quality fix src/rfs/core --safe\n</code></pre> <p>\ubcc0\ud658 \uc720\ud615 \uc0c1\uc138:</p>"},{"location":"20-code-quality/#syntax_fix","title":"syntax_fix (\uad6c\ubb38 \uc218\uc815)","text":"<pre><code># Before\ndef function(\n    print(\"unclosed parenthesis\"\n\n# After  \ndef function():\n    print(\"unclosed parenthesis\")\n</code></pre>"},{"location":"20-code-quality/#isort-import","title":"isort (import \uc815\ub82c)","text":"<pre><code># Before\nimport os\nfrom typing import List\nimport sys\nfrom rfs import Result\n\n# After\nimport os\nimport sys\nfrom typing import List\n\nfrom rfs import Result\n</code></pre>"},{"location":"20-code-quality/#black","title":"black (\ucf54\ub4dc \ud3ec\ub9f7\ud305)","text":"<pre><code># Before\ndef function(a,b,c):x=a+b;y=b+c;return x+y\n\n# After\ndef function(a, b, c):\n    x = a + b\n    y = b + c\n    return x + y\n</code></pre>"},{"location":"20-code-quality/#functional","title":"functional (\ud568\uc218\ud615 \ud328\ud134)","text":"<pre><code># Before\nresult = []\nfor item in items:\n    if item &gt; 0:\n        result.append(item * 2)\n\n# After\nresult = [item * 2 for item in items if item &gt; 0]\n# \ub610\ub294\nresult = list(map(lambda x: x * 2, filter(lambda x: x &gt; 0, items)))\n</code></pre>"},{"location":"20-code-quality/#match_case","title":"match_case (\ud328\ud134 \ub9e4\uce6d)","text":"<pre><code># Before\nif command == \"start\":\n    start_service()\nelif command == \"stop\":\n    stop_service()\nelif command == \"restart\":\n    restart_service()\nelse:\n    print(\"Unknown command\")\n\n# After\nmatch command:\n    case \"start\":\n        start_service()\n    case \"stop\":\n        stop_service()\n    case \"restart\":\n        restart_service()\n    case _:\n        print(\"Unknown command\")\n</code></pre>"},{"location":"20-code-quality/#3-backup","title":"3. \ubc31\uc5c5 \uad00\ub9ac (backup)","text":"<p>\ubcc0\uacbd \uc804\ud6c4\uc758 \ucf54\ub4dc\ub97c \uc548\uc804\ud558\uac8c \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code># \ubc31\uc5c5 \uc138\uc158 \uc0dd\uc131\nrfs-quality backup create --description \"\ub300\uaddc\ubaa8 \ub9ac\ud329\ud1a0\ub9c1 \uc804\"\n\n# \ubc31\uc5c5 \ubaa9\ub85d \ud655\uc778\nrfs-quality backup list\n\n# \ud604\uc7ac \uc138\uc158 \uc0c1\ud0dc\nrfs-quality backup status\n\n# \uc774\uc804 \uc0c1\ud0dc\ub85c \ub864\ubc31\nrfs-quality backup rollback\n\n# \ud2b9\uc815 \uc138\uc158\uc73c\ub85c \ub864\ubc31\nrfs-quality backup rollback --session session_20250824_143022\n\n# \uc624\ub798\ub41c \ubc31\uc5c5 \uc815\ub9ac\nrfs-quality backup clear --old\n\n# \ubaa8\ub4e0 \ubc31\uc5c5 \uc0ad\uc81c (\uc8fc\uc758!)\nrfs-quality backup clear --all\n</code></pre> <p>\ubc31\uc5c5 \uc138\uc158 \uad6c\uc870: <pre><code>.rfs-quality/\n\u251c\u2500\u2500 backups/\n\u2502   \u251c\u2500\u2500 sessions/\n\u2502   \u2502   \u251c\u2500\u2500 session_20250824_143022/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 manifest.yaml      # \uc138\uc158 \uba54\ud0c0\ub370\uc774\ud130\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 files/            # \ubc31\uc5c5\ub41c \ud30c\uc77c\ub4e4\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 checksums.json    # \ubb34\uacb0\uc131 \uac80\uc99d\n\u2502   \u2502   \u2514\u2500\u2500 session_20250824_150135/\n\u2502   \u251c\u2500\u2500 snapshots/                # \uc2a4\ub0c5\uc0f7\n\u2502   \u2514\u2500\u2500 archive/                  # \uc544\uce74\uc774\ube0c\n</code></pre></p>"},{"location":"20-code-quality/#4-session","title":"4. \uc138\uc158 \uad00\ub9ac (session)","text":"<p>\uc791\uc5c5 \uc138\uc158\uc744 \uad00\ub9ac\ud558\uace0 \uba54\ud2b8\ub9ad\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4.</p> <pre><code># \uc138\uc158 \uc815\ubcf4 \ud655\uc778\nrfs-quality session info\n\n# \uc138\uc158 \uba54\ud2b8\ub9ad \ud655\uc778\nrfs-quality session metrics\n\n# \uc138\uc158 \ub0b4\ubcf4\ub0b4\uae30\nrfs-quality session export\n</code></pre> <p>\uc138\uc158 \uc815\ubcf4 \uc608\uc2dc: <pre><code>{\n  \"session_id\": \"session_20250824_143022\",\n  \"description\": \"\ud568\uc218\ud615 \ud328\ud134 \uc801\uc6a9\",\n  \"timestamp\": \"2025-08-24T14:30:22\",\n  \"status\": \"active\",\n  \"files\": 45,\n  \"size_mb\": 2.34,\n  \"metrics\": {\n    \"syntax_errors_fixed\": 3,\n    \"style_violations_fixed\": 127,\n    \"functional_patterns_applied\": 18,\n    \"quality_score_before\": 72.5,\n    \"quality_score_after\": 91.3\n  }\n}\n</code></pre></p>"},{"location":"20-code-quality/#rfs-framework","title":"RFS Framework \ucf54\ub4dc \ud488\uc9c8 \ud45c\uc900","text":""},{"location":"20-code-quality/#_11","title":"\uc544\ud0a4\ud14d\ucc98 \ud328\ud134","text":""},{"location":"20-code-quality/#1-result-railway-oriented-programming","title":"1. Result \ud328\ud134 (Railway Oriented Programming)","text":"<pre><code>from rfs import Result, Success, Failure\n\ndef process_data(data: dict) -&gt; Result[ProcessedData, str]:\n    \"\"\"\n    \ubaa8\ub4e0 \ud568\uc218\ub294 Result \ud0c0\uc785\uc744 \ubc18\ud658\ud558\uc5ec \uc624\ub958\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucc98\ub9ac\n    \"\"\"\n    return (\n        validate_data(data)\n        .bind(transform_data)\n        .bind(enrich_data)\n        .map(lambda x: ProcessedData(x))\n    )\n</code></pre>"},{"location":"20-code-quality/#2-reactive-streams","title":"2. \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc (Reactive Streams)","text":"<pre><code>from rfs.reactive import Flux, Mono\n\nasync def process_stream(items: List[Item]) -&gt; List[ProcessedItem]:\n    \"\"\"\n    \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc\uc744 \uc0ac\uc6a9\ud55c \ube44\ub3d9\uae30 \ub370\uc774\ud130 \ucc98\ub9ac\n    \"\"\"\n    return await (\n        Flux.from_iterable(items)\n        .filter(lambda x: x.is_valid)\n        .map(process_item)\n        .flat_map(enrich_item)\n        .collect_list()\n    )\n</code></pre>"},{"location":"20-code-quality/#3-dependency-injection","title":"3. \uc758\uc874\uc131 \uc8fc\uc785 (Dependency Injection)","text":"<pre><code>from rfs.core import inject, stateless\n\n@stateless\nclass UserService:\n    \"\"\"\n    \uc0c1\ud0dc\uac00 \uc5c6\ub294 \uc11c\ube44\uc2a4 \ucef4\ud3ec\ub10c\ud2b8\n    \"\"\"\n\n    @inject\n    def __init__(self, repository: UserRepository):\n        self.repository = repository\n\n    def get_user(self, user_id: str) -&gt; Result[User, str]:\n        return self.repository.find_by_id(user_id)\n</code></pre>"},{"location":"20-code-quality/#_12","title":"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uaddc\uce59","text":"<p>RFS Framework\ub294 \uc5c4\uaca9\ud55c \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc6d0\uce59\uc744 \ub530\ub985\ub2c8\ub2e4:</p>"},{"location":"20-code-quality/#1-isinstance","title":"1. isinstance \uc0ac\uc6a9 \uae08\uc9c0","text":"<pre><code># \u274c Bad\nif isinstance(obj, str):\n    process_string(obj)\nelif isinstance(obj, int):\n    process_number(obj)\n\n# \u2705 Good - SingleDispatch \ud328\ud134\nfrom functools import singledispatch\n\n@singledispatch\ndef process(obj):\n    raise NotImplementedError\n\n@process.register(str)\ndef _(obj: str):\n    process_string(obj)\n\n@process.register(int)\ndef _(obj: int):\n    process_number(obj)\n</code></pre>"},{"location":"20-code-quality/#2","title":"2. \ubd88\ubcc0\uc131 \uc6d0\uce59","text":"<pre><code># \u274c Bad - \uc9c1\uc811 \uc218\uc815\ndata = {\"key\": \"value\"}\ndata[\"new_key\"] = \"new_value\"\n\n# \u2705 Good - \uc0c8 \uac1d\uccb4 \uc0dd\uc131\ndata = {\"key\": \"value\"}\nnew_data = {**data, \"new_key\": \"new_value\"}\n</code></pre>"},{"location":"20-code-quality/#3-result","title":"3. Result \ud328\ud134 \uc0ac\uc6a9","text":"<pre><code># \u274c Bad - Exception \uc0ac\uc6a9\ndef divide(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero\")\n    return a / b\n\n# \u2705 Good - Result \ud328\ud134\nfrom rfs import Result, Success, Failure\n\ndef divide(a: int, b: int) -&gt; Result[float, str]:\n    if b == 0:\n        return Failure(\"Division by zero\")\n    return Success(a / b)\n</code></pre>"},{"location":"20-code-quality/#4","title":"4. \uc21c\uc218 \ud568\uc218 \uc6d0\uce59","text":"<pre><code># \u274c Bad - \ubd80\uc218 \ud6a8\uacfc\uac00 \uc788\ub294 \ud568\uc218\nglobal_state = []\n\ndef add_item(item):\n    global_state.append(item)  # \uc804\uc5ed \uc0c1\ud0dc \ubcc0\uacbd\n    return item\n\n# \u2705 Good - \uc21c\uc218 \ud568\uc218\ndef add_item(items: List[Item], item: Item) -&gt; List[Item]:\n    return [*items, item]  # \uc0c8\ub85c\uc6b4 \ub9ac\uc2a4\ud2b8 \ubc18\ud658\n</code></pre>"},{"location":"20-code-quality/#5","title":"5. \uace0\ucc28 \ud568\uc218 \ud65c\uc6a9","text":"<pre><code># \u274c Bad - \uba85\ub839\ud615 \ub8e8\ud504\nresults = []\nfor item in items:\n    if validate(item):\n        processed = process(item)\n        results.append(processed)\n\n# \u2705 Good - \ud568\uc218\ud615 \uccb4\uc774\ub2dd\nfrom rfs import pipe, filter_m, map_m\n\nresults = pipe(\n    items,\n    filter_m(validate),\n    map_m(process),\n    list\n)\n\n# HOF \ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9 \uc608\uc81c\nfrom rfs.hof import compose, curry\n\ntransform = compose(\n    normalize_data,\n    validate_schema,\n    enrich_metadata\n)\n# \ub354 \ub9ce\uc740 HOF \ud328\ud134\uc740 [HOF Library](22-hot-library.md) \ucc38\uc870\n\n# \u2705 Better - \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc\nfrom rfs.reactive import Flux\n\nresults = await (\n    Flux.from_iterable(items)\n    .filter(validate)\n    .map(process)\n    .collect_list()\n)\n</code></pre>"},{"location":"20-code-quality/#_13","title":"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc608\uc2dc","text":""},{"location":"20-code-quality/#1","title":"1. \uc77c\uc77c \ud488\uc9c8 \uccb4\ud06c","text":"<pre><code>#!/bin/bash\n# daily_quality_check.sh\n\necho \"\ud83d\udd0d \uc77c\uc77c \ud488\uc9c8 \uccb4\ud06c \uc2dc\uc791\"\n\n# 1. \ubc31\uc5c5 \uc0dd\uc131\nrfs-quality backup create --description \"\uc77c\uc77c \ud488\uc9c8 \uccb4\ud06c\"\n\n# 2. \ud488\uc9c8 \uac80\uc0ac\nrfs-quality check --format json &gt; quality_report.json\n\n# 3. \uc790\ub3d9 \uc218\uc815 \uc2dc\ub3c4\nrfs-quality fix --safe\n\n# 4. \uacb0\uacfc \ud655\uc778\nrfs-quality session metrics\n\n# 5. \ubb38\uc81c \ubc1c\uc0dd \uc2dc \ub864\ubc31\nif [ $? -ne 0 ]; then\n    echo \"\u274c \ud488\uc9c8 \uac1c\uc120 \uc2e4\ud328, \ub864\ubc31 \uc911...\"\n    rfs-quality backup rollback\nfi\n</code></pre>"},{"location":"20-code-quality/#2_1","title":"2. \ub300\uaddc\ubaa8 \ub9ac\ud329\ud1a0\ub9c1","text":"<pre><code># 1\ub2e8\uacc4: \ud604\uc7ac \uc0c1\ud0dc \ubc31\uc5c5\nrfs-quality backup create --description \"\ub300\uaddc\ubaa8 \ub9ac\ud329\ud1a0\ub9c1 \uc2dc\uc791\"\n\n# 2\ub2e8\uacc4: Dry run\uc73c\ub85c \ubcc0\uacbd\uc0ac\ud56d \ud655\uc778\nrfs-quality fix --dry-run --type all\n\n# 3\ub2e8\uacc4: \ub2e8\uacc4\ubcc4 \uc801\uc6a9\nrfs-quality fix --type syntax_fix --safe\nrfs-quality fix --type isort --safe\nrfs-quality fix --type black --safe\nrfs-quality fix --type functional --safe\nrfs-quality fix --type match_case --safe\n\n# 4\ub2e8\uacc4: \ucd5c\uc885 \uac80\uc99d\nrfs-quality check\n\n# 5\ub2e8\uacc4: \ubb38\uc81c \uc2dc \uc804\uccb4 \ub864\ubc31\nrfs-quality backup rollback --session [\uc138\uc158ID]\n</code></pre>"},{"location":"20-code-quality/#3-cicd","title":"3. CI/CD \ud1b5\ud569","text":"<pre><code># .github/workflows/quality.yml\nname: Code Quality Check\n\non: [push, pull_request]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.10'\n\n      - name: Install dependencies\n        run: |\n          pip install PyYAML black isort mypy\n          pip install -e .\n\n      - name: Run quality check\n        run: |\n          rfs-quality check --format json &gt; quality_report.json\n\n      - name: Upload report\n        uses: actions/upload-artifact@v2\n        with:\n          name: quality-report\n          path: quality_report.json\n\n      - name: Fail if quality score is low\n        run: |\n          score=$(python -c \"import json; print(json.load(open('quality_report.json'))['summary']['quality_score'])\")\n          if (( $(echo \"$score &lt; 85.0\" | bc -l) )); then\n            echo \"\u274c Quality score too low: $score\"\n            exit 1\n          fi\n</code></pre>"},{"location":"20-code-quality/#_14","title":"\ubb38\uc81c \ud574\uacb0","text":""},{"location":"20-code-quality/#_15","title":"\uc77c\ubc18\uc801\uc778 \ubb38\uc81c","text":""},{"location":"20-code-quality/#1_1","title":"1. \ubc31\uc5c5 \uacf5\uac04 \ubd80\uc871","text":"<pre><code># \uc624\ub798\ub41c \ubc31\uc5c5 \uc815\ub9ac\nrfs-quality backup clear --old\n\n# \uc544\uce74\uc774\ube0c\ub85c \uc774\ub3d9\nfind .rfs-quality/backups/sessions -type d -mtime +30 -exec tar czf {}.tar.gz {} \\;\n</code></pre>"},{"location":"20-code-quality/#2_2","title":"2. \ubcc0\ud658 \uc2e4\ud328","text":"<pre><code># Safe \ubaa8\ub4dc \uc0ac\uc6a9\nrfs-quality fix --safe\n\n# \ud2b9\uc815 \ud30c\uc77c \uc81c\uc678\necho \"problematic_file.py\" &gt;&gt; .rfs-quality/exclusions.txt\n</code></pre>"},{"location":"20-code-quality/#3","title":"3. \uba54\ubaa8\ub9ac \ubd80\uc871","text":"<pre><code># \ub514\ub809\ud1a0\ub9ac\ubcc4\ub85c \ucc98\ub9ac\nfor dir in src/rfs/*; do\n    rfs-quality fix \"$dir\" --safe\ndone\n</code></pre>"},{"location":"20-code-quality/#_16","title":"\ub514\ubc84\uae45","text":"<pre><code># \uc0c1\uc138 \ub85c\uadf8 \ud65c\uc131\ud654\nexport RFS_QUALITY_DEBUG=1\nrfs-quality check\n\n# \ub85c\uadf8 \ud30c\uc77c \ud655\uc778\ntail -f .rfs-quality/logs/quality.log\n</code></pre>"},{"location":"20-code-quality/#_17","title":"\uc131\ub2a5 \ucd5c\uc801\ud654","text":""},{"location":"20-code-quality/#_18","title":"\ubcd1\ub82c \ucc98\ub9ac","text":"<pre><code># .rfs-quality/config/quality.yaml\nquality:\n  transformations:\n    parallel: true          # \ubcd1\ub82c \ucc98\ub9ac \ud65c\uc131\ud654\n    max_workers: 4         # \uc6cc\ucee4 \uc218\n</code></pre>"},{"location":"20-code-quality/#_19","title":"\uce90\uc2f1","text":"<pre><code>cache:\n  enabled: true\n  ttl: 3600               # 1\uc2dc\uac04\n  max_size_mb: 100\n</code></pre>"},{"location":"20-code-quality/#_20","title":"\uc99d\ubd84 \uac80\uc0ac","text":"<pre><code># \ubcc0\uacbd\ub41c \ud30c\uc77c\ub9cc \uac80\uc0ac\ngit diff --name-only | xargs rfs-quality check\n</code></pre>"},{"location":"20-code-quality/#_21","title":"\ubaa8\ubc94 \uc0ac\ub840","text":""},{"location":"20-code-quality/#1_2","title":"1. \uc815\uae30\uc801\uc778 \ud488\uc9c8 \uccb4\ud06c","text":"<ul> <li>\uc77c\uc77c \uc790\ub3d9 \uac80\uc0ac \uc124\uc815</li> <li>PR \uc2dc \ud488\uc9c8 \uac8c\uc774\ud2b8 \uc801\uc6a9</li> <li>\uc6d4\uac04 \ud488\uc9c8 \ubcf4\uace0\uc11c \uc0dd\uc131</li> </ul>"},{"location":"20-code-quality/#2_3","title":"2. \ub2e8\uacc4\uc801 \uac1c\uc120","text":"<ul> <li>\ud55c \ubc88\uc5d0 \ubaa8\ub4e0 \uaddc\uce59 \uc801\uc6a9 \uc9c0\uc591</li> <li>\ud300\uacfc \ud569\uc758\ub41c \uaddc\uce59\ubd80\ud130 \uc801\uc6a9</li> <li>\uc810\uc9c4\uc801 \ud488\uc9c8 \ubaa9\ud45c \uc0c1\ud5a5</li> </ul>"},{"location":"20-code-quality/#3_1","title":"3. \ubc31\uc5c5 \uc804\ub7b5","text":"<ul> <li>\uc911\uc694 \ubcc0\uacbd \uc804 \ud56d\uc0c1 \ubc31\uc5c5</li> <li>\uc138\uc158 \uc124\uba85 \uba85\ud655\ud788 \uc791\uc131</li> <li>\uc815\uae30\uc801\uc778 \ubc31\uc5c5 \uc815\ub9ac</li> </ul>"},{"location":"20-code-quality/#4_1","title":"4. \ud300 \ud611\uc5c5","text":"<ul> <li>\ud488\uc9c8 \uc124\uc815 \ud30c\uc77c \uacf5\uc720</li> <li>\uc81c\uc678 \uaddc\uce59 \ubb38\uc11c\ud654</li> <li>\ud488\uc9c8 \uba54\ud2b8\ub9ad \ub300\uc2dc\ubcf4\ub4dc \uad6c\uc131</li> </ul>"},{"location":"20-code-quality/#_22","title":"\uace0\uae09 \uc124\uc815","text":""},{"location":"20-code-quality/#_23","title":"\ucee4\uc2a4\ud140 \ubcc0\ud658\uae30 \ucd94\uac00","text":"<pre><code># unified/transformers.py\uc5d0 \ucd94\uac00\nclass CustomTransformer(BaseTransformer):\n    \"\"\"\ucee4\uc2a4\ud140 \ubcc0\ud658\uae30\"\"\"\n\n    def transform(self, source: str) -&gt; str:\n        # \ubcc0\ud658 \ub85c\uc9c1 \uad6c\ud604\n        return transformed_source\n\n    def validate(self, source: str) -&gt; bool:\n        # \uac80\uc99d \ub85c\uc9c1\n        return True\n</code></pre>"},{"location":"20-code-quality/#_24","title":"\ud488\uc9c8 \uaddc\uce59 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5","text":"<pre><code>// rfs_functional_rules.json \uc218\uc815\n{\n  \"custom_rule\": {\n    \"enabled\": true,\n    \"severity\": \"warning\",\n    \"message\": \"\ucee4\uc2a4\ud140 \uaddc\uce59 \uc704\ubc18\",\n    \"suggestion\": \"\uac1c\uc120 \uc81c\uc548\",\n    \"autofix\": true\n  }\n}\n</code></pre>"},{"location":"20-code-quality/#_25","title":"\uad00\ub828 \uc790\ub8cc","text":"<ul> <li>RFS Framework Core Patterns</li> <li>HOF Library - Higher-Order Functions\uc640 \ud568\uc218\ud615 \uc720\ud2f8\ub9ac\ud2f0</li> <li>Configuration Management </li> <li>CLI Interface</li> <li>Implementation Status &amp; TBD</li> <li>HOF Library - \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc720\ud2f8\ub9ac\ud2f0</li> <li>Core Patterns - Result \ud328\ud134 \ubc0f \ud568\uc218\ud615 \uc6d0\uce59</li> </ul>"},{"location":"20-code-quality/#_26","title":"\ucf54\ub4dc \ud488\uc9c8 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":""},{"location":"20-code-quality/#_27","title":"\ud544\uc218 \uac80\uc99d \ud56d\ubaa9","text":"<ul> <li> \ubaa8\ub4e0 \ud568\uc218\uac00 Result \ud0c0\uc785\uc744 \ubc18\ud658\ud558\ub294\uac00?</li> <li> \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc644\uc804\ud55c\uac00?</li> <li> \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0\uac00 80% \uc774\uc0c1\uc778\uac00?</li> <li> \uc21c\ud658 \ubcf5\uc7a1\ub3c4\uac00 10 \uc774\ud558\uc778\uac00?</li> <li> \ubaa8\ub4e0 \uacf5\uac1c API\uac00 \ubb38\uc11c\ud654\ub418\uc5b4 \uc788\ub294\uac00?</li> <li> Black/isort \ud3ec\ub9f7\ud305\uc774 \uc801\uc6a9\ub418\uc5c8\ub294\uac00?</li> <li> Mypy \ud0c0\uc785 \uccb4\ud06c\ub97c \ud1b5\uacfc\ud558\ub294\uac00?</li> <li> \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc6d0\uce59\uc744 \uc900\uc218\ud558\ub294\uac00?</li> </ul>"},{"location":"20-code-quality/#_28","title":"\ud488\uc9c8 \uac1c\uc120 \ub3c4\uad6c","text":""},{"location":"20-code-quality/#_29","title":"\uc790\ub3d9\ud654 \ub3c4\uad6c","text":"<pre><code># \ucf54\ub4dc \ud3ec\ub9f7\ud305\nblack src/\nisort src/\n\n# \ud0c0\uc785 \uccb4\ud06c\nmypy src/\n\n# \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0\npytest --cov=rfs --cov-report=term-missing\n\n# \ubcf4\uc548 \uc2a4\uce94\nbandit -r src/\n\n# \ud1b5\ud569 \ud488\uc9c8 \uccb4\ud06c\nrfs-cli dev lint\n</code></pre>"},{"location":"20-code-quality/#cicd","title":"CI/CD \ud1b5\ud569","text":"<pre><code># .github/workflows/quality.yml\nname: Code Quality\n\non: [push, pull_request]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n      - run: pip install -e \".[dev]\"\n      - run: black --check src/\n      - run: isort --check src/\n      - run: mypy src/\n      - run: pytest --cov=rfs --cov-fail-under=80\n      - run: bandit -r src/\n</code></pre>"},{"location":"20-code-quality/#_30","title":"\uc694\uc57d","text":"<p>RFS Framework\uc758 \ucf54\ub4dc \ud488\uc9c8 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc740 \ud604\ub300\uc801\uc778 Python \uac1c\ubc1c\uc758 \ubaa8\ubc94 \uc0ac\ub840\ub97c \uccb4\uacc4\ud654\ud55c \ud3ec\uad04\uc801\uc778 \uac00\uc774\ub4dc\ub77c\uc778\uc785\ub2c8\ub2e4. \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d, Result \ud328\ud134, \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ub4f1\uc758 \uace0\uae09 \ud328\ub7ec\ub2e4\uc784\uc744 \ud1b5\ud574 \uc548\uc804\ud558\uace0 \uc720\uc9c0\ubcf4\uc218\uac00 \uc26c\uc6b4 \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"20-code-quality/#_31","title":"\ud575\uc2ec \uc6d0\uce59","text":"<ol> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d: \ubd88\ubcc0\uc131, \uc21c\uc218 \ud568\uc218, \ud568\uc218 \ud569\uc131 (HOF Library \ucc38\uc870)</li> <li>\ud0c0\uc785 \uc548\uc804\uc131: \uc644\uc804\ud55c \ud0c0\uc785 \ud78c\ud2b8\uc640 \uc815\uc801 \uac80\uc99d</li> <li>\uba85\uc2dc\uc801 \uc624\ub958 \ucc98\ub9ac: Result \ud328\ud134\uc73c\ub85c \uc608\uc678 \uc5c6\ub294 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\ud14c\uc2a4\ud2b8 \uc6b0\uc120: TDD\uc640 80% \uc774\uc0c1 \ucee4\ubc84\ub9ac\uc9c0</li> <li>\ucf54\ub4dc \uc77c\uad00\uc131: Black, isort\ub97c \ud1b5\ud55c \uc790\ub3d9 \ud3ec\ub9f7\ud305</li> </ol>"},{"location":"20-code-quality/#_32","title":"\ub3c4\uad6c\uc640 \uba85\ub839\uc5b4","text":"<ul> <li><code>black src/</code>: \ucf54\ub4dc \ud3ec\ub9f7\ud305</li> <li><code>mypy src/</code>: \ud0c0\uc785 \uccb4\ud06c</li> <li><code>pytest --cov</code>: \ud14c\uc2a4\ud2b8 \uc2e4\ud589 \ubc0f \ucee4\ubc84\ub9ac\uc9c0</li> <li><code>rfs-cli dev lint</code>: \ud1b5\ud569 \ud488\uc9c8 \uac80\uc0ac</li> </ul> <p>\uc774\ub7ec\ud55c \uc6d0\uce59\uacfc \ub3c4\uad6c\ub97c \ud1b5\ud574 RFS Framework\ub294 \uc5d4\ud130\ud504\ub77c\uc774\uc988 \ud658\uacbd\uc5d0\uc11c \uc694\uad6c\ub418\ub294 \ub192\uc740 \uc218\uc900\uc758 \ucf54\ub4dc \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4.</p>"},{"location":"21-event-system/","title":"16. Event System","text":"<p>RFS Framework \uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c \ubc0f \ube44\ub3d9\uae30 \uc774\ubca4\ud2b8 \ucc98\ub9ac.</p>"},{"location":"21-event-system/#_1","title":"\uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c \uac1c\uc694","text":"<p>\uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c\uc740 \ucef4\ud3ec\ub10c\ud2b8 \uac04\uc758 \ub290\uc2a8\ud55c \uacb0\ud569\uc744 \ucd5c\uc18c\ud654\ud558\uace0 \ube44\ub3d9\uae30 \ud1b5\uc2e0\uc744 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4.</p>"},{"location":"21-event-system/#_2","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from rfs.events import EventBus, Event\n\n# \uc774\ubca4\ud2b8 \ubc84\uc2a4 \uc0dd\uc131\nevent_bus = EventBus()\n\n# \uc774\ubca4\ud2b8 \uc218\uc2e0\ub300 \ub4f1\ub85d\n@event_bus.subscriber(\"user.created\")\ndef on_user_created(event: Event):\n    print(f\"User created: {event.data}\")\n\n# \uc774\ubca4\ud2b8 \ubc1c\ud589\nevent_bus.publish(\"user.created\", {\"id\": 1, \"name\": \"John\"})\n</code></pre>"},{"location":"21-event-system/#_3","title":"\ube44\ub3d9\uae30 \uc774\ubca4\ud2b8 \ucc98\ub9ac","text":"<pre><code>import asyncio\nfrom rfs.events import AsyncEventBus\n\n# \ube44\ub3d9\uae30 \uc774\ubca4\ud2b8 \ubc84\uc2a4\nasync_event_bus = AsyncEventBus()\n\n# \ube44\ub3d9\uae30 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\n@async_event_bus.subscriber(\"data.processed\")\nasync def on_data_processed(event: Event):\n    await asyncio.sleep(1)  # \ube44\ub3d9\uae30 \uc791\uc5c5\n    print(f\"Data processed: {event.data}\")\n</code></pre>"},{"location":"21-event-system/#_4","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Transactions - \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc2a4\ud15c</li> <li>State Machine - \uc0c1\ud0dc \uad00\ub9ac</li> <li>Result Pattern - \ud2b8\ub79c\uc7ad\uc158\uacfc \uc774\ubca4\ud2b8 \uc5f0\ub3d9</li> </ul>"},{"location":"22-hot-library/","title":"RFS Higher-Order Functions (HOF) Library","text":""},{"location":"22-hot-library/#_1","title":"\uac1c\uc694","text":"<p>RFS HOF \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 Python\uc5d0\uc11c \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \ud3ec\uad04\uc801\uc778 \uc720\ud2f8\ub9ac\ud2f0 \ubaa8\uc74c\uc785\ub2c8\ub2e4. Swift, Haskell, Scala \ub4f1\uc758 \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc5d0\uc11c \uc601\uac10\uc744 \ubc1b\uc544 \ub9cc\ub4e4\uc5b4\uc84c\uc73c\uba70, \ud0c0\uc785 \uc548\uc804\ud558\uace0 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc81c\ub124\ub9ad \ud568\uc218\ub4e4\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"22-hot-library/#_2","title":"\ubaa9\ucc28","text":"<ol> <li>Core Functions</li> <li>Collections</li> <li>Monads</li> <li>Guard Statement</li> <li>Combinators</li> <li>Decorators</li> <li>Async HOF</li> </ol>"},{"location":"22-hot-library/#core-functions","title":"Core Functions","text":""},{"location":"22-hot-library/#compose","title":"compose","text":"<p>\ud568\uc218\ub97c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ud569\uc131\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.core import compose\n\nadd_one = lambda x: x + 1\nmultiply_two = lambda x: x * 2\n\n# (3 * 2) + 1 = 7\ncomposed = compose(add_one, multiply_two)\nresult = composed(3)  # 7\n</code></pre>"},{"location":"22-hot-library/#pipe","title":"pipe","text":"<p>\ud568\uc218\ub97c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc5f0\uacb0\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.core import pipe\n\nadd_one = lambda x: x + 1\nmultiply_two = lambda x: x * 2\n\n# (3 + 1) * 2 = 8\npiped = pipe(add_one, multiply_two)\nresult = piped(3)  # 8\n</code></pre>"},{"location":"22-hot-library/#curry","title":"curry","text":"<p>\ud568\uc218\ub97c \ucee4\ub9c1\ud558\uc5ec \ubd80\ubd84 \uc801\uc6a9\uc744 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.core import curry\n\n@curry\ndef add(a, b, c):\n    return a + b + c\n\n# \ub2e4\uc591\ud55c \ubc29\ubc95\uc73c\ub85c \ud638\ucd9c \uac00\ub2a5\nresult1 = add(1)(2)(3)  # 6\nresult2 = add(1, 2)(3)  # 6\nresult3 = add(1)(2, 3)  # 6\n\n# \ubd80\ubd84 \uc801\uc6a9\nadd_one = add(1)\nadd_one_two = add_one(2)\nresult4 = add_one_two(3)  # 6\n</code></pre>"},{"location":"22-hot-library/#partial","title":"partial","text":"<p>\ud568\uc218\uc758 \uc77c\ubd80 \uc778\uc790\ub97c \ubbf8\ub9ac \uace0\uc815\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.core import partial\n\ndef greet(greeting, name):\n    return f\"{greeting}, {name}!\"\n\nsay_hello = partial(greet, \"Hello\")\nresult = say_hello(\"World\")  # \"Hello, World!\"\n</code></pre>"},{"location":"22-hot-library/#collections","title":"Collections","text":""},{"location":"22-hot-library/#swift-inspired-functions","title":"Swift-Inspired Functions","text":""},{"location":"22-hot-library/#first","title":"first","text":"<p>\uc870\uac74\uc5d0 \ub9de\ub294 \uccab \ubc88\uc9f8 \uc694\uc18c\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import first\n\nnumbers = [1, 2, 3, 4, 5]\n\n# \uccab \ubc88\uc9f8 \uc694\uc18c\nfirst_num = first(numbers)  # 1\n\n# \uc870\uac74\uc5d0 \ub9de\ub294 \uccab \ubc88\uc9f8 \uc694\uc18c\nfirst_gt_3 = first(numbers, lambda x: x &gt; 3)  # 4\n</code></pre>"},{"location":"22-hot-library/#compactmap","title":"compactMap","text":"<p>\ubcc0\ud658\uacfc None \ud544\ud130\ub9c1\uc744 \ub3d9\uc2dc\uc5d0 \uc218\ud589\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import compact_map\n\n# None\uc774 \uc544\ub2cc \uac12\ub9cc \ubcc0\ud658\nresult = compact_map(\n    lambda x: x * 2 if x &gt; 2 else None,\n    [1, 2, 3, 4]\n)  # [6, 8]\n</code></pre>"},{"location":"22-hot-library/#flatmap","title":"flatMap","text":"<p>\uac01 \uc694\uc18c\ub97c \uceec\ub809\uc158\uc73c\ub85c \ubcc0\ud658\ud558\uace0 \ud3c9\ud0c4\ud654\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import flat_map\n\n# \uac01 \uc22b\uc790\ub97c [n, n*2]\ub85c \ubcc0\ud658\nresult = flat_map(\n    lambda x: [x, x * 2],\n    [1, 2, 3]\n)  # [1, 2, 2, 4, 3, 6]\n</code></pre>"},{"location":"22-hot-library/#droplast","title":"dropLast","text":"<p>\ub05d\uc5d0\uc11c\ubd80\ud130 \uc694\uc18c\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import drop_last\n\nnumbers = [1, 2, 3, 4, 5]\n\n# \ub9c8\uc9c0\ub9c9 2\uac1c \uc81c\uac70\nresult1 = drop_last(numbers, 2)  # [1, 2, 3]\n\n# \uc870\uac74\uc5d0 \ub9de\ub294 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub4e4 \uc81c\uac70\nresult2 = drop_last(numbers, predicate=lambda x: x &gt; 3)  # [1, 2, 3]\n</code></pre>"},{"location":"22-hot-library/#merging","title":"merging","text":"<p>\ucda9\ub3cc \ud574\uacb0 \ud568\uc218\uc640 \ud568\uaed8 \ub515\uc154\ub108\ub9ac\ub97c \ubcd1\ud569\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import merging\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\n\n# \uac12 \ub354\ud558\uae30\nresult1 = merging(dict1, dict2, lambda old, new: old + new)\n# {'a': 1, 'b': 5, 'c': 4}\n\n# \uc0c8 \uac12\uc73c\ub85c \ub300\uccb4\nresult2 = merging(dict1, dict2, lambda old, new: new)\n# {'a': 1, 'b': 3, 'c': 4}\n</code></pre>"},{"location":"22-hot-library/#functional-operations","title":"Functional Operations","text":""},{"location":"22-hot-library/#fold-reduce","title":"fold / reduce","text":"<p>\uceec\ub809\uc158\uc744 \ub2e8\uc77c \uac12\uc73c\ub85c \ucd95\uc57d\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import fold, fold_right\n\nnumbers = [1, 2, 3, 4]\n\n# \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c\nsum_result = fold(lambda acc, x: acc + x, 0, numbers)  # 10\n\n# \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c\nstring_result = fold_right(\n    lambda x, acc: f\"({x}{acc})\",\n    \"\",\n    ['a', 'b', 'c']\n)  # \"(a(b(c)))\"\n</code></pre>"},{"location":"22-hot-library/#scan","title":"scan","text":"<p>fold\uc758 \ubaa8\ub4e0 \uc911\uac04 \uacb0\uacfc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import scan\n\nnumbers = [1, 2, 3, 4]\nrunning_sum = scan(lambda acc, x: acc + x, 0, numbers)\n# [0, 1, 3, 6, 10]\n</code></pre>"},{"location":"22-hot-library/#partition","title":"partition","text":"<p>\uc870\uac74\uc5d0 \ub530\ub77c \uceec\ub809\uc158\uc744 \ub450 \uadf8\ub8f9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import partition\n\nnumbers = [1, 2, 3, 4, 5]\nevens, odds = partition(lambda x: x % 2 == 0, numbers)\n# evens: [2, 4], odds: [1, 3, 5]\n</code></pre>"},{"location":"22-hot-library/#groupby","title":"groupBy","text":"<p>\ud0a4 \ud568\uc218\uc5d0 \ub530\ub77c \uc694\uc18c\ub97c \uadf8\ub8f9\ud654\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.collections import group_by\n\nnumbers = [1, 2, 3, 4, 5, 6]\ngrouped = group_by(lambda x: x % 3, numbers)\n# {1: [1, 4], 2: [2, 5], 0: [3, 6]}\n</code></pre>"},{"location":"22-hot-library/#monads","title":"Monads","text":""},{"location":"22-hot-library/#maybe-monad","title":"Maybe Monad","text":"<p>\uc635\uc154\ub110 \uac12\uc744 \uc548\uc804\ud558\uac8c \ucc98\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.monads import Maybe\n\n# \uac12\uc774 \uc788\ub294 \uacbd\uc6b0\nmaybe_value = Maybe.just(5)\nresult = maybe_value.map(lambda x: x * 2)  # Maybe(10)\n\n# \uac12\uc774 \uc5c6\ub294 \uacbd\uc6b0\nempty = Maybe.nothing()\nresult = empty.map(lambda x: x * 2)  # Maybe(None)\n\n# \uccb4\uc774\ub2dd\ndef safe_div(x):\n    return Maybe.just(10 / x) if x != 0 else Maybe.nothing()\n\nresult = Maybe.just(2).bind(safe_div)  # Maybe(5.0)\nresult = Maybe.just(0).bind(safe_div)  # Maybe(None)\n\n# \uae30\ubcf8\uac12 \uc81c\uacf5\nvalue = Maybe.nothing().unwrap_or(42)  # 42\n</code></pre>"},{"location":"22-hot-library/#either-monad","title":"Either Monad","text":"<p>\ub450 \uac00\uc9c0 \uac00\ub2a5\ud55c \ud0c0\uc785\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.monads import Either\n\n# \uc131\uacf5 \ucf00\uc774\uc2a4 (Right)\nsuccess = Either.right(42)\nresult = success.map(lambda x: x * 2)  # Either(right=84)\n\n# \uc2e4\ud328 \ucf00\uc774\uc2a4 (Left)\nfailure = Either.left(\"error message\")\nresult = failure.map(lambda x: x * 2)  # Either(left='error message')\n\n# \ud328\ud134 \ub9e4\uce6d\ndef process(either):\n    if either.is_right():\n        return f\"Success: {either.unwrap()}\"\n    else:\n        return f\"Error: {either.unwrap_left()}\"\n</code></pre>"},{"location":"22-hot-library/#result-monad","title":"Result Monad","text":"<p>\uc131\uacf5/\uc2e4\ud328\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.monads import Result\n\n# \uc608\uc678\ub97c Result\ub85c \ubcc0\ud658\ndef divide(a, b):\n    if b == 0:\n        return Result.failure(\"Division by zero\")\n    return Result.success(a / b)\n\nresult = divide(10, 2)  # Result(success=5.0)\nresult = divide(10, 0)  # Result(error='Division by zero')\n\n# \uccb4\uc774\ub2dd\nresult = (\n    Result.success(10)\n    .map(lambda x: x * 2)\n    .bind(lambda x: divide(x, 5))\n)  # Result(success=4.0)\n\n# from_try \ud328\ud134\nresult = Result.from_try(lambda: 10 / 0)  # Result(error=ZeroDivisionError)\n</code></pre>"},{"location":"22-hot-library/#guard-statement","title":"Guard Statement","text":"<p>Swift \uc2a4\ud0c0\uc77c\uc758 guard \ubb38\uc73c\ub85c \uc870\uae30 \ubc18\ud658\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4.</p>"},{"location":"22-hot-library/#_3","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from rfs.hof.guard import guard, with_guards\n\n@with_guards\ndef divide(a, b):\n    guard(b != 0, else_return=float('inf'))\n    return a / b\n\nresult = divide(10, 0)  # inf (\uc870\uae30 \ubc18\ud658)\nresult = divide(10, 2)  # 5.0\n</code></pre>"},{"location":"22-hot-library/#guard_let","title":"guard_let (\uc635\uc154\ub110 \uc5b8\ub798\ud551)","text":"<pre><code>from rfs.hof.guard import guard_let, with_guards\n\n@with_guards\ndef process(data):\n    unwrapped = guard_let(data, else_return=\"No data\")\n    return f\"Processing: {unwrapped}\"\n\nresult = process(None)  # \"No data\"\nresult = process(\"test\")  # \"Processing: test\"\n</code></pre>"},{"location":"22-hot-library/#guard_type","title":"guard_type (\ud0c0\uc785 \uccb4\ud06c)","text":"<pre><code>from rfs.hof.guard import guard_type, with_guards\n\n@with_guards\ndef process_number(val):\n    num = guard_type(val, int, else_return=0)\n    return num * 2\n\nresult = process_number(5)  # 10\nresult = process_number(\"not a number\")  # 0\n</code></pre>"},{"location":"22-hot-library/#guard_range","title":"guard_range (\ubc94\uc704 \uccb4\ud06c)","text":"<pre><code>from rfs.hof.guard import guard_range, with_guards\n\n@with_guards\ndef process_percentage(val):\n    pct = guard_range(val, 0, 100, else_return=50)\n    return f\"{pct}%\"\n\nresult = process_percentage(75)  # \"75%\"\nresult = process_percentage(150)  # \"50%\" (\ubc94\uc704 \ucd08\uacfc)\n</code></pre>"},{"location":"22-hot-library/#guardcontext","title":"GuardContext (\ubcf5\uc218 \uccb4\ud06c)","text":"<pre><code>from rfs.hof.guard import GuardContext, with_guards\n\n@with_guards\ndef process(value, data):\n    with GuardContext() as guard:\n        guard.check(value &gt; 0, \"Value must be positive\")\n        guard.check_not_none(data, \"Data is required\")\n        guard.check_type(value, int, \"Must be integer\")\n        guard.else_return(\"Validation failed\")\n\n    return f\"Success: {value}, {data}\"\n\nresult = process(5, \"test\")  # \"Success: 5, test\"\nresult = process(-1, \"test\")  # \"Validation failed\"\n</code></pre>"},{"location":"22-hot-library/#combinators","title":"Combinators","text":""},{"location":"22-hot-library/#tap","title":"tap (\uc0ac\uc774\ub4dc \uc774\ud399\ud2b8)","text":"<p>\uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc774\ub4dc \uc774\ud399\ud2b8\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.hof.combinators import tap\nfrom rfs.hof.core import pipe\n\npipeline = pipe(\n    lambda x: x * 2,\n    tap(print),  # 10\uc744 \ucd9c\ub825\ud558\uc9c0\ub9cc \uac12\uc740 \ud1b5\uacfc\n    lambda x: x + 1\n)\nresult = pipeline(5)  # 11\n</code></pre>"},{"location":"22-hot-library/#when-unless","title":"when / unless (\uc870\uac74\ubd80 \ubcc0\ud658)","text":"<pre><code>from rfs.hof.combinators import when, unless\n\n# \uc870\uac74\uc774 \ucc38\uc77c \ub54c\ub9cc \ubcc0\ud658\ndouble_if_even = when(lambda x: x % 2 == 0, lambda x: x * 2)\nresult = double_if_even(4)  # 8\nresult = double_if_even(3)  # 3\n\n# \uc870\uac74\uc774 \uac70\uc9d3\uc77c \ub54c\ub9cc \ubcc0\ud658\nadd_one_unless_zero = unless(lambda x: x == 0, lambda x: x + 1)\nresult = add_one_unless_zero(5)  # 6\nresult = add_one_unless_zero(0)  # 0\n</code></pre>"},{"location":"22-hot-library/#cond","title":"cond (\ub2e4\uc911 \uc870\uac74 \ubd84\uae30)","text":"<pre><code>from rfs.hof.combinators import cond\n\ngrade = cond(\n    (lambda x: x &gt;= 90, lambda x: 'A'),\n    (lambda x: x &gt;= 80, lambda x: 'B'),\n    (lambda x: x &gt;= 70, lambda x: 'C'),\n    (lambda x: x &gt;= 60, lambda x: 'D'),\n    (lambda x: True, lambda x: 'F')  # \uae30\ubcf8\uac12\n)\n\nresult = grade(85)  # 'B'\nresult = grade(45)  # 'F'\n</code></pre>"},{"location":"22-hot-library/#converge","title":"converge (\uacb0\uacfc \uc218\ub834)","text":"<pre><code>from rfs.hof.combinators import converge\n\n# \ud3c9\uade0 \uacc4\uc0b0: sum / len\naverage = converge(\n    lambda total, count: total / count,\n    sum,\n    len\n)\nresult = average([1, 2, 3, 4, 5])  # 3.0\n</code></pre>"},{"location":"22-hot-library/#decorators","title":"Decorators","text":""},{"location":"22-hot-library/#memoize","title":"memoize (\uba54\ubaa8\uc774\uc81c\uc774\uc158)","text":"<pre><code>from rfs.hof.decorators import memoize\nfrom datetime import timedelta\nimport time\n\n@memoize(maxsize=100, ttl=timedelta(minutes=5))\ndef expensive_computation(x, y):\n    time.sleep(1)  # \ube44\uc2fc \uc5f0\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158\n    return x ** y\n\nresult1 = expensive_computation(2, 10)  # 1\ucd08 \uc18c\uc694\nresult2 = expensive_computation(2, 10)  # \uc989\uc2dc \ubc18\ud658 (\uce90\uc2dc\ub428)\n</code></pre>"},{"location":"22-hot-library/#throttle","title":"throttle (\uc2a4\ub85c\ud2c0\ub9c1)","text":"<pre><code>from rfs.hof.decorators import throttle\n\n@throttle(rate=3, per=1.0)  # \ucd08\ub2f9 \ucd5c\ub300 3\ud68c \ud638\ucd9c\ndef api_call():\n    print(f\"Called at {time.time()}\")\n\n# 5\ubc88 \ud638\ucd9c\ud574\ub3c4 \ucc98\uc74c 3\ubc88\ub9cc \uc989\uc2dc \uc2e4\ud589\nfor _ in range(5):\n    api_call()\n</code></pre>"},{"location":"22-hot-library/#debounce","title":"debounce (\ub514\ubc14\uc6b4\uc2f1)","text":"<pre><code>from rfs.hof.decorators import debounce\n\n@debounce(wait=0.5)\ndef save_document():\n    print(\"Document saved\")\n\n# \ube60\ub978 \uc5f0\uc18d \ud638\ucd9c\uc740 \ub9c8\uc9c0\ub9c9 \ud638\ucd9c \ud6c4 0.5\ucd08 \ub4a4\uc5d0 \ud55c \ubc88\ub9cc \uc2e4\ud589\nfor _ in range(10):\n    save_document()\n    time.sleep(0.1)\n</code></pre>"},{"location":"22-hot-library/#retry","title":"retry (\uc7ac\uc2dc\ub3c4)","text":"<pre><code>from rfs.hof.decorators import retry\n\n@retry(max_attempts=3, delay=1.0, backoff=2.0)\ndef unreliable_network_call():\n    # \ub54c\ub54c\ub85c \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \ub124\ud2b8\uc6cc\ud06c \ud638\ucd9c\n    import random\n    if random.random() &lt; 0.7:\n        raise ConnectionError(\"Network error\")\n    return \"Success\"\n</code></pre>"},{"location":"22-hot-library/#circuit_breaker","title":"circuit_breaker (\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4)","text":"<pre><code>from rfs.hof.decorators import circuit_breaker\n\n@circuit_breaker(failure_threshold=3, recovery_timeout=30)\ndef external_service_call():\n    # \uc678\ubd80 \uc11c\ube44\uc2a4 \ud638\ucd9c\n    # 3\ubc88 \uc2e4\ud328\ud558\uba74 30\ucd08 \ub3d9\uc548 \uc11c\ud0b7\uc774 \uc5f4\ub9bc\n    pass\n</code></pre>"},{"location":"22-hot-library/#async-hof","title":"Async HOF","text":""},{"location":"22-hot-library/#async_compose-async_pipe","title":"async_compose / async_pipe","text":"<pre><code>from rfs.hof.async_hof import async_compose, async_pipe\n\nasync def add_one(x):\n    return x + 1\n\nasync def multiply_two(x):\n    return x * 2\n\n# \ud569\uc131\ncomposed = async_compose(add_one, multiply_two)\nresult = await composed(3)  # 7\n\n# \ud30c\uc774\ud504\npiped = async_pipe(add_one, multiply_two)\nresult = await piped(3)  # 8\n</code></pre>"},{"location":"22-hot-library/#async_map-async_filter","title":"async_map / async_filter","text":"<pre><code>from rfs.hof.async_hof import async_map, async_filter\n\nasync def async_double(x):\n    await asyncio.sleep(0.1)\n    return x * 2\n\n# \ube44\ub3d9\uae30 \ub9f5\nresults = await async_map(async_double, [1, 2, 3])  # [2, 4, 6]\n\nasync def is_even(x):\n    await asyncio.sleep(0.1)\n    return x % 2 == 0\n\n# \ube44\ub3d9\uae30 \ud544\ud130\nresults = await async_filter(is_even, [1, 2, 3, 4, 5])  # [2, 4]\n</code></pre>"},{"location":"22-hot-library/#async_parallel-async_sequential","title":"async_parallel / async_sequential","text":"<pre><code>from rfs.hof.async_hof import async_parallel, async_sequential\n\nasync def task1():\n    await asyncio.sleep(1)\n    return 1\n\nasync def task2():\n    await asyncio.sleep(1)\n    return 2\n\n# \ubcd1\ub82c \uc2e4\ud589 (1\ucd08)\nresults = await async_parallel(task1(), task2())  # [1, 2]\n\n# \uc21c\ucc28 \uc2e4\ud589 (2\ucd08)\nresults = await async_sequential(task1(), task2())  # [1, 2]\n</code></pre>"},{"location":"22-hot-library/#async_retry","title":"async_retry","text":"<pre><code>from rfs.hof.async_hof import async_retry\n\n@async_retry(max_attempts=3, delay=1.0, backoff=2.0)\nasync def unreliable_async_call():\n    # \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc774 \uc801\uc6a9\ub41c \ube44\ub3d9\uae30 \ud568\uc218\n    pass\n</code></pre>"},{"location":"22-hot-library/#async_throttle","title":"async_throttle","text":"<pre><code>from rfs.hof.async_hof import async_throttle\n\nasync def api_call(x):\n    return x * 2\n\n# \ucd08\ub2f9 3\uac1c\uc529 \ucc98\ub9ac\nresults = await async_throttle(\n    api_call,\n    range(10),\n    rate=3,\n    per=1.0\n)\n</code></pre>"},{"location":"22-hot-library/#_4","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"22-hot-library/#_5","title":"\ud568\uc218\ud615 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131","text":"<pre><code>from rfs.hof import pipe, tap, when, Maybe\nfrom rfs.hof.collections import first, filter_indexed, group_by\n\n# \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\npipeline = pipe(\n    # 1. \ud544\ud130\ub9c1\n    lambda data: filter_indexed(\n        lambda i, x: i % 2 == 0 and x &gt; 0,\n        data\n    ),\n    # 2. \ubcc0\ud658\n    lambda data: [x * 2 for x in data],\n    # 3. \ub85c\uae45 (\uc0ac\uc774\ub4dc \uc774\ud399\ud2b8)\n    tap(lambda x: print(f\"Processing: {x}\")),\n    # 4. \uadf8\ub8f9\ud654\n    lambda data: group_by(lambda x: x % 10, data),\n    # 5. Maybe\ub85c \ub798\ud551\n    Maybe.just\n)\n\nresult = pipeline([1, -2, 3, -4, 5, 6, 7, 8, 9, 10])\n</code></pre>"},{"location":"22-hot-library/#_6","title":"\uc5d0\ub7ec \ucc98\ub9ac \uccb4\uc778","text":"<pre><code>from rfs.hof.monads import Result\nfrom rfs.hof.guard import with_guards, guard_type, guard_range\n\n@with_guards\ndef process_data(data):\n    # \ud0c0\uc785 \uccb4\ud06c\n    validated = guard_type(data, dict, else_return=Result.failure(\"Invalid type\"))\n\n    # \ubc94\uc704 \uccb4\ud06c\n    value = validated.get('value', 0)\n    checked = guard_range(value, 0, 100, else_return=Result.failure(\"Out of range\"))\n\n    # \ucc98\ub9ac\n    return Result.success(checked * 2)\n\n# \uc0ac\uc6a9\nresult = process_data({'value': 50})\nif result.is_success():\n    print(f\"Success: {result.unwrap()}\")\nelse:\n    print(f\"Error: {result.unwrap_error()}\")\n</code></pre>"},{"location":"22-hot-library/#_7","title":"\ube44\ub3d9\uae30 \uc791\uc5c5 \uc870\ud569","text":"<pre><code>from rfs.hof.async_hof import async_pipe, async_map, async_parallel\nfrom rfs.hof.decorators import memoize\n\n@memoize(maxsize=100)\nasync def fetch_user(user_id):\n    # API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n    await asyncio.sleep(1)\n    return {'id': user_id, 'name': f'User{user_id}'}\n\nasync def enrich_users(user_ids):\n    # \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\n    pipeline = async_pipe(\n        # 1. \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30 (\ubcd1\ub82c)\n        lambda ids: async_map(fetch_user, ids),\n        # 2. \ud65c\uc131 \uc0ac\uc6a9\uc790\ub9cc \ud544\ud130\n        lambda users: async_filter(\n            lambda u: u.get('active', True),\n            users\n        ),\n        # 3. \ucd94\uac00 \uc815\ubcf4 \ubcd1\ud569\n        lambda users: async_map(\n            lambda u: {**u, 'timestamp': time.time()},\n            users\n        )\n    )\n\n    return await pipeline(user_ids)\n\n# \uc2e4\ud589\nusers = await enrich_users([1, 2, 3, 4, 5])\n</code></pre>"},{"location":"22-hot-library/#_8","title":"\ubaa8\ubc94 \uc0ac\ub840","text":"<ol> <li>\ubd88\ubcc0\uc131 \uc720\uc9c0: HOF\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \ud56d\uc0c1 \ubd88\ubcc0\uc131\uc744 \uc720\uc9c0\ud558\uc138\uc694.</li> <li>\uc21c\uc218 \ud568\uc218 \uc791\uc131: \uc0ac\uc774\ub4dc \uc774\ud399\ud2b8\ub97c \ucd5c\uc18c\ud654\ud558\uace0 \uc608\uce21 \uac00\ub2a5\ud55c \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.</li> <li>\ud0c0\uc785 \ud78c\ud2b8 \uc0ac\uc6a9: \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc704\ud574 \ud0c0\uc785 \ud78c\ud2b8\ub97c \uc801\uadf9 \ud65c\uc6a9\ud558\uc138\uc694.</li> <li>\uc801\uc808\ud55c \ubaa8\ub098\ub4dc \uc120\ud0dd: Maybe\ub294 \uc635\uc154\ub110 \uac12, Either\ub294 \ubd84\uae30 \ucc98\ub9ac, Result\ub294 \uc5d0\ub7ec \ucc98\ub9ac\uc5d0 \uc0ac\uc6a9\ud558\uc138\uc694.</li> <li>Guard \ud328\ud134 \ud65c\uc6a9: \ubcf5\uc7a1\ud55c \uac80\uc99d \ub85c\uc9c1\uc740 guard \ud328\ud134\uc73c\ub85c \ub2e8\uc21c\ud654\ud558\uc138\uc694.</li> <li>\uba54\ubaa8\uc774\uc81c\uc774\uc158 \ud65c\uc6a9: \ube44\uc2fc \uc5f0\uc0b0\uc740 memoize\ub85c \ucd5c\uc801\ud654\ud558\uc138\uc694.</li> <li>\ube44\ub3d9\uae30 \uc870\ud569: \ube44\ub3d9\uae30 \uc791\uc5c5\uc740 async_parallel\ub85c \ubcd1\ub82c\ud654\ud558\uc5ec \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uc138\uc694.</li> </ol>"},{"location":"22-hot-library/#_9","title":"\uc131\ub2a5 \uace0\ub824\uc0ac\ud56d","text":"<ol> <li>\uba54\ubaa8\uc774\uc81c\uc774\uc158 \ud06c\uae30: \uce90\uc2dc \ud06c\uae30\ub97c \uc801\uc808\ud788 \uc124\uc815\ud558\uc5ec \uba54\ubaa8\ub9ac \uc0ac\uc6a9\uc744 \uc81c\uc5b4\ud558\uc138\uc694.</li> <li>\uc2a4\ub85c\ud2c0\ub9c1/\ub514\ubc14\uc6b4\uc2f1: API \ud638\ucd9c\uc774\ub098 UI \uc774\ubca4\ud2b8\uc5d0\ub294 \uc801\uc808\ud55c \uc81c\ud55c\uc744 \ub450\uc138\uc694.</li> <li>\ubcd1\ub82c \ucc98\ub9ac: async_parallel\uc744 \uc0ac\uc6a9\ud560 \ub54c\ub294 \ub3d9\uc2dc \uc2e4\ud589 \uc218\ub97c \uc81c\ud55c\ud558\uc138\uc694.</li> <li>\uc9c0\uc5f0 \ud3c9\uac00: \ud070 \ub370\uc774\ud130\uc14b\uc740 \uc81c\ub108\ub808\uc774\ud130\ub098 \uc9c0\uc5f0 \ud3c9\uac00\ub97c \ud65c\uc6a9\ud558\uc138\uc694.</li> </ol>"},{"location":"22-hot-library/#_10","title":"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uac00\uc774\ub4dc","text":"<p>\uae30\uc874 \ucf54\ub4dc\ub97c HOF \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ub9c8\uc774\uadf8\ub808\uc774\uc158\ud558\ub294 \ubc29\ubc95:</p>"},{"location":"22-hot-library/#before","title":"Before (\uae30\uc874 \ucf54\ub4dc)","text":"<pre><code>from functools import reduce\n\ndef compose(*functions):\n    return reduce(lambda f, g: lambda x: f(g(x)), functions, lambda x: x)\n\nresult = []\nfor item in items:\n    if item &gt; 0:\n        result.append(item * 2)\n</code></pre>"},{"location":"22-hot-library/#after-hof","title":"After (HOF \uc0ac\uc6a9)","text":"<pre><code>from rfs.hof import compose, pipe\nfrom rfs.hof.collections import filter_indexed, map_indexed\n\n# \ud568\uc218 \ud569\uc131\ncomposed = compose(func1, func2, func3)\n\n# \uceec\ub809\uc158 \ucc98\ub9ac\nresult = pipe(\n    lambda items: filter_indexed(lambda i, x: x &gt; 0, items),\n    lambda items: map_indexed(lambda i, x: x * 2, items)\n)(items)\n</code></pre>"},{"location":"22-hot-library/#_11","title":"\ucd94\uac00 \ub9ac\uc18c\uc2a4","text":"<ul> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uac1c\ub150</li> <li>Swift \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>Haskell \uc601\uac10</li> <li>Python functools</li> </ul>"},{"location":"23-profiles/","title":"17. Profiles","text":"<p>RFS Framework \ud504\ub85c\ud544 \uc124\uc815 \ubc0f \uad00\ub9ac \uc2dc\uc2a4\ud15c.</p>"},{"location":"23-profiles/#_1","title":"\ud504\ub85c\ud544 \uac1c\uc694","text":"<p>\ud504\ub85c\ud544\uc740 \ub2e4\uc591\ud55c \ud658\uacbd\uacfc \uc0ac\uc6a9 \uc0ac\ub840\uc5d0 \ub9de\uac8c RFS Framework\uc758 \ub3d9\uc791\uc744 \uad6c\uc131\ud560 \uc218 \uc788\ub294 \uc2dc\uc2a4\ud15c\uc785\ub2c8\ub2e4.</p>"},{"location":"23-profiles/#_2","title":"\uae30\ubcf8 \ud504\ub85c\ud544","text":"<ul> <li>development: \uac1c\ubc1c \ud658\uacbd\uc6a9 \uc124\uc815</li> <li>production: \uc6b4\uc601 \ud658\uacbd\uc6a9 \uc124\uc815</li> <li>testing: \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc6a9 \uc124\uc815</li> </ul>"},{"location":"23-profiles/#_3","title":"\ud504\ub85c\ud544 \uc124\uc815","text":"<pre><code>from rfs.core.config import get_config\n\n# \ud504\ub85c\ud544 \uae30\ubc18 \uc124\uc815 \ub85c\ub4dc\nconfig = get_config(profile=\"development\")\n</code></pre>"},{"location":"23-profiles/#_4","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Configuration - \uae30\ubcf8 \uc124\uc815 \uc2dc\uc2a4\ud15c</li> <li>Environment Variables - \ud658\uacbd \ubcc0\uc218 \uc124\uc815</li> </ul>"},{"location":"24-state-machine/","title":"17. State Machine","text":"<p>RFS Framework \uc0c1\ud0dc \uba38\uc2e0 \uc2dc\uc2a4\ud15c \ubc0f \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158.</p>"},{"location":"24-state-machine/#_1","title":"\uc0c1\ud0dc \uba38\uc2e0 \uac1c\uc694","text":"<p>\uc0c1\ud0dc \uba38\uc2e0\uc740 \ubcf5\uc7a1\ud55c \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc758 \uc0c1\ud0dc \uc804\uc774\uc640 \ud589\uc704\ub97c \uccb4\uacc4\uc801\uc73c\ub85c \uad00\ub9ac\ud560 \uc218 \uc788\ub294 \uc2dc\uc2a4\ud15c\uc785\ub2c8\ub2e4.</p>"},{"location":"24-state-machine/#_2","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from rfs.state_machine import StateMachine, State, Transition\n\n# \uc8fc\ubb38 \uc0c1\ud0dc \uba38\uc2e0 \uc815\uc758\norder_machine = StateMachine(\n    initial_state=\"pending\",\n    states=[\n        State(\"pending\", on_enter=lambda: print(\"Order pending\")),\n        State(\"paid\", on_enter=lambda: print(\"Payment received\")),\n        State(\"shipped\", on_enter=lambda: print(\"Order shipped\")),\n        State(\"delivered\", on_enter=lambda: print(\"Order delivered\"))\n    ],\n    transitions=[\n        Transition(\"pending\", \"paid\", trigger=\"pay\"),\n        Transition(\"paid\", \"shipped\", trigger=\"ship\"),\n        Transition(\"shipped\", \"delivered\", trigger=\"deliver\")\n    ]\n)\n\n# \uc0c1\ud0dc \uc804\uc774 \uc2e4\ud589\norder_machine.trigger(\"pay\")\norder_machine.trigger(\"ship\")\n</code></pre>"},{"location":"24-state-machine/#_3","title":"\uc870\uac74\ubd80 \uc804\uc774","text":"<pre><code>def can_ship(order):\n    return order.payment_confirmed and order.items_available\n\n# \uc870\uac74\ubd80 \uc804\uc774 \uc124\uc815\nTransition(\n    \"paid\", \"shipped\", \n    trigger=\"ship\", \n    condition=can_ship\n)\n</code></pre>"},{"location":"24-state-machine/#_4","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Event System - \uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c</li> <li>Transactions - \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc2a4\ud15c</li> <li>HOF Library - \ud568\uc218\ud615 \uc0c1\ud0dc \uad00\ub9ac \ud328\ud134</li> </ul>"},{"location":"99-implementation-status/","title":"Implementation Status &amp; TBD Items","text":""},{"location":"99-implementation-status/#_1","title":"\uac1c\uc694","text":"<p>RFS Framework v4.3.0\uc758 \ud604\uc7ac \uad6c\ud604 \uc0c1\ud0dc\uc640 \ud5a5\ud6c4 \uac1c\ubc1c\uc774 \ud544\uc694\ud55c \ud56d\ubaa9\ub4e4\uc744 \uc815\ub9ac\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4. \uc804\uccb4 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc57d 90% \uc644\uc131\ub418\uc5c8\uc73c\uba70, \ud504\ub85c\ub355\uc158 \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud55c \uc218\uc900\uc785\ub2c8\ub2e4.</p>"},{"location":"99-implementation-status/#_2","title":"\ud83d\udcca \uc804\uccb4 \uad6c\ud604 \ud604\ud669","text":""},{"location":"99-implementation-status/#stable","title":"\u2705 \uc644\uc131\ub41c \ubaa8\ub4c8 (Stable)","text":""},{"location":"99-implementation-status/#core-framework","title":"Core Framework","text":"<ul> <li>Result Pattern: \uc644\uc804\ud788 \uad6c\ud604\ub428</li> <li>Configuration Management: Pydantic \uae30\ubc18 \uc644\uc131</li> <li>Dependency Injection: \ub808\uc9c0\uc2a4\ud2b8\ub9ac \ud328\ud134 \uc644\uc131</li> <li>Type Safety: 100% \ud0c0\uc785 \ud78c\ud2b8 \uc801\uc6a9</li> </ul>"},{"location":"99-implementation-status/#reactive-programming","title":"Reactive Programming","text":"<ul> <li>Mono/Flux: \ubaa8\ub4e0 \uc5f0\uc0b0\uc790 \uad6c\ud604 \uc644\ub8cc</li> <li>Schedulers: \uba40\ud2f0\uc2a4\ub808\ub529/\ube44\ub3d9\uae30 \uc9c0\uc6d0</li> <li>Backpressure: \uc790\ub3d9 \ud750\ub984 \uc81c\uc5b4 \uad6c\ud604</li> </ul>"},{"location":"99-implementation-status/#advanced-patterns","title":"Advanced Patterns","text":"<ul> <li>State Machine: \ud568\uc218\ud615 \uc0c1\ud0dc \uad00\ub9ac \uc644\uc131</li> <li>Event Sourcing: CQRS \ud328\ud134 \uad6c\ud604</li> <li>Saga Pattern: \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 \uc644\uc131</li> <li>Circuit Breaker: \uc7a5\uc560 \uaca9\ub9ac \uc644\uc131</li> </ul>"},{"location":"99-implementation-status/#production-features","title":"Production Features","text":"<ul> <li>Security Module: \uc778\uc99d/\uc778\uac00, \uc554\ud638\ud654 \uc644\uc131</li> <li>CLI Interface: Rich UI \ud1b5\ud569 \uc644\uc131</li> <li>Testing Framework: \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0</li> </ul>"},{"location":"99-implementation-status/#tbd","title":"\ud83d\udea7 \ubbf8\uc644\uc131 \ud56d\ubaa9 (TBD)","text":""},{"location":"99-implementation-status/#1-critical-fixes-completed-2025-08-25","title":"1. Critical Fixes \u2705 COMPLETED (2025-08-25)","text":""},{"location":"99-implementation-status/#production-monitor-srcrfsproductionmonitoringproduction_monitorpy","title":"\u2705 Production Monitor (<code>src/rfs/production/monitoring/production_monitor.py</code>)","text":"<pre><code># FIXED: Line 156-162\n# \ud574\uacb0: metrics_data.update() \uba54\uc11c\ub4dc \uc0ac\uc6a9\uc73c\ub85c \uc548\uc804\ud55c \ubcd1\ud569\n# \uad6c\ud604: \uc2dc\uc2a4\ud15c, \uc560\ud50c\ub9ac\ucf00\uc774\uc158, \ub124\ud2b8\uc6cc\ud06c \uba54\ud2b8\ub9ad \uc62c\ubc14\ub974\uac8c \uc218\uc9d1\n# \ud14c\uc2a4\ud2b8: tests/unit/production/test_production_monitor.py \uc791\uc131 \uc644\ub8cc\n</code></pre>"},{"location":"99-implementation-status/#readiness-check-srcrfsproductionreadinesspy","title":"\u2705 Readiness Check (<code>src/rfs/production/readiness.py</code>)","text":"<pre><code># FIXED: Line 158, 164\n# \ud574\uacb0: progress.update(task, completed=100) \ud638\ucd9c\ub85c \uc9c4\ud589 \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8\n# \uad6c\ud604: \uac01 \uac80\uc99d \ub2e8\uacc4 \uc644\ub8cc \uc2dc progress bar \uc5c5\ub370\uc774\ud2b8\n# \uac1c\uc120: \uc624\ub958 \ubc1c\uc0dd \uc2dc\uc5d0\ub3c4 progress \uc5c5\ub370\uc774\ud2b8 \ucc98\ub9ac\n</code></pre>"},{"location":"99-implementation-status/#optimizer-srcrfsoptimizationoptimizerpy","title":"\u2705 Optimizer (<code>src/rfs/optimization/optimizer.py</code>)","text":"<pre><code># FIXED: Line 175\n# \ud574\uacb0: progress.update(task_id, completed=100) \ud638\ucd9c\ub85c \uc9c4\ud589 \ucd94\uc801\n# \uad6c\ud604: \uac01 \ucd5c\uc801\ud654 \uc791\uc5c5 \uc644\ub8cc \uc2dc \uc9c4\ud589\ub960 \ud45c\uc2dc\n# \uac1c\uc120: Rich Progress \uac1d\uccb4 \uc62c\ubc14\ub974\uac8c \ud65c\uc6a9\n</code></pre>"},{"location":"99-implementation-status/#2-incomplete-implementations","title":"2. Incomplete Implementations","text":""},{"location":"99-implementation-status/#analytics-module","title":"Analytics Module","text":"<p>\uc704\uce58: <code>src/rfs/analytics/</code></p> <p>\ubbf8\uad6c\ud604 \ud56d\ubaa9: - <code>kpi.py</code>:    - Line 135, 360, 595: KPI \uacc4\uc0b0 \ub85c\uc9c1 \ubbf8\uad6c\ud604 (pass)   - \ud544\uc694: \uc2e4\uc81c KPI \uacc4\uc0b0 \uc54c\uace0\ub9ac\uc998 \uad6c\ud604</p> <ul> <li><code>reports.py</code>:</li> <li>Line 117, 122: \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \ub85c\uc9c1 \ubbf8\uad6c\ud604 (pass)</li> <li> <p>\ud544\uc694: PDF/HTML \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uae30\ub2a5</p> </li> <li> <p><code>dashboard.py</code>:</p> </li> <li>Line 111: \ub300\uc2dc\ubcf4\ub4dc \ub80c\ub354\ub9c1 \ubbf8\uad6c\ud604 (pass)</li> <li> <p>\ud544\uc694: \uc2e4\uc2dc\uac04 \ub300\uc2dc\ubcf4\ub4dc UI \uad6c\ud604</p> </li> <li> <p><code>visualization.py</code>:</p> </li> <li>Line 92, 97: \ucc28\ud2b8 \ub80c\ub354\ub9c1 \ubbf8\uad6c\ud604 (pass)</li> <li> <p>\ud544\uc694: \ucc28\ud2b8 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud1b5\ud569</p> </li> <li> <p><code>charts.py</code>:</p> </li> <li>Line 129: \ucc28\ud2b8 \uc0dd\uc131 \ub85c\uc9c1 \ubbf8\uad6c\ud604 (pass)</li> <li> <p>\ud544\uc694: \ub2e4\uc591\ud55c \ucc28\ud2b8 \ud0c0\uc785 \uc9c0\uc6d0</p> </li> <li> <p><code>data_source.py</code>:</p> </li> <li>Line 67, 72, 79, 84, 100: \ub370\uc774\ud130 \uc18c\uc2a4 \uc5f0\uacb0 \ubbf8\uad6c\ud604 (pass)</li> <li>\ud544\uc694: DB/API \uc5f0\uacb0 \uc5b4\ub311\ud130</li> </ul>"},{"location":"99-implementation-status/#gateway-module","title":"Gateway Module","text":"<p>\uc704\uce58: <code>src/rfs/gateway/rest.py</code></p> <p>\ubbf8\uad6c\ud604 \ud56d\ubaa9: - Line 129: \uc778\uc99d \ubbf8\ub4e4\uc6e8\uc5b4 \ubbf8\uad6c\ud604 (pass) - Line 212, 219: API \ud578\ub4e4\ub7ec \ubbf8\uad6c\ud604 (pass) - \ud544\uc694: JWT \uc778\uc99d, \uad8c\ud55c \uccb4\ud06c, \uc694\uccad \ucc98\ub9ac</p>"},{"location":"99-implementation-status/#cloud-run-helpers","title":"Cloud Run Helpers","text":"<p>\uc704\uce58: <code>src/rfs/cloud_run/</code></p> <p>\ubbf8\uad6c\ud604 \ud56d\ubaa9: - <code>helpers.py</code> Line 492: \ud5ec\ud37c \ud568\uc218 \ubbf8\uad6c\ud604 (pass) - <code>service_discovery.py</code> Line 508: \uc11c\ube44\uc2a4 \ubc1c\uacac \ub85c\uc9c1 \uc77c\ubd80 \ubbf8\uad6c\ud604 - <code>autoscaling.py</code> Line 617: \uc790\ub3d9 \uc2a4\ucf00\uc77c\ub9c1 \ub85c\uc9c1 \uc77c\ubd80 \ubbf8\uad6c\ud604</p>"},{"location":"99-implementation-status/#3-template-todos","title":"3. Template TODOs","text":""},{"location":"99-implementation-status/#project-templates","title":"Project Templates","text":"<p>\uc704\uce58: <code>src/rfs/cli/commands/project.py</code></p> <p>\uc0dd\uc131\ub418\ub294 \uc11c\ube44\uc2a4 \ud15c\ud50c\ub9bf\uc5d0 \ud3ec\ud568\ub41c TODO: <pre><code># TODO: \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uad6c\ud604\n# TODO: \uac80\uc99d \ub85c\uc9c1 \uad6c\ud604\n</code></pre></p>"},{"location":"99-implementation-status/#test-templates","title":"Test Templates","text":"<p>\uc704\uce58: <code>src/rfs/cli/testing/test_runner.py</code></p> <p>\uc0dd\uc131\ub418\ub294 \ud14c\uc2a4\ud2b8 \ud15c\ud50c\ub9bf\uc5d0 \ud3ec\ud568\ub41c TODO: <pre><code># TODO: \uc2e4\uc81c \ud14c\uc2a4\ud2b8 \uad6c\ud604\n</code></pre></p>"},{"location":"99-implementation-status/#_3","title":"\ud83d\udcc8 \uac1c\uc120 \uacc4\ud68d","text":""},{"location":"99-implementation-status/#phase-1-critical-fixes-completed-2025-08-25","title":"Phase 1: Critical Fixes \u2705 COMPLETED (2025-08-25)","text":"<p>\uacb0\uacfc: \ubaa8\ub4e0 \uae34\uae09 \uc218\uc815 \uc0ac\ud56d \uc644\ub8cc - [x] Production Monitor \uba54\ud2b8\ub9ad \ubcd1\ud569 \ub85c\uc9c1 \uc218\uc815 \u2705 - [x] Readiness Check \uc9c4\ud589 \uc0c1\ud0dc \ucd94\uc801 \uc218\uc815 \u2705 - [x] Optimizer \uc9c4\ud589 \ucd94\uc801 \uac1c\uc120 \u2705 - [x] \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131 \uc644\ub8cc \u2705</p>"},{"location":"99-implementation-status/#phase-2-core-completions","title":"Phase 2: Core Completions (\ub2e8\uae30)","text":"<p>\ubaa9\ud45c: 2-3\uc8fc \ub0b4 \uc644\ub8cc - [ ] Analytics \ubaa8\ub4c8 KPI \uacc4\uc0b0 \uad6c\ud604 - [ ] Analytics \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uae30\ub2a5 \uad6c\ud604 - [ ] Gateway REST \ud578\ub4e4\ub7ec \uc644\uc131 - [ ] Gateway \uc778\uc99d/\uc778\uac00 \ubbf8\ub4e4\uc6e8\uc5b4 \uad6c\ud604</p>"},{"location":"99-implementation-status/#phase-3-enhancement","title":"Phase 3: Enhancement (\uc911\uae30)","text":"<p>\ubaa9\ud45c: 1-2\uac1c\uc6d4 \ub0b4 \uc644\ub8cc - [ ] Analytics \ub300\uc2dc\ubcf4\ub4dc UI \uad6c\ud604 - [ ] Analytics \ucc28\ud2b8 \ub80c\ub354\ub9c1 \uc644\uc131 - [ ] Cloud Run \ud5ec\ud37c \ud568\uc218 \uc644\uc131 - [ ] \ud15c\ud50c\ub9bf \uac1c\uc120 \ubc0f \uc608\uc81c \ucd94\uac00</p>"},{"location":"99-implementation-status/#phase-4-polish","title":"Phase 4: Polish (\uc7a5\uae30)","text":"<p>\ubaa9\ud45c: 3\uac1c\uc6d4 \ub0b4 \uc644\ub8cc - [ ] \ubaa8\ub4e0 pass statement \uc81c\uac70 - [ ] 100% \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 \ub2ec\uc131 - [ ] \uc131\ub2a5 \ucd5c\uc801\ud654 - [ ] \ubb38\uc11c\ud654 \uc644\uc131</p>"},{"location":"99-implementation-status/#_4","title":"\ud83d\udd0d \uc601\ud5a5\ub3c4 \ubd84\uc11d","text":""},{"location":"99-implementation-status/#high-priority-resolved","title":"High Priority \u2705 RESOLVED","text":"<ol> <li>Production Monitor: \u2705 \uba54\ud2b8\ub9ad \uc218\uc9d1 \uc815\uc0c1\ud654</li> <li>Readiness Check: \u2705 \uc9c4\ud589 \uc0c1\ud0dc \ucd94\uc801 \uc815\uc0c1\ud654</li> <li>Optimizer: \u2705 \ucd5c\uc801\ud654 \ubaa8\ub2c8\ud130\ub9c1 \uc815\uc0c1\ud654</li> </ol>"},{"location":"99-implementation-status/#medium-priority","title":"Medium Priority (\uae30\ub2a5 \uc81c\ud55c)","text":"<ol> <li>Analytics Module: \ubd84\uc11d \uae30\ub2a5 \uc0ac\uc6a9 \ubd88\uac00</li> <li>Optimizer: \ucd5c\uc801\ud654 \ubaa8\ub2c8\ud130\ub9c1 \uc81c\ud55c</li> </ol>"},{"location":"99-implementation-status/#low-priority","title":"Low Priority (\ud3b8\uc758 \uae30\ub2a5)","text":"<ol> <li>Templates: \uc218\ub3d9\uc73c\ub85c \ucf54\ub4dc \uc791\uc131 \ud544\uc694</li> <li>Helpers: \ub300\uccb4 \ubc29\ubc95 \uc0ac\uc6a9 \uac00\ub2a5</li> </ol>"},{"location":"99-implementation-status/#_5","title":"\ud83d\udee0\ufe0f \uae30\uc5ec \uac00\uc774\ub4dc","text":""},{"location":"99-implementation-status/#_6","title":"\uc6b0\uc120\uc21c\uc704\ubcc4 \uc791\uc5c5 \ubc29\ubc95","text":""},{"location":"99-implementation-status/#critical-fixes","title":"Critical Fixes \uc791\uc5c5","text":"<pre><code># 1. \uc774\uc288 \uc0dd\uc131\n# GitHub Issues\uc5d0 [CRITICAL] \ud0dc\uadf8\ub85c \uc774\uc288 \uc0dd\uc131\n\n# 2. \ube0c\ub79c\uce58 \uc0dd\uc131\ngit checkout -b fix/critical-monitor-metrics\n\n# 3. \uc218\uc815 \ubc0f \ud14c\uc2a4\ud2b8\n# \ucf54\ub4dc \uc218\uc815 \ud6c4 \ubc18\ub4dc\uc2dc \ud14c\uc2a4\ud2b8 \uc791\uc131\n\n# 4. PR \uc0dd\uc131\n# PR \uc81c\ubaa9: [CRITICAL] Fix monitor metrics merging logic\n</code></pre>"},{"location":"99-implementation-status/#module-completion","title":"Module Completion \uc791\uc5c5","text":"<pre><code># 1. \ubaa8\ub4c8\ubcc4 \uc774\uc288 \uc0dd\uc131\n# [MODULE: Analytics] \ud0dc\uadf8 \uc0ac\uc6a9\n\n# 2. \ub2e8\uacc4\uc801 \uad6c\ud604\n# \uc791\uc740 \ub2e8\uc704\ub85c \ub098\ub204\uc5b4 \uad6c\ud604\n\n# 3. \ubb38\uc11c\ud654\n# \uad6c\ud604\uacfc \ud568\uaed8 \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8\n</code></pre>"},{"location":"99-implementation-status/#_7","title":"\ud83d\udcca \uc9c4\ud589 \uc0c1\ud669 \ucd94\uc801","text":""},{"location":"99-implementation-status/#_8","title":"\uba54\ud2b8\ub9ad","text":"<ul> <li>\uc804\uccb4 \uc644\uc131\ub3c4: 93% (90% \u2192 93% \ud5a5\uc0c1)</li> <li>Critical Issues: 0\uac1c (3\uac1c \u2192 0\uac1c \ud574\uacb0) \u2705</li> <li>Incomplete Modules: 3\uac1c (Analytics, Gateway, Cloud Run)</li> <li>Template TODOs: \ub2e4\uc218</li> </ul>"},{"location":"99-implementation-status/#_9","title":"\ubaa9\ud45c","text":"<ul> <li>v4.1: 95% \uc644\uc131 (Critical fixes \uc644\ub8cc)</li> <li>v4.2: 98% \uc644\uc131 (Core completions \uc644\ub8cc)</li> <li>v5.0: 100% \uc644\uc131 (\ubaa8\ub4e0 TBD \ud574\uacb0)</li> </ul>"},{"location":"99-implementation-status/#_10","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>TODO.md - \ubbf8\uc644\uc131 \uae30\ub2a5 \ucd94\uc801 \ubb38\uc11c (NEW)</li> <li>CONTRIBUTING.md - \uae30\uc5ec \ubc29\ubc95</li> <li>Issue Tracker - \uc774\uc288 \uad00\ub9ac</li> </ul>"},{"location":"99-implementation-status/#_11","title":"\ud83d\udcdd \uc5c5\ub370\uc774\ud2b8 \uc774\ub825","text":"<ul> <li>2025-08-25: \ucd08\uae30 \ubb38\uc11c \uc791\uc131</li> <li>2025-08-25: TODO/FIXME \uc2a4\uce94 \uc644\ub8cc</li> <li>2025-08-25: \uc6b0\uc120\uc21c\uc704 \ubc0f \uac1c\uc120 \uacc4\ud68d \uc218\ub9bd</li> <li>2025-08-25: \u2705 Phase 1 \uc644\ub8cc - \ubaa8\ub4e0 Critical Fixes \ud574\uacb0</li> <li>Production Monitor \uba54\ud2b8\ub9ad \ubcd1\ud569 \uc218\uc815</li> <li>Readiness Check \uc9c4\ud589 \ucd94\uc801 \uc218\uc815</li> <li>Optimizer \uc9c4\ud589 \ucd94\uc801 \uc218\uc815</li> <li>\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131 \uc644\ub8cc</li> <li>2025-08-25: \ud83d\udcdd TODO.md \uc0dd\uc131 - \ubbf8\uc644\uc131 \uae30\ub2a5 \ucd94\uc801 \ubb38\uc11c</li> <li>\uc0c1\uc138\ud55c TODO \ubaa9\ub85d\uc740 TODO.md \ucc38\uc870</li> </ul> <p>\uc774 \ubb38\uc11c\ub294 \ucf54\ub4dc\ubca0\uc774\uc2a4\uc758 \uc2e4\uc81c \uc0c1\ud0dc\ub97c \ubc18\uc601\ud558\uc5ec \uc9c0\uc18d\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub429\ub2c8\ub2e4.  \uae30\uc5ec\uc790\ub294 \uc791\uc5c5 \uc804 \uc774 \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc5ec \uc911\ubcf5 \uc791\uc5c5\uc744 \ubc29\uc9c0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"API_REFERENCE/","title":"API Reference","text":"<p>RFS Framework API \uc804\uccb4 \ucc38\uc870 \ubb38\uc11c.</p>"},{"location":"API_REFERENCE/#core-apis","title":"Core APIs","text":"<ul> <li>Result Pattern - \uc624\ub958 \ucc98\ub9ac \ubc0f \uacb0\uacfc \uad00\ub9ac</li> <li>Configuration - \uc124\uc815 \ubc0f \ud658\uacbd \ubcc0\uc218</li> <li>Registry - \uc758\uc874\uc131 \uc8fc\uc785 \ubc0f \ub808\uc9c0\uc2a4\ud2b8\ub9ac</li> <li>Annotations - \ub370\ucf54\ub808\uc774\ud130 \ubc0f \uc5b4\ub178\ud14c\uc774\uc158</li> </ul>"},{"location":"API_REFERENCE/#higher-order-functions-hof","title":"Higher-Order Functions (HOF)","text":"<ul> <li>Core Functions - \uae30\ubcf8 \uace0\ucc28 \ud568\uc218</li> <li>Collections - \ucef4\ub809\uc158 \ucc98\ub9ac \ud568\uc218</li> <li>Monads - \ubaa8\ub098\ub4dc \ud328\ud134 \uad6c\ud604</li> </ul>"},{"location":"API_REFERENCE/#reactive-programming","title":"Reactive Programming","text":"<ul> <li>Mono - \ub2e8\uc77c \uac12 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc</li> <li>Flux - \ub2e4\uc911 \uac12 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc</li> </ul>"},{"location":"API_REFERENCE/#_1","title":"\uace0\uae09 \uae30\ub2a5","text":"<ul> <li>Database - \ub370\uc774\ud130\ubca0\uc774\uc2a4 ORM \uc2dc\uc2a4\ud15c</li> <li>Event System - \uc774\ubca4\ud2b8 \ubc84\uc2a4 \uc2dc\uc2a4\ud15c</li> <li>State Machine - \uc0c1\ud0dc \uba38\uc2e0 \uc2dc\uc2a4\ud15c</li> <li>Security - \ubcf4\uc548 \ubc0f \uc778\uc99d \uc2dc\uc2a4\ud15c</li> <li>Monitoring - \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \ub85c\uae45</li> <li>Validation - \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc0ac</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to RFS Framework","text":"<p>RFS Framework\ub294 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc785\ub2c8\ub2e4. \uae30\uc5ec\ub97c \ud658\uc601\ud569\ub2c8\ub2e4!</p>"},{"location":"CONTRIBUTING/#_1","title":"\ud83d\ude80 \uc2dc\uc791\ud558\uae30","text":""},{"location":"CONTRIBUTING/#1","title":"1. \uac1c\ubc1c \ud658\uacbd \uc124\uc815","text":"<pre><code># \uc800\uc7a5\uc18c \ud3ec\ud06c \ubc0f \ud074\ub860\ngit clone https://github.com/interactord/rfs-framework.git\ncd rfs-framework\n\n# \uac00\uc0c1\ud658\uacbd \uc0dd\uc131 \ubc0f \ud65c\uc131\ud654\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# \ub610\ub294\nvenv\\Scripts\\activate  # Windows\n\n# \uac1c\ubc1c\uc6a9 \uc758\uc874\uc131 \uc124\uce58\npip install -e \".[dev,test,docs]\"\n\n# \ud504\ub9ac\ucee4\ubc0b \ud6c5 \uc124\uc815\npre-commit install\n</code></pre>"},{"location":"CONTRIBUTING/#2","title":"2. \uac1c\ubc1c \uc6cc\ud06c\ud50c\ub85c\uc6b0","text":"<pre><code># \uc0c8 \ube0c\ub79c\uce58 \uc0dd\uc131\ngit checkout -b feature/awesome-feature\n\n# \ucf54\ub4dc \uc791\uc131\n# ...\n\n# \ud14c\uc2a4\ud2b8 \uc2e4\ud589\npytest tests/\n\n# \ucf54\ub4dc \ud488\uc9c8 \uac80\uc0ac\nblack src/\nisort src/\nmypy src/\n\n# \ucee4\ubc0b \ubc0f \ud478\uc2dc\ngit add .\ngit commit -m \"feat: add awesome feature\"\ngit push origin feature/awesome-feature\n</code></pre>"},{"location":"CONTRIBUTING/#_2","title":"\ud83d\udcdd \uae30\uc5ec \uac00\uc774\ub4dc\ub77c\uc778","text":""},{"location":"CONTRIBUTING/#_3","title":"\ucf54\ub4dc \uc2a4\ud0c0\uc77c","text":"<ul> <li>Python: PEP 8 \uc900\uc218, Black \ud3ec\ub9f7\ud130 \uc0ac\uc6a9</li> <li>\ud0c0\uc785 \ud78c\ud2b8: \ubaa8\ub4e0 \uacf5\uac1c API\uc5d0 \ud0c0\uc785 \ud78c\ud2b8 \ud544\uc218</li> <li>Docstring: Google \uc2a4\ud0c0\uc77c docstring \uc0ac\uc6a9</li> <li>\ud14c\uc2a4\ud2b8: \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \ucf54\ub4dc \ud544\uc218</li> </ul>"},{"location":"CONTRIBUTING/#_4","title":"\ucee4\ubc0b \uba54\uc2dc\uc9c0 \uaddc\uce59","text":"<pre><code>feat: \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \ucd94\uac00\nfix: \ubc84\uadf8 \uc218\uc815\ndocs: \ubb38\uc11c \uc218\uc815\nstyle: \ucf54\ub4dc \ud3ec\ub9f7\ud305\nrefactor: \ucf54\ub4dc \ub9ac\ud329\ud1a0\ub9c1\ntest: \ud14c\uc2a4\ud2b8 \ucf54\ub4dc \ucd94\uac00/\uc218\uc815\nchore: \ube4c\ub4dc \ud504\ub85c\uc138\uc2a4 \ub610\ub294 \ub3c4\uad6c \ubcc0\uacbd\n</code></pre>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull Request \uac00\uc774\ub4dc\ub77c\uc778","text":"<ol> <li>\uba85\ud655\ud55c \uc81c\ubaa9: \ubcc0\uacbd\uc0ac\ud56d\uc744 \uac04\uacb0\ud558\uac8c \uc124\uba85</li> <li>\uc0c1\uc138\ud55c \uc124\uba85: \ubcc0\uacbd \uc774\uc720\uc640 \ubc29\ubc95\uc744 \uc124\uba85</li> <li>\ud14c\uc2a4\ud2b8 \uacb0\uacfc: \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\uac00 \ud1b5\uacfc\ud558\ub294\uc9c0 \ud655\uc778</li> <li>\ubb38\uc11c \uc5c5\ub370\uc774\ud2b8: \ud544\uc694\uc2dc \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8 \ud3ec\ud568</li> </ol>"},{"location":"CONTRIBUTING/#_5","title":"\ud83e\uddea \ud14c\uc2a4\ud2b8","text":""},{"location":"CONTRIBUTING/#_6","title":"\ub2e8\uc704 \ud14c\uc2a4\ud2b8","text":"<pre><code># \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\npytest\n\n# \ud2b9\uc815 \ubaa8\ub4c8 \ud14c\uc2a4\ud2b8\npytest tests/unit/core/\n\n# \ucee4\ubc84\ub9ac\uc9c0 \ud655\uc778\npytest --cov=rfs --cov-report=html\n</code></pre>"},{"location":"CONTRIBUTING/#_7","title":"\ud1b5\ud569 \ud14c\uc2a4\ud2b8","text":"<pre><code># \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\npytest tests/integration/\n\n# \uc131\ub2a5 \ud14c\uc2a4\ud2b8\npytest tests/performance/\n</code></pre>"},{"location":"CONTRIBUTING/#_8","title":"\ud83d\udcd6 \ubb38\uc11c\ud654","text":""},{"location":"CONTRIBUTING/#wiki","title":"Wiki \ubb38\uc11c","text":"<ul> <li>\ubaa8\ub4e0 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc740 wiki \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8 \ud544\uc694</li> <li><code>wiki/</code> \ub514\ub809\ud1a0\ub9ac\uc758 \uc801\uc808\ud55c \ud30c\uc77c\uc5d0 \ucd94\uac00</li> <li>\ud55c\uad6d\uc5b4\ub85c \uc791\uc131, \uc608\uc81c \ucf54\ub4dc \ud3ec\ud568</li> </ul>"},{"location":"CONTRIBUTING/#api","title":"API \ubb38\uc11c","text":"<ul> <li>Docstring\uc740 Google \uc2a4\ud0c0\uc77c \uc0ac\uc6a9</li> <li>\ub9e4\uac1c\ubcc0\uc218, \ubc18\ud658\uac12, \uc608\uc678 \uc0c1\ud669 \ubaa8\ub450 \ubb38\uc11c\ud654</li> <li>\uc0ac\uc6a9 \uc608\uc81c \ud3ec\ud568 \uad8c\uc7a5</li> </ul>"},{"location":"CONTRIBUTING/#_9","title":"\ud83d\udc1b \ubc84\uadf8 \ub9ac\ud3ec\ud2b8","text":"<p>\ubc84\uadf8\ub97c \ubc1c\uacac\ud558\uc2dc\uba74 GitHub Issues\uc5d0 \ub2e4\uc74c \uc815\ubcf4\uc640 \ud568\uaed8 \ub9ac\ud3ec\ud2b8\ud574 \uc8fc\uc138\uc694:</p>"},{"location":"CONTRIBUTING/#_10","title":"\ubc84\uadf8 \ub9ac\ud3ec\ud2b8 \ud15c\ud50c\ub9bf","text":"<pre><code>**\ud658\uacbd \uc815\ubcf4**\n- Python \ubc84\uc804:\n- RFS Framework \ubc84\uc804:\n- \uc6b4\uc601\uccb4\uc81c:\n\n**\ubc84\uadf8 \uc124\uba85**\n\ubc84\uadf8\uc5d0 \ub300\ud55c \uba85\ud655\ud558\uace0 \uac04\uacb0\ud55c \uc124\uba85\n\n**\uc7ac\ud604 \ub2e8\uacc4**\n1. '...'\ub85c \uc774\ub3d9\n2. '...'\ub97c \ud074\ub9ad\n3. '...'\uae4c\uc9c0 \uc2a4\ud06c\ub864\n4. \uc624\ub958 \ubc1c\uc0dd\n\n**\uc608\uc0c1 \ub3d9\uc791**\n\uc608\uc0c1\ud588\ub358 \ub3d9\uc791\uc5d0 \ub300\ud55c \uba85\ud655\ud558\uace0 \uac04\uacb0\ud55c \uc124\uba85\n\n**\uc2e4\uc81c \ub3d9\uc791**\n\uc2e4\uc81c \ubc1c\uc0dd\ud55c \ub3d9\uc791\uc5d0 \ub300\ud55c \uc124\uba85\n\n**\uc2a4\ud06c\ub9b0\uc0f7**\n\ud574\ub2f9\ub418\ub294 \uacbd\uc6b0 \uc2a4\ud06c\ub9b0\uc0f7\uc744 \ucca8\ubd80\n\n**\ucd94\uac00 \ucee8\ud14d\uc2a4\ud2b8**\n\uc774 \ubb38\uc81c\uc5d0 \ub300\ud55c \uae30\ud0c0 \ucee8\ud14d\uc2a4\ud2b8\ub97c \uc5ec\uae30\uc5d0 \ucd94\uac00\n</code></pre>"},{"location":"CONTRIBUTING/#_11","title":"\ud83c\udfaf \uae30\uc5ec \uc601\uc5ed","text":""},{"location":"CONTRIBUTING/#_12","title":"\uc6b0\uc120\uc21c\uc704 \ub192\uc74c","text":"<ul> <li>\ubc84\uadf8 \uc218\uc815</li> <li>\uc131\ub2a5 \uac1c\uc120</li> <li>\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 \ud5a5\uc0c1</li> <li>\ubb38\uc11c\ud654 \uac1c\uc120</li> </ul>"},{"location":"CONTRIBUTING/#_13","title":"\ud658\uc601\ud558\ub294 \uae30\uc5ec","text":"<ul> <li>\uc0c8\ub85c\uc6b4 \uae30\ub2a5 \ucd94\uac00</li> <li>\uc608\uc81c \ucf54\ub4dc \uac1c\uc120</li> <li>\ud29c\ud1a0\ub9ac\uc5bc \uc791\uc131</li> <li>\ubc88\uc5ed \uc791\uc5c5</li> </ul>"},{"location":"CONTRIBUTING/#_14","title":"\uac1c\ubc1c \uc911\uc778 \uae30\ub2a5","text":"<p>\ud604\uc7ac \uac1c\ubc1c \uc911\uc778 \uae30\ub2a5\uc740 TODO.md\ub97c \ucc38\uc870\ud558\uc138\uc694.</p>"},{"location":"CONTRIBUTING/#_15","title":"\ud83d\udcde \uc5f0\ub77d\ucc98","text":"<p>\uc9c8\ubb38\uc774\ub098 \uc81c\uc548\uc0ac\ud56d\uc774 \uc788\uc73c\uc2dc\uba74 \uc5b8\uc81c\ub4e0\uc9c0 \uc5f0\ub77d\ud574 \uc8fc\uc138\uc694:</p> <ul> <li>GitHub Issues: \ubc84\uadf8 \ub9ac\ud3ec\ud2b8, \uae30\ub2a5 \uc694\uccad</li> <li>Discord: \uc2e4\uc2dc\uac04 \ud1a0\ub860 \ubc0f \uc9c8\uc758\uc751\ub2f5</li> <li>Email: support@rfs-framework.dev</li> </ul>"},{"location":"CONTRIBUTING/#_16","title":"\ud83d\udcc4 \ub77c\uc774\uc120\uc2a4","text":"<p>\uae30\uc5ec\ud558\uc2e0 \ucf54\ub4dc\ub294 \ud504\ub85c\uc81d\ud2b8\uc758 MIT \ub77c\uc774\uc120\uc2a4 \ud558\uc5d0 \ubc30\ud3ec\ub429\ub2c8\ub2e4.</p> <p>RFS Framework \ud300\uacfc \ud568\uaed8 \ub354 \ub098\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ub9cc\ub4e4\uc5b4 \ub098\uac00\uc694! \ud83d\ude80</p>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/","title":"RFS Framework \uae30\ubc18 \uc5d4\ud130\ud504\ub77c\uc774\uc988 \uc11c\ubc84 \uc544\ud0a4\ud14d\ucc98 \uac00\uc774\ub4dc","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_1","title":"\ubaa9\ucc28","text":"<ol> <li>\uac1c\uc694</li> <li>\ud575\uc2ec \uc6d0\uce59</li> <li>\ud3f4\ub354 \uad6c\uc870</li> <li>\ub808\uc774\uc5b4\ubcc4 \uc0c1\uc138 \uc124\uba85</li> <li>\uad6c\ud604 \uc608\uc81c</li> <li>\ubc30\ud3ec \uad6c\uc870</li> <li>\ubaa8\ubc94 \uc0ac\ub840</li> </ol>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_2","title":"\uac1c\uc694","text":"<p>RFS Framework\ub97c \uae30\ubc18\uc73c\ub85c \ud55c \uc5d4\ud130\ud504\ub77c\uc774\uc988 \uc11c\ubc84\ub294 \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d, \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc, \ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98\ub97c \ud575\uc2ec\uc73c\ub85c \ud558\ub294 \ud655\uc7a5 \uac00\ub2a5\ud55c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc544\ud0a4\ud14d\ucc98\uc785\ub2c8\ub2e4.</p>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_3","title":"\uc544\ud0a4\ud14d\ucc98 \ud2b9\uc9d5","text":"<ul> <li>Result Pattern: \uba85\uc2dc\uc801 \uc5d0\ub7ec \ud578\ub4e4\ub9c1\uc73c\ub85c \uc608\uc678 \uc5c6\ub294 \uc2dc\uc2a4\ud15c</li> <li>Reactive Streams: Mono/Flux \ud328\ud134\uc73c\ub85c \ubc31\ud504\ub808\uc154 \uc9c0\uc6d0</li> <li>Hexagonal Architecture: \ud3ec\ud2b8-\uc5b4\ub311\ud130 \ud328\ud134\uc73c\ub85c \ub3c4\uba54\uc778 \uaca9\ub9ac</li> <li>Cloud Native: Google Cloud Run \ucd5c\uc801\ud654 \ubc0f \uc11c\ubc84\ub9ac\uc2a4 \uc9c0\uc6d0</li> <li>Type Safety: \uc644\uc804\ud55c \ud0c0\uc785 \ud78c\ud2b8\uc640 Pydantic \uac80\uc99d</li> </ul>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_4","title":"\ud575\uc2ec \uc6d0\uce59","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#1-domain-driven-design-ddd","title":"1. Domain-Driven Design (DDD)","text":"<ul> <li>\ub3c4\uba54\uc778 \ubaa8\ub378 \uc911\uc2ec\uc758 \uc124\uacc4</li> <li>Bounded Context\ub85c \uc11c\ube44\uc2a4 \ubd84\ub9ac</li> <li>Ubiquitous Language \uc0ac\uc6a9</li> </ul>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#2-clean-architecture","title":"2. Clean Architecture","text":"<ul> <li>\uc758\uc874\uc131 \uc5ed\uc804 \uc6d0\uce59 (DIP)</li> <li>\ub808\uc774\uc5b4 \uac04 \ub2e8\ubc29\ud5a5 \uc758\uc874\uc131</li> <li>\uc778\ud130\ud398\uc774\uc2a4 \ubd84\ub9ac \uc6d0\uce59 (ISP)</li> </ul>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#3-functional-programming","title":"3. Functional Programming","text":"<ul> <li>\ubd88\ubcc0\uc131 (Immutability)</li> <li>\uc21c\uc218 \ud568\uc218 (Pure Functions)</li> <li>\ubaa8\ub098\ub4dc \ud328\ud134 (Result, Maybe, Either)</li> </ul>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#4-reactive-programming","title":"4. Reactive Programming","text":"<ul> <li>\ube44\ub3d9\uae30 \ub17c\ube14\ub85c\ud0b9 I/O</li> <li>\ubc31\ud504\ub808\uc154 \uad00\ub9ac</li> <li>\uc774\ubca4\ud2b8 \uae30\ubc18 \uc544\ud0a4\ud14d\ucc98</li> </ul>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_5","title":"\ud3f4\ub354 \uad6c\uc870","text":"<pre><code>enterprise-server/\n\u251c\u2500\u2500 src/                          # \uc18c\uc2a4 \ucf54\ub4dc \ub8e8\ud2b8\n\u2502   \u251c\u2500\u2500 api/                     # API \ub808\uc774\uc5b4 (\uc9c4\uc785\uc810)\n\u2502   \u2502   \u251c\u2500\u2500 rest/                # REST API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 v1/              # API \ubc84\uc804 \uad00\ub9ac\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/ # HTTP \ucee8\ud2b8\ub864\ub7ec\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 routes/      # \ub77c\uc6b0\ud305 \uc815\uc758\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 middleware/  # API \ubbf8\ub4e4\uc6e8\uc5b4\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 v2/\n\u2502   \u2502   \u251c\u2500\u2500 graphql/             # GraphQL \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 schema/          # GraphQL \uc2a4\ud0a4\ub9c8\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 resolvers/       # GraphQL \ub9ac\uc878\ubc84\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 dataloaders/     # DataLoader \uad6c\ud604\n\u2502   \u2502   \u2514\u2500\u2500 grpc/                # gRPC \uc11c\ube44\uc2a4\n\u2502   \u2502       \u251c\u2500\u2500 proto/           # Protocol Buffer \uc815\uc758\n\u2502   \u2502       \u2514\u2500\u2500 services/        # gRPC \uc11c\ube44\uc2a4 \uad6c\ud604\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 application/             # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub808\uc774\uc5b4\n\u2502   \u2502   \u251c\u2500\u2500 use_cases/           # \ube44\uc988\ub2c8\uc2a4 \uc720\uc2a4\ucf00\uc774\uc2a4\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 commands/        # Command \ucc98\ub9ac (CQRS)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 queries/         # Query \ucc98\ub9ac (CQRS)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 sagas/           # Saga \ud328\ud134 \uad6c\ud604\n\u2502   \u2502   \u251c\u2500\u2500 services/            # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc11c\ube44\uc2a4\n\u2502   \u2502   \u251c\u2500\u2500 dto/                 # Data Transfer Objects\n\u2502   \u2502   \u2514\u2500\u2500 mappers/             # DTO-\ub3c4\uba54\uc778 \ub9e4\ud551\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 domain/                  # \ub3c4\uba54\uc778 \ub808\uc774\uc5b4 (\ud575\uc2ec \ube44\uc988\ub2c8\uc2a4)\n\u2502   \u2502   \u251c\u2500\u2500 models/              # \ub3c4\uba54\uc778 \ubaa8\ub378\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 entities/        # \uc5d4\ud2f0\ud2f0\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 value_objects/   # \uac12 \uac1d\uccb4\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 aggregates/      # \uc560\uadf8\ub9ac\uac8c\uc774\ud2b8\n\u2502   \u2502   \u251c\u2500\u2500 repositories/        # \ub9ac\ud3ec\uc9c0\ud1a0\ub9ac \uc778\ud130\ud398\uc774\uc2a4\n\u2502   \u2502   \u251c\u2500\u2500 services/            # \ub3c4\uba54\uc778 \uc11c\ube44\uc2a4\n\u2502   \u2502   \u251c\u2500\u2500 events/              # \ub3c4\uba54\uc778 \uc774\ubca4\ud2b8\n\u2502   \u2502   \u2514\u2500\u2500 specifications/      # \ube44\uc988\ub2c8\uc2a4 \uaddc\uce59 \uba85\uc138\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 infrastructure/          # \uc778\ud504\ub77c \ub808\uc774\uc5b4\n\u2502   \u2502   \u251c\u2500\u2500 persistence/         # \ub370\uc774\ud130 \uc601\uc18d\uc131\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 repositories/    # \ub9ac\ud3ec\uc9c0\ud1a0\ub9ac \uad6c\ud604\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 migrations/      # DB \ub9c8\uc774\uadf8\ub808\uc774\uc158\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 seeders/         # \uc2dc\ub4dc \ub370\uc774\ud130\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 models/          # ORM \ubaa8\ub378\n\u2502   \u2502   \u251c\u2500\u2500 messaging/           # \uba54\uc2dc\uc9d5 \uc2dc\uc2a4\ud15c\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 publishers/      # \uc774\ubca4\ud2b8 \ubc1c\ud589\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 subscribers/     # \uc774\ubca4\ud2b8 \uad6c\ub3c5\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 brokers/         # \uba54\uc2dc\uc9c0 \ube0c\ub85c\ucee4\n\u2502   \u2502   \u251c\u2500\u2500 external/            # \uc678\ubd80 \uc11c\ube44\uc2a4 \uc5f0\ub3d9\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 clients/         # HTTP/gRPC \ud074\ub77c\uc774\uc5b8\ud2b8\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 adapters/        # \uc678\ubd80 API \uc5b4\ub311\ud130\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 webhooks/        # \uc6f9\ud6c5 \ucc98\ub9ac\n\u2502   \u2502   \u251c\u2500\u2500 cache/               # \uce90\uc2f1 \ub808\uc774\uc5b4\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 memory/          # \uc778\uba54\ubaa8\ub9ac \uce90\uc2dc\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 distributed/     # \ubd84\uc0b0 \uce90\uc2dc (Redis)\n\u2502   \u2502   \u2514\u2500\u2500 monitoring/          # \ubaa8\ub2c8\ud130\ub9c1 \uc778\ud504\ub77c\n\u2502   \u2502       \u251c\u2500\u2500 metrics/         # \uba54\ud2b8\ub9ad \uc218\uc9d1\n\u2502   \u2502       \u251c\u2500\u2500 tracing/         # \ubd84\uc0b0 \ucd94\uc801\n\u2502   \u2502       \u2514\u2500\u2500 logging/         # \ub85c\uae45 \uc124\uc815\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 shared/                  # \uacf5\uc720 \ubaa8\ub4c8\n\u2502   \u2502   \u251c\u2500\u2500 kernel/              # \uacf5\uc720 \ucee4\ub110\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 result/          # Result \ud328\ud134 \uad6c\ud604\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 monads/          # \ubaa8\ub098\ub4dc \uad6c\ud604\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 guards/          # Guard \uc808 \uad6c\ud604\n\u2502   \u2502   \u251c\u2500\u2500 exceptions/          # \ucee4\uc2a4\ud140 \uc608\uc678 (Result\ub85c \ubcc0\ud658)\n\u2502   \u2502   \u251c\u2500\u2500 constants/           # \uc0c1\uc218 \uc815\uc758\n\u2502   \u2502   \u251c\u2500\u2500 utils/               # \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\n\u2502   \u2502   \u2514\u2500\u2500 types/               # \ud0c0\uc785 \uc815\uc758\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 config/                  # \uc124\uc815 \uad00\ub9ac\n\u2502       \u251c\u2500\u2500 environments/        # \ud658\uacbd\ubcc4 \uc124\uc815\n\u2502       \u2502   \u251c\u2500\u2500 development.py\n\u2502       \u2502   \u251c\u2500\u2500 staging.py\n\u2502       \u2502   \u2514\u2500\u2500 production.py\n\u2502       \u251c\u2500\u2500 security/            # \ubcf4\uc548 \uc124\uc815\n\u2502       \u2502   \u251c\u2500\u2500 cors.py\n\u2502       \u2502   \u251c\u2500\u2500 auth.py\n\u2502       \u2502   \u2514\u2500\u2500 rbac.py\n\u2502       \u2514\u2500\u2500 dependencies.py      # \uc758\uc874\uc131 \uc8fc\uc785 \uc124\uc815\n\u2502\n\u251c\u2500\u2500 tests/                       # \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\n\u2502   \u251c\u2500\u2500 unit/                    # \ub2e8\uc704 \ud14c\uc2a4\ud2b8\n\u2502   \u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2502   \u251c\u2500\u2500 application/\n\u2502   \u2502   \u2514\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 integration/             # \ud1b5\ud569 \ud14c\uc2a4\ud2b8\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 persistence/\n\u2502   \u2502   \u2514\u2500\u2500 messaging/\n\u2502   \u251c\u2500\u2500 e2e/                     # End-to-End \ud14c\uc2a4\ud2b8\n\u2502   \u2502   \u251c\u2500\u2500 scenarios/\n\u2502   \u2502   \u2514\u2500\u2500 performance/\n\u2502   \u251c\u2500\u2500 fixtures/                # \ud14c\uc2a4\ud2b8 \ud53d\uc2a4\ucc98\n\u2502   \u2514\u2500\u2500 mocks/                   # \ubaa9 \uac1d\uccb4\n\u2502\n\u251c\u2500\u2500 scripts/                     # \uc6b4\uc601 \uc2a4\ud06c\ub9bd\ud2b8\n\u2502   \u251c\u2500\u2500 deployment/              # \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8\n\u2502   \u2502   \u251c\u2500\u2500 docker/\n\u2502   \u2502   \u251c\u2500\u2500 kubernetes/\n\u2502   \u2502   \u2514\u2500\u2500 cloud_run/\n\u2502   \u251c\u2500\u2500 migration/               # \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2a4\ud06c\ub9bd\ud2b8\n\u2502   \u251c\u2500\u2500 monitoring/              # \ubaa8\ub2c8\ud130\ub9c1 \uc2a4\ud06c\ub9bd\ud2b8\n\u2502   \u2514\u2500\u2500 backup/                  # \ubc31\uc5c5 \uc2a4\ud06c\ub9bd\ud2b8\n\u2502\n\u251c\u2500\u2500 docs/                        # \ubb38\uc11c\ud654\n\u2502   \u251c\u2500\u2500 api/                     # API \ubb38\uc11c\n\u2502   \u2502   \u251c\u2500\u2500 openapi.yaml\n\u2502   \u2502   \u2514\u2500\u2500 postman/\n\u2502   \u251c\u2500\u2500 architecture/            # \uc544\ud0a4\ud14d\ucc98 \ubb38\uc11c\n\u2502   \u2502   \u251c\u2500\u2500 adr/                # Architecture Decision Records\n\u2502   \u2502   \u251c\u2500\u2500 diagrams/            # \uc544\ud0a4\ud14d\ucc98 \ub2e4\uc774\uc5b4\uadf8\ub7a8\n\u2502   \u2502   \u2514\u2500\u2500 patterns/            # \ud328\ud134 \uac00\uc774\ub4dc\n\u2502   \u251c\u2500\u2500 development/             # \uac1c\ubc1c \uac00\uc774\ub4dc\n\u2502   \u2514\u2500\u2500 operations/              # \uc6b4\uc601 \uac00\uc774\ub4dc\n\u2502\n\u251c\u2500\u2500 .github/                     # GitHub \uc124\uc815\n\u2502   \u251c\u2500\u2500 workflows/               # GitHub Actions\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/\n\u2502   \u2514\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502\n\u251c\u2500\u2500 docker/                      # Docker \uc124\uc815\n\u2502   \u251c\u2500\u2500 Dockerfile.dev\n\u2502   \u251c\u2500\u2500 Dockerfile.prod\n\u2502   \u2514\u2500\u2500 docker-compose.yaml\n\u2502\n\u251c\u2500\u2500 kubernetes/                  # Kubernetes \ub9e4\ub2c8\ud398\uc2a4\ud2b8\n\u2502   \u251c\u2500\u2500 base/\n\u2502   \u251c\u2500\u2500 overlays/\n\u2502   \u2514\u2500\u2500 kustomization.yaml\n\u2502\n\u251c\u2500\u2500 terraform/                   # Infrastructure as Code\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 environments/\n\u2502   \u2514\u2500\u2500 main.tf\n\u2502\n\u251c\u2500\u2500 .env.example                 # \ud658\uacbd \ubcc0\uc218 \uc608\uc81c\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 pyproject.toml              # Python \ud504\ub85c\uc81d\ud2b8 \uc124\uc815\n\u251c\u2500\u2500 poetry.lock                 # \uc758\uc874\uc131 \uc7a0\uae08 \ud30c\uc77c\n\u251c\u2500\u2500 Makefile                    # \ube4c\ub4dc \uc790\ub3d9\ud654\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_6","title":"\ub808\uc774\uc5b4\ubcc4 \uc0c1\uc138 \uc124\uba85","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#1-api-srcapi","title":"1. API \ub808\uc774\uc5b4 (<code>src/api/</code>)","text":"<p>\uc9c4\uc785\uc810 \uc5ed\ud560\uc744 \ud558\uba70 HTTP, GraphQL, gRPC \ub4f1 \ub2e4\uc591\ud55c \ud504\ub85c\ud1a0\ucf5c \uc9c0\uc6d0</p> <pre><code># src/api/rest/v1/controllers/user_controller.py\nfrom rfs.core import Result, Controller\nfrom rfs.security import RequiresAuthentication\nfrom rfs.monitoring import PerformanceMonitored\n\n@Controller(\"/api/v1/users\")\nclass UserController:\n    def __init__(self, user_service: UserService):\n        self._service = user_service\n\n    @RequiresAuthentication\n    @PerformanceMonitored\n    async def get_user(self, user_id: str) -&gt; Result[UserDTO, APIError]:\n        return await self._service.get_user(user_id)\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#2-application-srcapplication","title":"2. Application \ub808\uc774\uc5b4 (<code>src/application/</code>)","text":"<p>\ube44\uc988\ub2c8\uc2a4 \uc720\uc2a4\ucf00\uc774\uc2a4\ub97c \uc870\uc728\ud558\ub294 \ub808\uc774\uc5b4</p> <pre><code># src/application/use_cases/commands/create_order_command.py\nfrom rfs.core import Result, UseCase\nfrom rfs.reactive import Mono\n\n@UseCase\nclass CreateOrderCommand:\n    def __init__(self, \n                 order_repo: OrderRepository,\n                 payment_service: PaymentService,\n                 notification_service: NotificationService):\n        self._order_repo = order_repo\n        self._payment_service = payment_service\n        self._notification_service = notification_service\n\n    async def execute(self, request: CreateOrderRequest) -&gt; Result[OrderResponse, str]:\n        return await (\n            Mono.from_result(self._validate_request(request))\n            .flat_map(lambda r: self._process_payment(r))\n            .flat_map(lambda r: self._create_order(r))\n            .flat_map(lambda r: self._send_notification(r))\n            .to_result()\n        )\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#3-domain-srcdomain","title":"3. Domain \ub808\uc774\uc5b4 (<code>src/domain/</code>)","text":"<p>\ud575\uc2ec \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uacfc \uaddc\uce59\uc744 \ud3ec\ud568</p> <pre><code># src/domain/models/aggregates/order_aggregate.py\nfrom rfs.core import Result\nfrom typing import List\n\nclass OrderAggregate:\n    def __init__(self, order_id: str, customer_id: str):\n        self._order_id = order_id\n        self._customer_id = customer_id\n        self._items: List[OrderItem] = []\n        self._status = OrderStatus.PENDING\n        self._domain_events = []\n\n    def add_item(self, product: Product, quantity: int) -&gt; Result[None, str]:\n        if quantity &lt;= 0:\n            return Failure(\"Quantity must be positive\")\n\n        if not product.is_available(quantity):\n            return Failure(f\"Insufficient stock for {product.name}\")\n\n        self._items.append(OrderItem(product, quantity))\n        self._domain_events.append(\n            OrderItemAdded(self._order_id, product.id, quantity)\n        )\n        return Success(None)\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#4-infrastructure-srcinfrastructure","title":"4. Infrastructure \ub808\uc774\uc5b4 (<code>src/infrastructure/</code>)","text":"<p>\uc678\ubd80 \uc2dc\uc2a4\ud15c\uacfc\uc758 \ud1b5\ud569\uc744 \ub2f4\ub2f9</p> <pre><code># src/infrastructure/persistence/repositories/order_repository_impl.py\nfrom rfs.core import Result, Adapter\nfrom rfs.database import transactional\n\n@Adapter(implements=OrderRepository)\nclass OrderRepositoryImpl:\n    def __init__(self, session_factory: SessionFactory):\n        self._session_factory = session_factory\n\n    @transactional\n    async def save(self, order: OrderAggregate) -&gt; Result[str, str]:\n        async with self._session_factory.create() as session:\n            try:\n                db_order = self._to_db_model(order)\n                session.add(db_order)\n                await session.commit()\n                return Success(db_order.id)\n            except Exception as e:\n                return Failure(f\"Failed to save order: {str(e)}\")\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_7","title":"\uad6c\ud604 \uc608\uc81c","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_8","title":"\uc644\uc804\ud55c \uc720\uc2a4\ucf00\uc774\uc2a4 \uad6c\ud604","text":"<pre><code># src/application/use_cases/commands/process_payment_command.py\nfrom rfs.core import Result, UseCase, transactional\nfrom rfs.reactive import Flux, Mono\nfrom rfs.service_discovery import CircuitBreaker\nfrom rfs.monitoring import PerformanceMonitored\nfrom rfs.security import RequiresRole\n\n@UseCase\nclass ProcessPaymentCommand:\n    def __init__(self,\n                 payment_gateway: PaymentGateway,\n                 order_repository: OrderRepository,\n                 audit_service: AuditService,\n                 circuit_breaker: CircuitBreaker):\n        self._payment_gateway = payment_gateway\n        self._order_repository = order_repository\n        self._audit_service = audit_service\n        self._circuit_breaker = circuit_breaker\n\n    @RequiresRole(\"PAYMENT_PROCESSOR\")\n    @PerformanceMonitored(threshold_ms=1000)\n    @transactional\n    async def execute(self, payment_request: PaymentRequest) -&gt; Result[PaymentResponse, str]:\n        # 1. \uc8fc\ubb38 \uc870\ud68c\n        order_result = await self._order_repository.find_by_id(payment_request.order_id)\n        if order_result.is_failure():\n            return order_result\n\n        order = order_result.value\n\n        # 2. \uacb0\uc81c \uac80\uc99d\n        validation_result = self._validate_payment(order, payment_request)\n        if validation_result.is_failure():\n            await self._audit_service.log_failed_payment(payment_request, validation_result.error)\n            return validation_result\n\n        # 3. \uc678\ubd80 \uacb0\uc81c \uac8c\uc774\ud2b8\uc6e8\uc774 \ud638\ucd9c (\uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc801\uc6a9)\n        payment_result = await self._circuit_breaker.call(\n            lambda: self._payment_gateway.process(payment_request)\n        )\n\n        if payment_result.is_success():\n            # 4. \uc8fc\ubb38 \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8\n            order.mark_as_paid(payment_result.value.transaction_id)\n            await self._order_repository.save(order)\n\n            # 5. \uac10\uc0ac \ub85c\uadf8\n            await self._audit_service.log_successful_payment(payment_request, payment_result.value)\n\n            return Success(PaymentResponse(\n                order_id=order.id,\n                transaction_id=payment_result.value.transaction_id,\n                status=\"SUCCESS\"\n            ))\n\n        return Failure(f\"Payment failed: {payment_result.error}\")\n\n    def _validate_payment(self, order: Order, request: PaymentRequest) -&gt; Result[None, str]:\n        if order.is_paid():\n            return Failure(\"Order already paid\")\n\n        if request.amount != order.total_amount:\n            return Failure(\"Payment amount mismatch\")\n\n        if order.is_expired():\n            return Failure(\"Order has expired\")\n\n        return Success(None)\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_9","title":"\ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac","text":"<pre><code># src/application/services/order_processing_service.py\nfrom rfs.reactive import Flux, Mono\nfrom rfs.core import Result\n\nclass OrderProcessingService:\n    def __init__(self,\n                 order_repository: OrderRepository,\n                 inventory_service: InventoryService,\n                 shipping_service: ShippingService):\n        self._order_repository = order_repository\n        self._inventory_service = inventory_service\n        self._shipping_service = shipping_service\n\n    async def process_bulk_orders(self, order_ids: List[str]) -&gt; Result[List[ProcessedOrder], str]:\n        return await (\n            Flux.from_iterable(order_ids)\n            .parallel(workers=4)  # \ubcd1\ub82c \ucc98\ub9ac\n            .flat_map(lambda id: self._process_single_order(id))\n            .filter(lambda result: result.is_success())  # \uc131\uacf5\ud55c \uc8fc\ubb38\ub9cc \ud544\ud130\ub9c1\n            .map(lambda result: result.value)\n            .collect_list()\n            .map(lambda orders: Success(orders))\n            .on_error_return(lambda e: Failure(str(e)))\n            .to_result()\n        )\n\n    async def _process_single_order(self, order_id: str) -&gt; Mono[Result[ProcessedOrder, str]]:\n        return (\n            Mono.from_coroutine(self._order_repository.find_by_id(order_id))\n            .flat_map(lambda order: self._check_inventory(order))\n            .flat_map(lambda order: self._allocate_shipping(order))\n            .map(lambda order: Success(ProcessedOrder.from_order(order)))\n            .on_error_return(lambda e: Failure(f\"Failed to process order {order_id}: {str(e)}\"))\n        )\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_10","title":"\ubc30\ud3ec \uad6c\uc870","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#docker","title":"Docker \ucee8\ud14c\uc774\ub108\ud654","text":"<pre><code># docker/Dockerfile.prod\nFROM python:3.11-slim as builder\n\nWORKDIR /app\nCOPY pyproject.toml poetry.lock ./\nRUN pip install poetry &amp;&amp; \\\n    poetry config virtualenvs.create false &amp;&amp; \\\n    poetry install --no-dev --no-interaction --no-ansi\n\nFROM python:3.11-slim\n\nWORKDIR /app\nCOPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY src/ ./src/\nCOPY config/ ./config/\n\nENV RFS_ENV=production\nENV PORT=8080\n\nCMD [\"python\", \"-m\", \"src.main\"]\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#kubernetes","title":"Kubernetes \ubc30\ud3ec","text":"<pre><code># kubernetes/base/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: enterprise-server\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: enterprise-server\n  template:\n    metadata:\n      labels:\n        app: enterprise-server\n    spec:\n      containers:\n      - name: app\n        image: gcr.io/project/enterprise-server:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: RFS_ENV\n          value: production\n        - name: DB_CONNECTION_STRING\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: connection-string\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#google-cloud-run","title":"Google Cloud Run \ubc30\ud3ec","text":"<pre><code># scripts/deployment/cloud_run/service.yaml\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: enterprise-server\n  annotations:\n    run.googleapis.com/execution-environment: gen2\nspec:\n  template:\n    metadata:\n      annotations:\n        autoscaling.knative.dev/minScale: \"1\"\n        autoscaling.knative.dev/maxScale: \"100\"\n        run.googleapis.com/cpu-throttling: \"false\"\n    spec:\n      containerConcurrency: 100\n      timeoutSeconds: 300\n      containers:\n      - image: gcr.io/project/enterprise-server:latest\n        resources:\n          limits:\n            cpu: \"2\"\n            memory: \"2Gi\"\n        env:\n        - name: RFS_ENV\n          value: cloud_run\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_11","title":"\ubaa8\ubc94 \uc0ac\ub840","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#1-result-pattern","title":"1. Result Pattern \ud65c\uc6a9","text":"<pre><code># \u2705 Good - Result Pattern \uc0ac\uc6a9\nasync def get_user(self, user_id: str) -&gt; Result[User, str]:\n    user = await self._repository.find_by_id(user_id)\n    if not user:\n        return Failure(f\"User {user_id} not found\")\n    return Success(user)\n\n# \u274c Bad - \uc608\uc678 \ubc1c\uc0dd\nasync def get_user(self, user_id: str) -&gt; User:\n    user = await self._repository.find_by_id(user_id)\n    if not user:\n        raise UserNotFoundException(f\"User {user_id} not found\")\n    return user\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#2","title":"2. \uc758\uc874\uc131 \uc8fc\uc785","text":"<pre><code># \u2705 Good - \uc758\uc874\uc131 \uc8fc\uc785 \uc0ac\uc6a9\n@UseCase\nclass CreateUserUseCase:\n    def __init__(self, \n                 user_repository: UserRepository,\n                 email_service: EmailService):\n        self._user_repository = user_repository\n        self._email_service = email_service\n\n# \u274c Bad - \uc9c1\uc811 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\nclass CreateUserUseCase:\n    def __init__(self):\n        self._user_repository = UserRepositoryImpl()  # \uc9c1\uc811 \uc0dd\uc131\n        self._email_service = EmailServiceImpl()      # \uc9c1\uc811 \uc0dd\uc131\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#3","title":"3. \ub808\uc774\uc5b4 \ubd84\ub9ac","text":"<pre><code># \u2705 Good - \ub3c4\uba54\uc778 \ub85c\uc9c1\uc774 \ub3c4\uba54\uc778 \ub808\uc774\uc5b4\uc5d0 \uc788\uc74c\n# src/domain/models/user.py\nclass User:\n    def change_email(self, new_email: str) -&gt; Result[None, str]:\n        if not self._is_valid_email(new_email):\n            return Failure(\"Invalid email format\")\n        self.email = new_email\n        return Success(None)\n\n# \u274c Bad - \ub3c4\uba54\uc778 \ub85c\uc9c1\uc774 \ucee8\ud2b8\ub864\ub7ec\uc5d0 \uc788\uc74c\n# src/api/controllers/user_controller.py\nclass UserController:\n    def change_email(self, user_id: str, new_email: str):\n        if \"@\" not in new_email:  # \ub3c4\uba54\uc778 \ub85c\uc9c1\uc774 \ucee8\ud2b8\ub864\ub7ec\uc5d0\n            return BadRequest(\"Invalid email\")\n        # ...\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#4","title":"4. \ud14c\uc2a4\ud2b8 \uad6c\uc870","text":"<pre><code># tests/unit/domain/test_order_aggregate.py\nimport pytest\nfrom src.domain.models.aggregates import OrderAggregate\n\nclass TestOrderAggregate:\n    def test_add_item_with_sufficient_stock(self):\n        # Given\n        order = OrderAggregate(\"order-1\", \"customer-1\")\n        product = Product(\"product-1\", \"Test Product\", 100.0, stock=10)\n\n        # When\n        result = order.add_item(product, quantity=5)\n\n        # Then\n        assert result.is_success()\n        assert len(order.items) == 1\n        assert order.items[0].quantity == 5\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_12","title":"\ud504\ub85c\uc81d\ud2b8 \ucd08\uae30 \uc124\uc815","text":""},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#1","title":"1. \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131","text":"<pre><code># Poetry\ub97c \uc0ac\uc6a9\ud55c \ud504\ub85c\uc81d\ud2b8 \ucd08\uae30\ud654\npoetry new enterprise-server\ncd enterprise-server\n\n# RFS Framework \uc124\uce58\npoetry add rfs-framework\n\n# \uac1c\ubc1c \uc758\uc874\uc131 \uc124\uce58\npoetry add --dev pytest pytest-asyncio pytest-cov black isort mypy\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#2_1","title":"2. \ud658\uacbd \uc124\uc815","text":"<pre><code># src/config/environments/development.py\nfrom rfs.core import RFSConfig, Environment\n\nclass DevelopmentConfig(RFSConfig):\n    environment = Environment.DEVELOPMENT\n    debug = True\n\n    # Database\n    db_url = \"postgresql://localhost/enterprise_dev\"\n    db_pool_size = 5\n\n    # Redis\n    redis_url = \"redis://localhost:6379\"\n\n    # Security\n    jwt_secret = \"dev-secret-key\"\n    cors_origins = [\"http://localhost:3000\"]\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#3_1","title":"3. \uba54\uc778 \uc560\ud50c\ub9ac\ucf00\uc774\uc158","text":"<pre><code># src/main.py\nfrom rfs.web import create_app\nfrom src.config import get_config\nfrom src.api import create_api_router\nfrom src.infrastructure import setup_infrastructure\n\nasync def main():\n    config = get_config()\n\n    # \uc778\ud504\ub77c \uc124\uc815\n    await setup_infrastructure(config)\n\n    # API \ub77c\uc6b0\ud130 \uc0dd\uc131\n    router = create_api_router()\n\n    # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc0dd\uc131 \ubc0f \uc2e4\ud589\n    app = create_app(config, router)\n    await app.run()\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n</code></pre>"},{"location":"ENTERPRISE_SERVER_ARCHITECTURE/#_13","title":"\ucc38\uace0 \uc790\ub8cc","text":"<ul> <li>RFS Framework \ubb38\uc11c</li> <li>\ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98</li> <li>Domain-Driven Design</li> <li>Reactive Streams</li> <li>Google Cloud Run \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4</li> </ul>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright \u00a9 2025 RFS Framework Team</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"LICENSE/#3","title":"\uc81c3\uc790 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub77c\uc774\uc120\uc2a4","text":"<p>RFS Framework\ub294 \ub2e4\uc74c \uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4:</p>"},{"location":"LICENSE/#_1","title":"\ud575\uc2ec \uc758\uc874\uc131","text":"<ul> <li>Pydantic (MIT License)</li> <li>\ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc124\uc815 \uad00\ub9ac</li> <li>https://github.com/pydantic/pydantic</li> </ul>"},{"location":"LICENSE/#web","title":"\uc6f9 \ubaa8\ub4c8 \uc758\uc874\uc131 ([web])","text":"<ul> <li>FastAPI (MIT License)</li> <li>\uc6f9 \ud504\ub808\uc784\uc6cc\ud06c</li> <li> <p>https://github.com/tiangolo/fastapi</p> </li> <li> <p>Uvicorn (BSD License)</p> </li> <li>ASGI \uc11c\ubc84</li> <li>https://github.com/encode/uvicorn</li> </ul>"},{"location":"LICENSE/#database","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub4c8 \uc758\uc874\uc131 ([database])","text":"<ul> <li>SQLAlchemy (MIT License)</li> <li>ORM \ubc0f \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd94\uc0c1\ud654</li> <li> <p>https://github.com/sqlalchemy/sqlalchemy</p> </li> <li> <p>Alembic (MIT License)</p> </li> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158</li> <li> <p>https://github.com/sqlalchemy/alembic</p> </li> <li> <p>Redis-py (MIT License)</p> </li> <li>Redis \ud074\ub77c\uc774\uc5b8\ud2b8</li> <li>https://github.com/redis/redis-py</li> </ul>"},{"location":"LICENSE/#test","title":"\ud14c\uc2a4\ud2b8 \ubaa8\ub4c8 \uc758\uc874\uc131 ([test])","text":"<ul> <li>Pytest (MIT License)</li> <li>\ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c</li> <li> <p>https://github.com/pytest-dev/pytest</p> </li> <li> <p>Pytest-asyncio (Apache 2.0 License)</p> </li> <li>\ube44\ub3d9\uae30 \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0</li> <li> <p>https://github.com/pytest-dev/pytest-asyncio</p> </li> <li> <p>Coverage.py (Apache 2.0 License)</p> </li> <li>\ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815</li> <li>https://github.com/nedbat/coveragepy</li> </ul>"},{"location":"LICENSE/#dev","title":"\uac1c\ubc1c \ub3c4\uad6c \uc758\uc874\uc131 ([dev])","text":"<ul> <li>Black (MIT License)</li> <li>\ucf54\ub4dc \ud3ec\ub9e4\ud130</li> <li> <p>https://github.com/psf/black</p> </li> <li> <p>MyPy (MIT License)</p> </li> <li>\uc815\uc801 \ud0c0\uc785 \uac80\uc0ac</li> <li> <p>https://github.com/python/mypy</p> </li> <li> <p>isort (MIT License)</p> </li> <li>Import \uc815\ub82c</li> <li> <p>https://github.com/PyCQA/isort</p> </li> <li> <p>Flake8 (MIT License)</p> </li> <li>\ub9b0\ud130</li> <li>https://github.com/PyCQA/flake8</li> </ul>"},{"location":"LICENSE/#docs","title":"\ubb38\uc11c\ud654 \ub3c4\uad6c \uc758\uc874\uc131 ([docs])","text":"<ul> <li>MkDocs (BSD License)</li> <li>\ubb38\uc11c \uc0dd\uc131\uae30</li> <li> <p>https://github.com/mkdocs/mkdocs</p> </li> <li> <p>MkDocs-Material (MIT License)</p> </li> <li>Material Design \ud14c\ub9c8</li> <li> <p>https://github.com/squidfunk/mkdocs-material</p> </li> <li> <p>mkdocstrings (ISC License)</p> </li> <li>API \ubb38\uc11c \uc790\ub3d9 \uc0dd\uc131</li> <li>https://github.com/mkdocstrings/mkdocstrings</li> </ul>"},{"location":"LICENSE/#google-cloud","title":"Google Cloud \uc758\uc874\uc131","text":"<ul> <li>Google Cloud Run SDK (Apache 2.0 License)</li> <li>Cloud Run \ud1b5\ud569</li> <li> <p>https://github.com/googleapis/python-run</p> </li> <li> <p>Google Cloud Logging (Apache 2.0 License)</p> </li> <li>\ub85c\uae45 \ud1b5\ud569</li> <li>https://github.com/googleapis/python-logging</li> </ul>"},{"location":"LICENSE/#_2","title":"\uae30\uc5ec\uc790","text":"<p>RFS Framework\ub294 \ub2e4\uc74c \uac1c\ubc1c\uc790\ub4e4\uc758 \uae30\uc5ec\ub85c \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4:</p> <ul> <li>RFS Framework Team - \ud575\uc2ec \uac1c\ubc1c \ubc0f \uc720\uc9c0\ubcf4\uc218</li> <li>Community Contributors - \ubc84\uadf8 \uc218\uc815, \uae30\ub2a5 \uac1c\uc120, \ubb38\uc11c \uc791\uc131</li> </ul>"},{"location":"LICENSE/#_3","title":"\uc0c1\ud45c\uad8c","text":"<ul> <li>**RFS Framework**\ub294 RFS Framework Team\uc758 \uc0c1\ud45c\uc785\ub2c8\ub2e4.</li> <li>**Google Cloud Run**\uc740 Google LLC\uc758 \uc0c1\ud45c\uc785\ub2c8\ub2e4.</li> <li>\uae30\ud0c0 \ubaa8\ub4e0 \uc0c1\ud45c\ub294 \ud574\ub2f9 \uc18c\uc720\uc790\uc758 \uc790\uc0b0\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"LICENSE/#_4","title":"\uba74\ucc45 \uc870\ud56d","text":"<p>\uc774 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub294 \"\uc788\ub294 \uadf8\ub300\ub85c\" \uc81c\uacf5\ub418\uba70, \uc5b4\ub5a0\ud55c \ubcf4\uc99d\ub3c4 \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc0ac\uc6a9\uc73c\ub85c \uc778\ud55c \ubaa8\ub4e0 \uc704\ud5d8\uc740 \uc0ac\uc6a9\uc790\uac00 \ubd80\ub2f4\ud569\ub2c8\ub2e4.</p> <p>\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc704\uc758 MIT \ub77c\uc774\uc120\uc2a4 \uc804\ubb38\uc744 \ucc38\uc870\ud558\uc138\uc694.</p>"},{"location":"MIGRATION_GUIDE/","title":"RFS Framework \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uac00\uc774\ub4dc","text":"<p>\uc774 \uac00\uc774\ub4dc\ub294 \uc774\uc804 \ubc84\uc804\uc5d0\uc11c RFS Framework 4.0\uc73c\ub85c\uc758 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uacfc\uc815\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc548\ub0b4\ud569\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#migration-overview","title":"\ud83d\udccb Migration Overview","text":""},{"location":"MIGRATION_GUIDE/#_1","title":"\uc8fc\uc694 \ubcc0\uacbd\uc0ac\ud56d \uc694\uc57d","text":"\uc601\uc5ed \uc774\uc804 \ubc84\uc804 4.0 \uc601\ud5a5\ub3c4 \uc5d0\ub7ec \ud578\ub4e4\ub9c1 \uc608\uc678 \uae30\ubc18 Result \ud328\ud134 \ud83d\udd34 \ub192\uc74c \ube44\ub3d9\uae30 \ucc98\ub9ac \uc120\ud0dd\uc801 async async-first \ud83d\udd34 \ub192\uc74c \ud0c0\uc785 \uc2dc\uc2a4\ud15c \uc120\ud0dd\uc801 \ud0c0\uc785 \ud78c\ud2b8 \uc644\uc804\ud55c \ud0c0\uc785 \uc548\uc804\uc131 \ud83d\udfe1 \ubcf4\ud1b5 \uc124\uc815 \uad00\ub9ac YAML \uae30\ubc18 TOML \uae30\ubc18 \ud83d\udfe1 \ubcf4\ud1b5 \uc885\uc18d\uc131 Python 3.8+ Python 3.10+ \ud83d\udd34 \ub192\uc74c"},{"location":"MIGRATION_GUIDE/#_2","title":"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub09c\uc774\ub3c4","text":"<ul> <li>Small Projects (&lt; 1000 LOC): 1-2\uc77c</li> <li>Medium Projects (1000-10000 LOC): 1-2\uc8fc  </li> <li>Large Projects (10000+ LOC): 2-4\uc8fc</li> </ul>"},{"location":"MIGRATION_GUIDE/#pre-migration-checklist","title":"\ud83d\ude80 Pre-Migration Checklist","text":""},{"location":"MIGRATION_GUIDE/#1","title":"1. \ud658\uacbd \uc900\ube44","text":"<pre><code># Python \ubc84\uc804 \ud655\uc778 (3.10+ \ud544\uc218)\npython --version\n\n# \ud604\uc7ac \uc758\uc874\uc131 \ubc31\uc5c5\npip freeze &gt; requirements_v3_backup.txt\n\n# \uc0c8 \uac00\uc0c1\ud658\uacbd \uc0dd\uc131\npython -m venv venv_v4\nsource venv_v4/bin/activate\n\n# RFS Framework \uc124\uce58\npip install rfs-framework\n</code></pre>"},{"location":"MIGRATION_GUIDE/#2","title":"2. \ucf54\ub4dc \ubd84\uc11d","text":"<pre><code># v3 \uc0ac\uc6a9 \ud328\ud134 \ubd84\uc11d\ngrep -r \"from rfs\" . --include=\"*.py\"\ngrep -r \"import rfs\" . --include=\"*.py\"\n\n# \ub3d9\uae30 \ud568\uc218 \uc2dd\ubcc4\ngrep -r \"def \" . --include=\"*.py\" | grep -v \"async def\"\n\n# \uc608\uc678 \ucc98\ub9ac \ud328\ud134 \uc2dd\ubcc4\ngrep -r \"try:\" . --include=\"*.py\"\ngrep -r \"except\" . --include=\"*.py\"\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-by-step-migration","title":"\ud83d\udd27 Step-by-Step Migration","text":""},{"location":"MIGRATION_GUIDE/#step-1","title":"Step 1: \uc758\uc874\uc131 \uc5c5\ub370\uc774\ud2b8","text":""},{"location":"MIGRATION_GUIDE/#requirementstxt","title":"requirements.txt \ubcc0\uacbd","text":"<pre><code># Before (v3.x)\n- rfs-framework==3.5.2\n- python-dotenv==0.19.0\n- pydantic==1.10.2\n\n# After (v4.0)\n+ rfs-framework-v4==4.0.0\n+ python-dotenv&gt;=1.0.0\n+ pydantic&gt;=2.5.0\n</code></pre>"},{"location":"MIGRATION_GUIDE/#pyprojecttoml","title":"pyproject.toml \uc0ac\uc6a9 \uad8c\uc7a5","text":"<pre><code>[project]\nname = \"my-project\"\nversion = \"1.0.0\"\ndependencies = [\n    \"rfs-framework-v4==4.0.0\",\n    \"pydantic&gt;=2.5.0\",\n]\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-2-import","title":"Step 2: Import \uacbd\ub85c \ubcc0\uacbd","text":""},{"location":"MIGRATION_GUIDE/#import","title":"\uae30\ubcf8 Import \ubcc0\uacbd","text":"<pre><code># Before (v3.x)\nfrom rfs.core import BaseService\nfrom rfs.config import Config\nfrom rfs.utils import logger\n\n# After (v4.0)\nfrom rfs_v4.core import Result, Config\nfrom rfs_v4.reactive import Mono, Flux\nimport logging\n\nlogger = logging.getLogger(__name__)\n</code></pre>"},{"location":"MIGRATION_GUIDE/#import_1","title":"\uc8fc\uc694 Import \ub9e4\ud551","text":"<pre><code># v3.x \u2192 v4.0 Import \ub9e4\ud551\ud45c\nv3_imports = {\n    \"rfs.core.BaseService\": \"rfs_v4.core.Result\",\n    \"rfs.config.Config\": \"rfs_v4.core.Config\", \n    \"rfs.async_utils\": \"rfs_v4.reactive\",\n    \"rfs.state\": \"rfs_v4.state_machine\",\n    \"rfs.events\": \"rfs_v4.events\",\n}\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-3-result","title":"Step 3: Result \ud328\ud134 \uc801\uc6a9","text":"<p>\uc774\uac83\uc774 \uac00\uc7a5 \uc911\uc694\ud55c \ubcc0\uacbd\uc0ac\ud56d\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \uc5d0\ub7ec \ucc98\ub9ac\uac00 \uc608\uc678\uc5d0\uc11c Result \ud328\ud134\uc73c\ub85c \ubcc0\uacbd\ub429\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#_3","title":"\uae30\ubcf8 \ud568\uc218 \ubcc0\uacbd","text":"<pre><code># Before (v3.x) - \uc608\uc678 \uae30\ubc18\ndef get_user(user_id: int) -&gt; dict:\n    if user_id &lt; 1:\n        raise ValueError(\"Invalid user ID\")\n\n    user = database.get_user(user_id)\n    if not user:\n        raise NotFoundError(\"User not found\")\n\n    return user\n\n# After (v4.0) - Result \ud328\ud134\nasync def get_user(user_id: int) -&gt; Result[dict, str]:\n    if user_id &lt; 1:\n        return Result.failure(\"Invalid user ID\")\n\n    user_result = await database.get_user(user_id)\n    if user_result.is_failure():\n        return Result.failure(\"User not found\")\n\n    return Result.success(user_result.value)\n</code></pre>"},{"location":"MIGRATION_GUIDE/#result","title":"\uc608\uc678 \ucc98\ub9ac\ub97c Result\ub85c \ubcc0\ud658","text":"<pre><code># Before (v3.x)\ndef process_order(order_data: dict) -&gt; dict:\n    try:\n        # \uc8fc\ubb38 \uac80\uc99d\n        if not order_data.get('items'):\n            raise ValueError(\"No items in order\")\n\n        # \uc7ac\uace0 \ud655\uc778\n        for item in order_data['items']:\n            stock = inventory.check_stock(item['id'])\n            if stock &lt; item['quantity']:\n                raise InsufficientStockError(f\"Not enough stock for {item['name']}\")\n\n        # \uc8fc\ubb38 \uc0dd\uc131\n        order = Order.create(order_data)\n        return order.to_dict()\n\n    except ValueError as e:\n        raise BadRequestError(str(e))\n    except InsufficientStockError as e:\n        raise ConflictError(str(e))\n\n# After (v4.0)\nasync def process_order(order_data: dict) -&gt; Result[dict, str]:\n    # \uc8fc\ubb38 \uac80\uc99d\n    if not order_data.get('items'):\n        return Result.failure(\"No items in order\")\n\n    # \uc7ac\uace0 \ud655\uc778\uc744 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc\uc73c\ub85c \ucc98\ub9ac\n    stock_check = await (\n        Flux.from_iterable(order_data['items'])\n        .flat_map(lambda item: check_item_stock(item))\n        .collect_list()\n        .to_result()\n    )\n\n    if stock_check.is_failure():\n        return stock_check\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    order_result = await Order.create_async(order_data)\n    return order_result.map(lambda order: order.to_dict())\n\nasync def check_item_stock(item: dict) -&gt; Result[dict, str]:\n    stock_result = await inventory.check_stock_async(item['id'])\n    if stock_result.is_failure():\n        return stock_result\n\n    if stock_result.value &lt; item['quantity']:\n        return Result.failure(f\"Not enough stock for {item['name']}\")\n\n    return Result.success(item)\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-4-async-first","title":"Step 4: \ube44\ub3d9\uae30\ud654 (Async-First)","text":"<p>\ubaa8\ub4e0 \uacf5\uac1c \uba54\uc11c\ub4dc\ub97c \ube44\ub3d9\uae30\ub85c \ubcc0\uacbd\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#_4","title":"\uc11c\ube44\uc2a4 \ud074\ub798\uc2a4 \ubcc0\uacbd","text":"<pre><code># Before (v3.x)\nclass UserService(BaseService):\n    def get_user(self, user_id: int) -&gt; dict:\n        return self.db.query(\"SELECT * FROM users WHERE id = ?\", user_id)\n\n    def create_user(self, user_data: dict) -&gt; dict:\n        user_id = self.db.insert(\"users\", user_data)\n        return self.get_user(user_id)\n\n    def update_user(self, user_id: int, updates: dict) -&gt; dict:\n        self.db.update(\"users\", user_id, updates)\n        return self.get_user(user_id)\n\n# After (v4.0)\nclass UserService:\n    def __init__(self, db_pool):\n        self.db = db_pool\n\n    async def get_user(self, user_id: int) -&gt; Result[dict, str]:\n        if user_id &lt; 1:\n            return Result.failure(\"Invalid user ID\")\n\n        query_result = await self.db.query_one(\n            \"SELECT * FROM users WHERE id = $1\", user_id\n        )\n\n        if not query_result:\n            return Result.failure(\"User not found\")\n\n        return Result.success(dict(query_result))\n\n    async def create_user(self, user_data: dict) -&gt; Result[dict, str]:\n        # \uc785\ub825 \uac80\uc99d\uc744 \ubc18\uc751\ud615\uc73c\ub85c \ucc98\ub9ac\n        validation_result = await self._validate_user_data(user_data)\n        if validation_result.is_failure():\n            return validation_result\n\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user_id_result = await self.db.insert(\"users\", user_data)\n        if user_id_result.is_failure():\n            return Result.failure(\"Failed to create user\")\n\n        # \uc0dd\uc131\ub41c \uc0ac\uc6a9\uc790 \uc870\ud68c\n        return await self.get_user(user_id_result.value)\n\n    async def update_user(self, user_id: int, updates: dict) -&gt; Result[dict, str]:\n        # \uc0ac\uc6a9\uc790 \uc874\uc7ac \ud655\uc778\n        user_result = await self.get_user(user_id)\n        if user_result.is_failure():\n            return user_result\n\n        # \uc5c5\ub370\uc774\ud2b8 \uc2e4\ud589\n        update_result = await self.db.update(\"users\", user_id, updates)\n        if update_result.is_failure():\n            return Result.failure(\"Failed to update user\")\n\n        # \uc5c5\ub370\uc774\ud2b8\ub41c \uc0ac\uc6a9\uc790 \uc870\ud68c\n        return await self.get_user(user_id)\n\n    async def _validate_user_data(self, data: dict) -&gt; Result[dict, str]:\n        return await (\n            Mono.just(data)\n            .map(self._validate_email)\n            .flat_map(self._validate_username)\n            .to_result()\n        )\n\n    def _validate_email(self, data: dict) -&gt; dict:\n        if not data.get('email') or '@' not in data['email']:\n            raise ValueError(\"Invalid email\")\n        return data\n\n    async def _validate_username(self, data: dict) -&gt; dict:\n        username = data.get('username')\n        if not username or len(username) &lt; 3:\n            raise ValueError(\"Username too short\")\n\n        # \uc911\ubcf5 \ud655\uc778\n        existing = await self.db.query_one(\n            \"SELECT id FROM users WHERE username = $1\", username\n        )\n        if existing:\n            raise ValueError(\"Username already exists\")\n\n        return data\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-5","title":"Step 5: \uc124\uc815 \ud30c\uc77c \ubcc0\uacbd","text":""},{"location":"MIGRATION_GUIDE/#yaml-toml","title":"YAML\uc5d0\uc11c TOML\ub85c \ubcc0\uacbd","text":"<pre><code># Before (config.yaml)\ndatabase:\n  host: localhost\n  port: 5432\n  name: myapp\n\nlogging:\n  level: INFO\n  format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\ncache:\n  redis_url: redis://localhost:6379\n  ttl: 3600\n</code></pre> <pre><code># After (config.toml)\n[database]\nhost = \"localhost\"\nport = 5432\nname = \"myapp\"\n\n[logging]\nlevel = \"INFO\"\nformat = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\n[cache]\nredis_url = \"redis://localhost:6379\"\nttl = 3600\n\n# \ud658\uacbd\ubcc4 \uc124\uc815\n[development]\nextends = \"base\"\nlog_level = \"DEBUG\"\n\n[production] \nextends = \"base\"\nlog_level = \"INFO\"\n</code></pre>"},{"location":"MIGRATION_GUIDE/#_5","title":"\uc124\uc815 \ub85c\ub529 \ubcc0\uacbd","text":"<pre><code># Before (v3.x)\nfrom rfs.config import Config\n\nconfig = Config.load(\"config.yaml\")\ndb_host = config.database.host\n\n# After (v4.0)\nfrom rfs_v4.core import Config, ConfigProfile\n\nconfig = Config.load(\"config.toml\")\ndb_config = config.get_section(\"database\")\ndb_host = db_config[\"host\"]\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-6","title":"Step 6: \ubc18\uc751\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud65c\uc6a9","text":"<p>v4.0\uc758 \ud575\uc2ec \uae30\ub2a5\uc778 \ubc18\uc751\ud615 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ud65c\uc6a9\ud558\uc5ec \ube44\ub3d9\uae30 \ucc98\ub9ac\ub97c \uac1c\uc120\ud569\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#_6","title":"\ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac","text":"<pre><code># Before (v3.x) - \uc21c\ucc28 \ucc98\ub9ac\ndef process_users(user_ids: List[int]) -&gt; List[dict]:\n    results = []\n    for user_id in user_ids:\n        try:\n            user = get_user(user_id)\n            processed = process_user_data(user)\n            results.append(processed)\n        except Exception as e:\n            logger.error(f\"Failed to process user {user_id}: {e}\")\n    return results\n\n# After (v4.0) - \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc\nasync def process_users(user_ids: List[int]) -&gt; Result[List[dict], str]:\n    return await (\n        Flux.from_iterable(user_ids)\n        .flat_map(lambda user_id: get_user(user_id))  # \ubcd1\ub82c \ucc98\ub9ac\n        .map(lambda user: process_user_data(user))\n        .filter(lambda result: result.is_success())  # \uc131\uacf5\ud55c \uac83\ub9cc \ud544\ud130\ub9c1\n        .map(lambda result: result.value)\n        .collect_list()\n        .to_result()\n    )\n</code></pre>"},{"location":"MIGRATION_GUIDE/#_7","title":"\uc5d0\ub7ec \ucc98\ub9ac \uccb4\uc778","text":"<pre><code># Before (v3.x)\ndef create_order_workflow(order_data: dict) -&gt; dict:\n    try:\n        # 1. \uac80\uc99d\n        validated_data = validate_order(order_data)\n\n        # 2. \uc7ac\uace0 \ud655\uc778\n        check_inventory(validated_data['items'])\n\n        # 3. \uacb0\uc81c \ucc98\ub9ac\n        payment = process_payment(validated_data['payment'])\n\n        # 4. \uc8fc\ubb38 \uc0dd\uc131\n        order = create_order(validated_data)\n\n        # 5. \uc7ac\uace0 \ucc28\uac10\n        update_inventory(validated_data['items'])\n\n        # 6. \uc774\uba54\uc77c \ubc1c\uc1a1\n        send_confirmation_email(order)\n\n        return order\n\n    except Exception as e:\n        logger.error(f\"Order creation failed: {e}\")\n        raise\n\n# After (v4.0) - \ubc18\uc751\ud615 \uccb4\uc778\nasync def create_order_workflow(order_data: dict) -&gt; Result[dict, str]:\n    return await (\n        Mono.just(order_data)\n        .flat_map(lambda data: validate_order_async(data))\n        .flat_map(lambda data: check_inventory_async(data))\n        .flat_map(lambda data: process_payment_async(data))\n        .flat_map(lambda data: create_order_async(data))\n        .flat_map(lambda order: update_inventory_async(order))\n        .flat_map(lambda order: send_confirmation_email_async(order))\n        .on_error_resume(lambda error: handle_order_error(error))\n        .to_result()\n    )\n\nasync def handle_order_error(error: Exception) -&gt; Result[dict, str]:\n    logger.error(f\"Order workflow failed: {error}\")\n    # \ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud589\n    await rollback_order_changes()\n    return Result.failure(f\"Order creation failed: {str(error)}\")\n</code></pre>"},{"location":"MIGRATION_GUIDE/#step-7","title":"Step 7: \uc0c1\ud0dc \uba38\uc2e0 \ud65c\uc6a9","text":"<p>\ubcf5\uc7a1\ud55c \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc744 \uc0c1\ud0dc \uba38\uc2e0\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#_8","title":"\uc8fc\ubb38 \uc0c1\ud0dc \uad00\ub9ac","text":"<pre><code># Before (v3.x) - if/else \uae30\ubc18\nclass Order:\n    def __init__(self, data):\n        self.status = \"pending\"\n        self.data = data\n\n    def process_payment(self):\n        if self.status != \"pending\":\n            raise InvalidStateError(\"Cannot process payment\")\n\n        # \uacb0\uc81c \ucc98\ub9ac \ub85c\uc9c1\n        self.status = \"paid\"\n\n    def ship_order(self):\n        if self.status != \"paid\":\n            raise InvalidStateError(\"Cannot ship unpaid order\")\n\n        # \ubc30\uc1a1 \ucc98\ub9ac \ub85c\uc9c1\n        self.status = \"shipped\"\n\n# After (v4.0) - \uc0c1\ud0dc \uba38\uc2e0 \nfrom rfs_v4.state_machine import StateMachine, State, Transition\n\nclass OrderStateMachine:\n    def __init__(self):\n        self.machine = StateMachine(\n            initial_state=State(\"pending\"),\n            states=[\n                State(\"pending\"),\n                State(\"paid\"), \n                State(\"shipped\"),\n                State(\"delivered\"),\n                State(\"cancelled\")\n            ],\n            transitions=[\n                Transition(\"pending\", \"pay\", \"paid\"),\n                Transition(\"paid\", \"ship\", \"shipped\"), \n                Transition(\"shipped\", \"deliver\", \"delivered\"),\n                Transition(\"pending\", \"cancel\", \"cancelled\"),\n                Transition(\"paid\", \"cancel\", \"cancelled\")\n            ]\n        )\n\n    async def process_payment(self, order_id: str) -&gt; Result[str, str]:\n        # \uacb0\uc81c \ub85c\uc9c1\n        payment_result = await self._process_payment_logic(order_id)\n        if payment_result.is_failure():\n            return payment_result\n\n        # \uc0c1\ud0dc \uc804\ud658\n        transition_result = await self.machine.dispatch(\"pay\")\n        if transition_result.is_failure():\n            return Result.failure(\"Invalid state for payment\")\n\n        return Result.success(\"Payment processed successfully\")\n</code></pre>"},{"location":"MIGRATION_GUIDE/#testing-migration","title":"\ud83e\uddea Testing Migration","text":"<p>\ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub3c4 \ud568\uaed8 \ub9c8\uc774\uadf8\ub808\uc774\uc158\ud574\uc57c \ud569\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#_9","title":"\ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c \ubcc0\uacbd","text":"<pre><code># Before (v3.x)\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestUserService(unittest.TestCase):\n    def setUp(self):\n        self.service = UserService()\n\n    def test_get_user_success(self):\n        user = self.service.get_user(1)\n        self.assertIsInstance(user, dict)\n        self.assertEqual(user['id'], 1)\n\n    def test_get_user_not_found(self):\n        with self.assertRaises(NotFoundError):\n            self.service.get_user(999)\n\n# After (v4.0)\nimport pytest\nimport asyncio\nfrom unittest.mock import AsyncMock\n\nclass TestUserService:\n    @pytest.fixture\n    def service(self):\n        mock_db = AsyncMock()\n        return UserService(mock_db)\n\n    async def test_get_user_success(self, service):\n        service.db.query_one.return_value = {\"id\": 1, \"name\": \"John\"}\n\n        result = await service.get_user(1)\n\n        assert result.is_success()\n        assert result.value['id'] == 1\n\n    async def test_get_user_not_found(self, service):\n        service.db.query_one.return_value = None\n\n        result = await service.get_user(999)\n\n        assert result.is_failure()\n        assert \"not found\" in result.error\n</code></pre>"},{"location":"MIGRATION_GUIDE/#_10","title":"\ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ud14c\uc2a4\ud2b8","text":"<pre><code># v4.0 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ud14c\uc2a4\ud2b8\nasync def test_process_users_reactive():\n    user_ids = [1, 2, 3, 4, 5]\n\n    result = await (\n        Flux.from_iterable(user_ids)\n        .map(lambda x: x * 2)\n        .filter(lambda x: x % 4 == 0)\n        .collect_list()\n        .to_result()\n    )\n\n    assert result.is_success()\n    assert result.value == [4, 8]  # 2*2=4, 4*2=8\n</code></pre>"},{"location":"MIGRATION_GUIDE/#performance-optimization","title":"\ud83d\ude80 Performance Optimization","text":"<p>\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud6c4 \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#_11","title":"\ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ucd5c\uc801\ud654","text":"<pre><code># \ubcd1\ub82c \ucc98\ub9ac \ucd5c\uc801\ud654\nasync def process_large_dataset(items: List[dict]) -&gt; Result[List[dict], str]:\n    return await (\n        Flux.from_iterable(items)\n        .buffer(100)  # \ubc30\uce58 \ucc98\ub9ac\ub85c \uba54\ubaa8\ub9ac \uc808\uc57d\n        .flat_map(\n            lambda batch: Flux.from_iterable(batch)\n            .map(process_item)\n            .parallel(max_concurrency=10)  # \ubcd1\ub82c \ucc98\ub9ac\n        )\n        .collect_list()\n        .timeout(30)  # \ud0c0\uc784\uc544\uc6c3 \uc124\uc815\n        .to_result()\n    )\n</code></pre>"},{"location":"MIGRATION_GUIDE/#_12","title":"\uce90\uc2f1 \ud65c\uc6a9","text":"<pre><code>from rfs_v4.core import Cache\n\n@Cache.memoize(ttl=3600)  # 1\uc2dc\uac04 \uce90\uc2dc\nasync def expensive_calculation(params: dict) -&gt; Result[dict, str]:\n    # \ube44\uc6a9\uc774 \ud070 \uc5f0\uc0b0\n    pass\n</code></pre>"},{"location":"MIGRATION_GUIDE/#migration-checklist","title":"\ud83d\udcca Migration Checklist","text":""},{"location":"MIGRATION_GUIDE/#_13","title":"\ucf54\ub4dc \ubcc0\uacbd\uc0ac\ud56d \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> Import \uacbd\ub85c: \ubaa8\ub4e0 <code>rfs</code> import\ub97c <code>rfs_v4</code>\ub85c \ubcc0\uacbd</li> <li> Result \ud328\ud134: \ubaa8\ub4e0 \uc608\uc678 \ucc98\ub9ac\ub97c Result \ud328\ud134\uc73c\ub85c \ubcc0\uacbd</li> <li> \ube44\ub3d9\uae30\ud654: \ubaa8\ub4e0 \uacf5\uac1c \uba54\uc11c\ub4dc\ub97c async\ub85c \ubcc0\uacbd</li> <li> \ud0c0\uc785 \ud78c\ud2b8: \uc644\uc804\ud55c \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158 \ucd94\uac00</li> <li> \uc124\uc815 \ud30c\uc77c: YAML\uc744 TOML\ub85c \ubcc0\uacbd</li> <li> \ud14c\uc2a4\ud2b8 \ucf54\ub4dc: async \ud14c\uc2a4\ud2b8\ub85c \ubcc0\uacbd</li> </ul>"},{"location":"MIGRATION_GUIDE/#_14","title":"\uae30\ub2a5\ubcc4 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":""},{"location":"MIGRATION_GUIDE/#core","title":"Core \uae30\ub2a5","text":"<ul> <li> Result \ud328\ud134 \uad6c\ud604 \uc644\ub8cc</li> <li> \uc124\uc815 \uad00\ub9ac \uc2dc\uc2a4\ud15c \ub9c8\uc774\uadf8\ub808\uc774\uc158</li> <li> \uc758\uc874\uc131 \uc8fc\uc785 \ud328\ud134 \uc801\uc6a9</li> </ul>"},{"location":"MIGRATION_GUIDE/#reactive-programming","title":"Reactive Programming","text":"<ul> <li> Mono/Flux \uc2a4\ud2b8\ub9bc \ud65c\uc6a9</li> <li> \uc5d0\ub7ec \ucc98\ub9ac \uccb4\uc778 \uad6c\ud604  </li> <li> \ubcd1\ub82c \ucc98\ub9ac \ucd5c\uc801\ud654</li> </ul>"},{"location":"MIGRATION_GUIDE/#state-management","title":"State Management","text":"<ul> <li> \uc0c1\ud0dc \uba38\uc2e0 \ud328\ud134 \uc801\uc6a9</li> <li> \uc561\uc158 \uae30\ubc18 \uc0c1\ud0dc \ubcc0\uacbd</li> <li> \uc0c1\ud0dc \uc601\uc18d\ud654 \uad6c\ud604</li> </ul>"},{"location":"MIGRATION_GUIDE/#cloud-native","title":"Cloud Native","text":"<ul> <li> Cloud Run \uc124\uc815 \uc5c5\ub370\uc774\ud2b8</li> <li> \ud5ec\uc2a4\uccb4\ud06c \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ucd94\uac00</li> <li> \ubaa8\ub2c8\ud130\ub9c1 \uba54\ud2b8\ub9ad \uc124\uc815</li> </ul>"},{"location":"MIGRATION_GUIDE/#_15","title":"\ud14c\uc2a4\ud2b8 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> \ub2e8\uc704 \ud14c\uc2a4\ud2b8: \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\ub97c async\ub85c \ubcc0\uacbd</li> <li> \ud1b5\ud569 \ud14c\uc2a4\ud2b8: Result \ud328\ud134 \uac80\uc99d \ucd94\uac00</li> <li> \uc131\ub2a5 \ud14c\uc2a4\ud2b8: \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \uc131\ub2a5 \uac80\uc99d</li> <li> E2E \ud14c\uc2a4\ud2b8: \uc804\uccb4 \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uac80\uc99d</li> </ul>"},{"location":"MIGRATION_GUIDE/#common-migration-issues","title":"\ud83d\udc1b Common Migration Issues","text":""},{"location":"MIGRATION_GUIDE/#_16","title":"\uc790\uc8fc \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub4e4\uacfc \ud574\uacb0\ucc45","text":""},{"location":"MIGRATION_GUIDE/#1-cannot-use-result-in-sync-context","title":"1. \"Cannot use Result in sync context\"","text":"<pre><code># \uc798\ubabb\ub41c \uc0ac\uc6a9\ndef sync_function():\n    result = get_user_async(1)  # async \ud568\uc218\ub97c sync\uc5d0\uc11c \ud638\ucd9c\n    return result.value\n\n# \uc62c\ubc14\ub978 \uc0ac\uc6a9  \nasync def async_function():\n    result = await get_user_async(1)\n    return result.value\n</code></pre>"},{"location":"MIGRATION_GUIDE/#2-missing-await-in-result-chain","title":"2. \"Missing await in Result chain\"","text":"<pre><code># \uc798\ubabb\ub41c \uc0ac\uc6a9\nresult = (\n    Mono.just(data)\n    .map(process_data)\n    .to_result()  # await \ub204\ub77d\n)\n\n# \uc62c\ubc14\ub978 \uc0ac\uc6a9\nresult = await (\n    Mono.just(data)\n    .map(process_data)\n    .to_result()\n)\n</code></pre>"},{"location":"MIGRATION_GUIDE/#3-type-annotation-conflicts","title":"3. \"Type annotation conflicts\"","text":"<pre><code># Python 3.10+ \ubb38\ubc95 \uc0ac\uc6a9\nfrom typing import Union\n\n# \uc798\ubabb\ub41c \uc0ac\uc6a9 (Python 3.8)\ndef process(data: dict | None) -&gt; str | None:\n    pass\n\n# \uc62c\ubc14\ub978 \uc0ac\uc6a9 (Python 3.10+)\ndef process(data: dict | None) -&gt; str | None:\n    pass\n\n# \ub610\ub294 \ud558\uc704 \ud638\ud658\uc131\uc744 \uc704\ud574\ndef process(data: Union[dict, None]) -&gt; Union[str, None]:\n    pass\n</code></pre>"},{"location":"MIGRATION_GUIDE/#validation-steps","title":"\ud83d\udd0d Validation Steps","text":"<p>\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc644\ub8cc \ud6c4 \uac80\uc99d \ub2e8\uacc4\uc785\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#1_1","title":"1. \ucf54\ub4dc \ud488\uc9c8 \uac80\uc0ac","text":"<pre><code># \ud0c0\uc785 \uccb4\ud06c\nmypy src/\n\n# \ub9b0\ud130 \uac80\uc0ac  \nblack --check src/\nisort --check-only src/\nflake8 src/\n\n# \ubcf4\uc548 \uc2a4\uce94\nbandit -r src/\n</code></pre>"},{"location":"MIGRATION_GUIDE/#2_1","title":"2. \ud14c\uc2a4\ud2b8 \uc2e4\ud589","text":"<pre><code># \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\npytest --cov=src tests/\n\n# \ucee4\ubc84\ub9ac\uc9c0 \ud655\uc778 (90% \uc774\uc0c1 \uad8c\uc7a5)\npytest --cov=src --cov-report=html tests/\n</code></pre>"},{"location":"MIGRATION_GUIDE/#3","title":"3. \uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c","text":"<pre><code>import time\nimport asyncio\n\nasync def benchmark_old_vs_new():\n    # \uae30\uc874 \ubc29\uc2dd\n    start = time.time()\n    old_result = process_users_sync(user_ids)\n    old_time = time.time() - start\n\n    # \uc0c8 \ubc29\uc2dd  \n    start = time.time()\n    new_result = await process_users_async(user_ids)\n    new_time = time.time() - start\n\n    print(f\"Old: {old_time:.3f}s, New: {new_time:.3f}s\")\n    print(f\"Improvement: {((old_time - new_time) / old_time * 100):.1f}%\")\n</code></pre>"},{"location":"MIGRATION_GUIDE/#post-migration","title":"\ud83c\udf89 Post-Migration","text":"<p>\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc644\ub8cc \ud6c4 \uc218\ud589\ud560 \uc791\uc5c5\ub4e4\uc785\ub2c8\ub2e4.</p>"},{"location":"MIGRATION_GUIDE/#1_2","title":"1. \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815","text":"<pre><code>from rfs_v4.monitoring import MetricsCollector\n\nmetrics = MetricsCollector()\n\n# \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ucd94\uac00\n@metrics.track_performance\nasync def critical_business_function():\n    pass\n\n# \uc5d0\ub7ec\uc728 \ubaa8\ub2c8\ud130\ub9c1\n@metrics.track_errors\nasync def error_prone_function():\n    pass\n</code></pre>"},{"location":"MIGRATION_GUIDE/#2_2","title":"2. \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8","text":"<ul> <li>API \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8</li> <li>\uac1c\ubc1c \uac00\uc774\ub4dc\ub77c\uc778 \uc218\uc815</li> <li>\ubc30\ud3ec \uac00\uc774\ub4dc \uc5c5\ub370\uc774\ud2b8</li> <li>\ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc \uc124\uc815</li> </ul>"},{"location":"MIGRATION_GUIDE/#3_1","title":"3. \ud300 \uad50\uc721","text":"<ul> <li>Result \ud328\ud134 \uc0ac\uc6a9\ubc95 \uad50\uc721</li> <li>\ubc18\uc751\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \ud328\ub7ec\ub2e4\uc784 \uad50\uc721</li> <li>\uc0c8\ub85c\uc6b4 \ud14c\uc2a4\ud2b8 \ubc29\ubc95\ub860 \uad50\uc721</li> <li>\uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95 \uacf5\uc720</li> </ul>"},{"location":"MIGRATION_GUIDE/#support","title":"\ud83d\udcde Support","text":"<p>\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc911 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 \ub2e4\uc74c \ub9ac\uc18c\uc2a4\ub97c \ud65c\uc6a9\ud558\uc138\uc694:</p> <ul> <li>\ud83d\udcd6 Documentation: docs.rfs-framework.dev</li> <li>\ud83d\udcac Community: Discord</li> <li>\ud83d\udc1b Issues: GitHub Issues</li> <li>\ud83d\udce7 Email: migration-help@rfs-framework.dev</li> </ul> <p>\uc131\uacf5\uc801\uc778 \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc744 \uc751\uc6d0\ud569\ub2c8\ub2e4! \ud83d\ude80</p>"},{"location":"RELEASE_NOTES/","title":"Release Notes","text":"<p>RFS Framework \ubc84\uc804\ubcc4 \ub9b4\ub9ac\uc988 \ub178\ud2b8.</p>"},{"location":"RELEASE_NOTES/#v430-2025-01-25","title":"v4.3.0 (2025-01-25)","text":""},{"location":"RELEASE_NOTES/#_1","title":"\uc0c8\ub85c\uc6b4 \uae30\ub2a5","text":"<ul> <li>Higher-Order Functions (HOF): \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d \uc9c0\uc6d0</li> <li>Monads (Maybe, Either, IO)</li> <li>Collections \ucc98\ub9ac \ud568\uc218</li> <li> <p>\uace0\ucc28 \ud568\uc218 \uc720\ud2f8\ub9ac\ud2f0</p> </li> <li> <p>Result Pattern \uac1c\uc120: \ube44\ub3d9\uae30 \uc9c0\uc6d0 \ubc0f \ud0c0\uc785 \uc548\uc804\uc131 \uac15\ud654</p> </li> <li> <p>\ub9ac\uc561\ud2f0\ube0c \ud504\ub85c\uadf8\ub798\ubc0d: Mono/Flux \uc2a4\ud2b8\ub9bc \ucc98\ub9ac</p> </li> </ul>"},{"location":"RELEASE_NOTES/#_2","title":"\uac1c\uc120 \uc0ac\ud56d","text":"<ul> <li>\uc131\ub2a5 \ucd5c\uc801\ud654: 35% \uc131\ub2a5 \ud5a5\uc0c1</li> <li>\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc9c0\uc6d0 \uac15\ud654</li> <li>\ubb38\uc11c\ud654 \ubc0f \uc608\uc81c \ucf54\ub4dc \uac1c\uc120</li> </ul>"},{"location":"RELEASE_NOTES/#_3","title":"\ubc84\uadf8 \uc218\uc815","text":"<ul> <li>\ube44\ub3d9\uae30 \ucf58\ud14d\uc2a4\ud2b8\uc5d0\uc11c\uc758 \uba54\ubaa8\ub9ac \ub204\uc218 \uc218\uc815</li> <li>\ud0c0\uc785 \ucd94\ub860 \ub85c\uc9c1 \ubc84\uadf8 \uc218\uc815</li> </ul>"},{"location":"RELEASE_NOTES/#v420-2025-01-15","title":"v4.2.0 (2025-01-15)","text":""},{"location":"RELEASE_NOTES/#_4","title":"\uc0c8\ub85c\uc6b4 \uae30\ub2a5","text":"<ul> <li>\ube44\ub3d9\uae30 \uc791\uc5c5 \uad00\ub9ac\uc790: \uc791\uc5c5 \uc608\uc57d \ubc0f \uc2e4\ud589</li> <li>\uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c: \ube44\ub3d9\uae30 \uc774\ubca4\ud2b8 \ubc84\uc2a4</li> <li>\uc0c1\ud0dc \uba38\uc2e0: \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158</li> </ul>"},{"location":"RELEASE_NOTES/#_5","title":"\uac1c\uc120 \uc0ac\ud56d","text":"<ul> <li>Cloud Run \uc5f0\ub3d9 \ubc0f \ubc30\ud3ec \uc790\ub3d9\ud654</li> <li>\uc2a4\ub9c8\ud2b8 \ub85c\uae45 \ubc0f \ubaa8\ub2c8\ud130\ub9c1</li> </ul>"},{"location":"RELEASE_NOTES/#v410-2025-01-01","title":"v4.1.0 (2025-01-01)","text":""},{"location":"RELEASE_NOTES/#_6","title":"\uc0c8\ub85c\uc6b4 \uae30\ub2a5","text":"<ul> <li>\ub370\uc774\ud130\ubca0\uc774\uc2a4 ORM: \uac04\ub2e8\ud55c ORM \uc778\ud130\ud398\uc774\uc2a4</li> <li>\uc720\ud6a8\uc131 \uac80\uc0ac: \ub370\uc774\ud130 \ubc0f \uc624\ube0c\uc81d\ud2b8 \uac80\uc99d</li> <li>\uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1: \uc790\ub3d9 \uc131\ub2a5 \ucd94\uc801</li> </ul>"},{"location":"RELEASE_NOTES/#v400-2024-12-15","title":"v4.0.0 (2024-12-15)","text":""},{"location":"RELEASE_NOTES/#_7","title":"\uc8fc\uc694 \ubcc0\uacbd \uc0ac\ud56d","text":"<ul> <li>Result Pattern \ub3c4\uc785: \uc624\ub958 \ucc98\ub9ac \ud328\ub7ec\ub2e4\uc784 \ubcc0\uacbd</li> <li>\uc758\uc874\uc131 \uc8fc\uc785: \ucef4\ud3ec\ub10c\ud2b8 \uac00\uc791\uc131 \ud5a5\uc0c1</li> <li>\ube44\ub3d9\uae30 \uc6d0\uc2dc \uc9c0\uc6d0: \uc131\ub2a5 \ubc0f \ud655\uc7a5\uc131 \uac1c\uc120</li> </ul>"},{"location":"RELEASE_NOTES/#_8","title":"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uac00\uc774\ub4dc","text":"<p>\uc790\uc138\ud55c \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ubc29\ubc95\uc740 MIGRATION_GUIDE.md\ub97c \ucc38\uc870\ud558\uc138\uc694.</p>"},{"location":"RELEASE_NOTES/#v3x","title":"v3.x \uc9c0\uc6d0 \uc885\ub8cc","text":"<p>v3.x \uc2dc\ub9ac\uc988\uc5d0 \ub300\ud55c \uc9c0\uc6d0\uc774 2025\ub144 6\uc6d4 30\uc77c\uc5d0 \uc885\ub8cc\ub429\ub2c8\ub2e4. \ubcf4\uc548 \ud328\uce58\ub294 2025\ub144 12\uc6d4 31\uc77c\uae4c\uc9c0 \uc81c\uacf5\ub429\ub2c8\ub2e4.</p>"},{"location":"ROADMAP/","title":"RFS Framework \ub85c\ub4dc\ub9f5","text":""},{"location":"ROADMAP/#v431-production-ready","title":"\ud604\uc7ac \ubc84\uc804: v4.3.1 (Production Ready)","text":""},{"location":"ROADMAP/#_1","title":"\uc644\ub8cc\ub41c \uae30\ub2a5 \u2705","text":"<ul> <li>\u2705 Result \ud328\ud134 \uad6c\ud604</li> <li>\u2705 Reactive Streams (Mono/Flux)</li> <li>\u2705 Cloud Run \ucd5c\uc801\ud654</li> <li>\u2705 \uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c</li> <li>\u2705 13\uac1c \ud55c\uad6d\uc5b4 \ubb38\uc11c \ubaa8\ub4c8</li> <li>\u2705 \uae30\ubcf8 CLI \uba85\ub839\uc5b4 (version, status, config, help)</li> </ul>"},{"location":"ROADMAP/#_2","title":"\uc9c4\ud589 \uc911 \ud83d\udd04","text":"<ul> <li>\ud83d\udd04 Gateway \ubaa8\ub4c8 \uc644\uc131 (REST \uc644\ub8cc, GraphQL \uc9c4\ud589 \uc911)</li> <li>\ud83d\udd04 CLI \uace0\uae09 \uae30\ub2a5 \uac1c\ubc1c</li> </ul>"},{"location":"ROADMAP/#v440-2025-q1","title":"v4.4.0 (\uacc4\ud68d \uc911 - 2025 Q1)","text":""},{"location":"ROADMAP/#cli","title":"CLI \ud655\uc7a5 \uae30\ub2a5","text":"<ul> <li> <code>rfs init</code> - \ud504\ub85c\uc81d\ud2b8 \uc2a4\uce90\ud3f4\ub529</li> <li>\ud504\ub85c\uc81d\ud2b8 \ud15c\ud50c\ub9bf \uc120\ud0dd</li> <li>\uc758\uc874\uc131 \uc790\ub3d9 \uc124\uc815</li> <li> <p>\uae30\ubcf8 \uad6c\uc870 \uc0dd\uc131</p> </li> <li> <p> <code>rfs dev</code> - \uac1c\ubc1c \uc11c\ubc84 \ud1b5\ud569</p> </li> <li>\uc790\ub3d9 \uc7ac\uc2dc\uc791</li> <li>\ud56b \ub9ac\ub85c\ub529</li> <li> <p>\ub514\ubc84\uadf8 \ubaa8\ub4dc</p> </li> <li> <p> <code>rfs test</code> - \ud14c\uc2a4\ud2b8 \uc2e4\ud589\uae30</p> </li> <li>\uc720\ub2db \ud14c\uc2a4\ud2b8 \ud1b5\ud569</li> <li>\ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0</li> <li>\ucee4\ubc84\ub9ac\uc9c0 \ub9ac\ud3ec\ud2b8</li> </ul>"},{"location":"ROADMAP/#gateway","title":"Gateway \ubaa8\ub4c8 \uc644\uc131","text":"<ul> <li> GraphQL \uac8c\uc774\ud2b8\uc6e8\uc774 \uad6c\ud604</li> <li>\uc2a4\ud0a4\ub9c8 \uc815\uc758</li> <li>\ub9ac\uc878\ubc84 \uc2dc\uc2a4\ud15c</li> <li> <p>\uad6c\ub3c5 \uc9c0\uc6d0</p> </li> <li> <p> \ubbf8\ub4e4\uc6e8\uc5b4 \uc2dc\uc2a4\ud15c</p> </li> <li>\uc778\uc99d \ubbf8\ub4e4\uc6e8\uc5b4</li> <li>CORS \ubbf8\ub4e4\uc6e8\uc5b4</li> <li> <p>\ub85c\uae45 \ubbf8\ub4e4\uc6e8\uc5b4</p> </li> <li> <p> \ud504\ub85d\uc2dc \uac8c\uc774\ud2b8\uc6e8\uc774</p> </li> <li>\ub85c\ub4dc \ubc38\ub7f0\uc2f1</li> <li>\ud5ec\uc2a4 \uccb4\ud06c</li> <li>\uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac</li> </ul>"},{"location":"ROADMAP/#v450-2025-q2","title":"v4.5.0 (\uacc4\ud68d \uc911 - 2025 Q2)","text":""},{"location":"ROADMAP/#cicd","title":"\ubc30\ud3ec \ubc0f CI/CD","text":"<ul> <li> <code>rfs build</code> - \ud504\ub85c\ub355\uc158 \ube4c\ub4dc</li> <li>\ucd5c\uc801\ud654 \ube4c\ub4dc</li> <li>\ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc0dd\uc131</li> <li> <p>\ud658\uacbd\ubcc4 \uc124\uc815</p> </li> <li> <p> <code>rfs deploy</code> - Cloud Run \ubc30\ud3ec</p> </li> <li>\uc790\ub3d9 \ubc30\ud3ec \ud30c\uc774\ud504\ub77c\uc778</li> <li>Blue-Green \ubc30\ud3ec</li> <li> <p>\ub864\ubc31 \uc9c0\uc6d0</p> </li> <li> <p> <code>rfs docs</code> - \ubb38\uc11c \uc0dd\uc131</p> </li> <li>API \ubb38\uc11c \uc790\ub3d9 \uc0dd\uc131</li> <li>Swagger/OpenAPI \uc9c0\uc6d0</li> <li>MkDocs \ud1b5\ud569</li> </ul>"},{"location":"ROADMAP/#_3","title":"\uc131\ub2a5 \ucd5c\uc801\ud654","text":"<ul> <li> Cold Start \ucd5c\uc801\ud654 \uac1c\uc120</li> <li> \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ucd5c\uc801\ud654</li> <li> \ube44\ub3d9\uae30 \ucc98\ub9ac \uac1c\uc120</li> </ul>"},{"location":"ROADMAP/#v500-2025-q3","title":"v5.0.0 (\uc7a5\uae30 \uacc4\ud68d - 2025 Q3)","text":""},{"location":"ROADMAP/#_4","title":"\uc8fc\uc694 \uc544\ud0a4\ud14d\ucc98 \uac1c\uc120","text":"<ul> <li> \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c</li> <li> \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc9c0\uc6d0</li> <li> \uba40\ud2f0 \ud074\ub77c\uc6b0\ub4dc \uc9c0\uc6d0 (AWS Lambda, Azure Functions)</li> </ul>"},{"location":"ROADMAP/#_5","title":"\uc5d4\ud130\ud504\ub77c\uc774\uc988 \uae30\ub2a5","text":"<ul> <li> \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158</li> <li> \uc774\ubca4\ud2b8 \uc18c\uc2f1</li> <li> CQRS \ud328\ud134 \uc9c0\uc6d0</li> <li> \uba40\ud2f0 \ud14c\ub10c\uc2dc</li> </ul>"},{"location":"ROADMAP/#_6","title":"\uac1c\ubc1c\uc790 \uacbd\ud5d8 \ud5a5\uc0c1","text":"<ul> <li> Visual Studio Code \ud655\uc7a5</li> <li> \ub514\ubc84\uae45 \ud234\uccb4\uc778</li> <li> \uc131\ub2a5 \ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c</li> <li> \ub300\ud654\ud615 CLI (REPL)</li> </ul>"},{"location":"ROADMAP/#_7","title":"\uae30\uc5ec \ubc29\ubc95","text":"<p>RFS Framework\ub294 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc785\ub2c8\ub2e4. \uae30\uc5ec\ub97c \ud658\uc601\ud569\ub2c8\ub2e4!</p>"},{"location":"ROADMAP/#_8","title":"\uae30\uc5ec \uac00\uc774\ub4dc\ub77c\uc778","text":"<ol> <li>Issue \ub4f1\ub85d \ub610\ub294 \uae30\uc874 Issue \ud655\uc778</li> <li>Fork \ud6c4 feature \ube0c\ub79c\uce58 \uc0dd\uc131</li> <li>\ubcc0\uacbd\uc0ac\ud56d \uad6c\ud604 \ubc0f \ud14c\uc2a4\ud2b8 \uc791\uc131</li> <li>Pull Request \uc81c\ucd9c</li> </ol>"},{"location":"ROADMAP/#_9","title":"\uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc740 \uc791\uc5c5","text":"<ul> <li>\ud83d\udd34 \uae34\uae09: Gateway \ubaa8\ub4c8 GraphQL \uad6c\ud604</li> <li>\ud83d\udfe0 \ub192\uc74c: CLI \uace0\uae09 \uba85\ub839\uc5b4 \uad6c\ud604</li> <li>\ud83d\udfe1 \uc911\uac04: \ubb38\uc11c\ud654 \ubc0f \uc608\uc81c \ucd94\uac00</li> <li>\ud83d\udfe2 \ub0ae\uc74c: \uc131\ub2a5 \ucd5c\uc801\ud654</li> </ul>"},{"location":"ROADMAP/#_10","title":"\uc54c\ub824\uc9c4 \uc774\uc288","text":""},{"location":"ROADMAP/#v431","title":"v4.3.1 \ud604\uc7ac","text":"<ul> <li>\u26a0\ufe0f \uc77c\ubd80 CLI \uba85\ub839\uc5b4 \ubbf8\uad6c\ud604 (init, dev, build, deploy, test, docs)</li> <li>\u26a0\ufe0f Gateway \ubaa8\ub4c8 \uc77c\ubd80 \uae30\ub2a5 \ud50c\ub808\uc774\uc2a4\ud640\ub354</li> <li>\u26a0\ufe0f FastAPI \uc758\uc874\uc131\uc774 \uc120\ud0dd\uc801\uc774\uc9c0\ub9cc \ub9ce\uc740 \uc608\uc81c\uc5d0\uc11c \ud544\uc694</li> </ul>"},{"location":"ROADMAP/#_11","title":"\ud574\uacb0 \uc608\uc815","text":"<ul> <li>v4.4.0: CLI \uba85\ub839\uc5b4 \uc644\uc131</li> <li>v4.4.0: Gateway \ubaa8\ub4c8 \uc804\uccb4 \uad6c\ud604</li> <li>v4.5.0: \uc120\ud0dd\uc801 \uc758\uc874\uc131 \uad00\ub9ac \uac1c\uc120</li> </ul>"},{"location":"ROADMAP/#_12","title":"\ub9b4\ub9ac\uc988 \uc0ac\uc774\ud074","text":"<ul> <li>Patch \ub9b4\ub9ac\uc988 (x.x.1): \ub9e4\uc8fc \ubc84\uadf8 \uc218\uc815</li> <li>Minor \ub9b4\ub9ac\uc988 (x.1.0): \ub9e4\uc6d4 \uc0c8 \uae30\ub2a5</li> <li>Major \ub9b4\ub9ac\uc988 (1.0.0): \ubd84\uae30\ubcc4 \uc8fc\uc694 \ubcc0\uacbd</li> </ul>"},{"location":"ROADMAP/#_13","title":"\uc5f0\ub77d\ucc98","text":"<ul> <li>GitHub: https://github.com/interactord/rfs-framework</li> <li>PyPI: https://pypi.org/project/rfs-framework/</li> <li>\uc774\uc288 \ud2b8\ub798\ucee4: https://github.com/interactord/rfs-framework/issues</li> </ul> <p>\ucd5c\uc885 \uc5c5\ub370\uc774\ud2b8: 2025-08-27</p>"},{"location":"TODO/","title":"TODO - RFS Framework v4.3.0","text":""},{"location":"TODO/#_1","title":"\ud83d\udccb \uac1c\uc694","text":"<p>RFS Framework\uc758 \ubbf8\uc644\uc131 \uae30\ub2a5 \ubc0f \uac1c\uc120\uc774 \ud544\uc694\ud55c \ud56d\ubaa9\ub4e4\uc744 \ucd94\uc801\ud558\ub294 \ubb38\uc11c\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\ub294 \uac1c\ubc1c\uc790\ub4e4\uc774 \uae30\uc5ec\ud560 \uc218 \uc788\ub294 \uc601\uc5ed\uc744 \uba85\ud655\ud788 \ud558\uace0, \ud504\ub85c\uc81d\ud2b8\uc758 \uc644\uc131\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud55c \ub85c\ub4dc\ub9f5 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.</p> <p>\ud604\uc7ac \uc644\uc131\ub3c4: 93% (2025-08-25 \uae30\uc900)</p>"},{"location":"TODO/#phase-1-critical-fixes","title":"\u2705 \uc644\ub8cc\ub41c \ud56d\ubaa9 (Phase 1 - Critical Fixes)","text":""},{"location":"TODO/#2025-08-25","title":"2025-08-25 \uc644\ub8cc","text":"<ul> <li> Production Monitor: \uba54\ud2b8\ub9ad \ub370\uc774\ud130 \ubcd1\ud569 \ub85c\uc9c1 \uc218\uc815</li> <li> Readiness Check: \uc9c4\ud589 \uc0c1\ud0dc \ucd94\uc801 \uc218\uc815  </li> <li> Optimizer: \ucd5c\uc801\ud654 \uc9c4\ud589 \ucd94\uc801 \uac1c\uc120</li> <li> Unit Tests: \uc218\uc815\ub41c \ucef4\ud3ec\ub10c\ud2b8\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \uc791\uc131</li> </ul>"},{"location":"TODO/#_2","title":"\ud83d\udea7 \uc9c4\ud589 \uc608\uc815 \ud56d\ubaa9","text":""},{"location":"TODO/#phase-2-core-completions-2-3","title":"Phase 2: Core Completions (2-3\uc8fc)","text":""},{"location":"TODO/#analytics-module-srcrfsanalytics","title":"Analytics Module (<code>src/rfs/analytics/</code>)","text":"<ul> <li> KPI \uacc4\uc0b0 \ub85c\uc9c1 \uad6c\ud604 </li> <li>\ud30c\uc77c: <code>kpi.py</code> (Line 135, 360, 595)</li> <li>\uc124\uba85: \uc2e4\uc81c KPI \uacc4\uc0b0 \uc54c\uace0\ub9ac\uc998 \uad6c\ud604 \ud544\uc694</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Medium</p> </li> <li> <p> \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uae30\ub2a5</p> </li> <li>\ud30c\uc77c: <code>reports.py</code> (Line 117, 122)</li> <li>\uc124\uba85: PDF/HTML \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \ub85c\uc9c1 \uad6c\ud604</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Low</p> </li> <li> <p> \ub300\uc2dc\ubcf4\ub4dc \ub80c\ub354\ub9c1</p> </li> <li>\ud30c\uc77c: <code>dashboard.py</code> (Line 111)</li> <li>\uc124\uba85: \uc2e4\uc2dc\uac04 \ub300\uc2dc\ubcf4\ub4dc UI \uad6c\ud604</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Low</p> </li> <li> <p> \ucc28\ud2b8 \uc2dc\uac01\ud654</p> </li> <li>\ud30c\uc77c: <code>visualization.py</code> (Line 92, 97)</li> <li>\ud30c\uc77c: <code>charts.py</code> (Line 129)</li> <li>\uc124\uba85: \ucc28\ud2b8 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud1b5\ud569 \ubc0f \ub80c\ub354\ub9c1</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Low</p> </li> <li> <p> \ub370\uc774\ud130 \uc18c\uc2a4 \uc5f0\uacb0</p> </li> <li>\ud30c\uc77c: <code>data_source.py</code> (Line 67, 72, 79, 84, 100)</li> <li>\uc124\uba85: DB/API \uc5f0\uacb0 \uc5b4\ub311\ud130 \uad6c\ud604</li> <li>\uc6b0\uc120\uc21c\uc704: Medium</li> </ul>"},{"location":"TODO/#gateway-module-srcrfsgateway","title":"Gateway Module (<code>src/rfs/gateway/</code>)","text":"<ul> <li> REST API \ud578\ub4e4\ub7ec \uad6c\ud604</li> <li>\ud30c\uc77c: <code>rest.py</code> (Line 212, 219)</li> <li>\uc124\uba85: \ubbf8\uad6c\ud604 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc644\uc131</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Medium</p> </li> <li> <p> \uc778\uc99d/\uc778\uac00 \ubbf8\ub4e4\uc6e8\uc5b4</p> </li> <li>\ud30c\uc77c: <code>rest.py</code> (Line 129)</li> <li>\uc124\uba85: JWT \uc778\uc99d \ubc0f \uad8c\ud55c \uccb4\ud06c \uad6c\ud604</li> <li>\uc6b0\uc120\uc21c\uc704: High (\ubcf4\uc548 \uad00\ub828)</li> </ul>"},{"location":"TODO/#cloud-run-module-srcrfscloud_run","title":"Cloud Run Module (<code>src/rfs/cloud_run/</code>)","text":"<ul> <li> \ud5ec\ud37c \ud568\uc218 \uad6c\ud604</li> <li>\ud30c\uc77c: <code>helpers.py</code> (Line 492)</li> <li>\uc124\uba85: Cloud Run \uad00\ub828 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Low</p> </li> <li> <p> \uc11c\ube44\uc2a4 \ubc1c\uacac \ub85c\uc9c1</p> </li> <li>\ud30c\uc77c: <code>service_discovery.py</code> (Line 508)</li> <li>\uc124\uba85: \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uba54\ucee4\ub2c8\uc998 \uc644\uc131</li> <li> <p>\uc6b0\uc120\uc21c\uc704: Low</p> </li> <li> <p> \uc790\ub3d9 \uc2a4\ucf00\uc77c\ub9c1 \ub85c\uc9c1</p> </li> <li>\ud30c\uc77c: <code>autoscaling.py</code> (Line 617)</li> <li>\uc124\uba85: \uc2a4\ucf00\uc77c\ub9c1 \uc815\ucc45 \uad6c\ud604</li> <li>\uc6b0\uc120\uc21c\uc704: Low</li> </ul>"},{"location":"TODO/#phase-3-enhancement-1-2","title":"Phase 3: Enhancement (1-2\uac1c\uc6d4)","text":""},{"location":"TODO/#templates-examples","title":"Templates &amp; Examples","text":"<ul> <li> \ud504\ub85c\uc81d\ud2b8 \ud15c\ud50c\ub9bf \uac1c\uc120</li> <li>\uc704\uce58: <code>src/rfs/cli/commands/project.py</code></li> <li> <p>\uc124\uba85: \uc0dd\uc131\ub418\ub294 \uc11c\ube44\uc2a4 \ud15c\ud50c\ub9bf\uc5d0 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc608\uc81c \ucd94\uac00</p> </li> <li> <p> \ud14c\uc2a4\ud2b8 \ud15c\ud50c\ub9bf \uac1c\uc120</p> </li> <li>\uc704\uce58: <code>src/rfs/cli/testing/test_runner.py</code></li> <li>\uc124\uba85: \uc2e4\uc81c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc608\uc81c \ud3ec\ud568</li> </ul>"},{"location":"TODO/#documentation","title":"Documentation","text":"<ul> <li> API \ubb38\uc11c \uc790\ub3d9 \uc0dd\uc131</li> <li> \uc608\uc81c \ucf54\ub4dc \ud655\ucda9</li> <li> \ube44\ub514\uc624 \ud29c\ud1a0\ub9ac\uc5bc \uc81c\uc791</li> </ul>"},{"location":"TODO/#phase-4-polish-3","title":"Phase 4: Polish (3\uac1c\uc6d4)","text":""},{"location":"TODO/#code-quality","title":"Code Quality","text":"<ul> <li> \ubaa8\ub4e0 <code>pass</code> statement \uc81c\uac70</li> <li> 100% \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 \ub2ec\uc131</li> <li> \uc131\ub2a5 \ucd5c\uc801\ud654</li> <li>\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uac10\uc18c</li> <li>\uc751\ub2f5 \uc2dc\uac04 \uac1c\uc120</li> <li>\ucf5c\ub4dc \uc2a4\ud0c0\ud2b8 \ucd5c\uc801\ud654</li> </ul>"},{"location":"TODO/#advanced-features","title":"Advanced Features","text":"<ul> <li> \ud50c\ub7ec\uadf8\uc778 \uc2dc\uc2a4\ud15c</li> <li> GraphQL \uc9c0\uc6d0</li> <li> WebSocket \uc9c0\uc6d0</li> <li> gRPC \uc9c0\uc6d0</li> </ul>"},{"location":"TODO/#_3","title":"\ud83c\udfaf \uc6b0\uc120\uc21c\uc704 \uac00\uc774\ub4dc","text":""},{"location":"TODO/#high-priority","title":"High Priority \ud83d\udd34","text":"<ol> <li>Gateway \uc778\uc99d/\uc778\uac00: \ubcf4\uc548 \uad00\ub828 \uae30\ub2a5\uc73c\ub85c \ucd5c\uc6b0\uc120 \uad6c\ud604 \ud544\uc694</li> </ol>"},{"location":"TODO/#medium-priority","title":"Medium Priority \ud83d\udfe1","text":"<ol> <li>Analytics KPI \uacc4\uc0b0: \ube44\uc988\ub2c8\uc2a4 \ubd84\uc11d \uae30\ub2a5</li> <li>Analytics \ub370\uc774\ud130 \uc18c\uc2a4: \ub370\uc774\ud130 \uc5f0\uacb0 \uae30\ub2a5</li> <li>Gateway REST \ud578\ub4e4\ub7ec: API \uc644\uc131\ub3c4</li> </ol>"},{"location":"TODO/#low-priority","title":"Low Priority \ud83d\udfe2","text":"<ol> <li>Analytics \uc2dc\uac01\ud654: \ucc28\ud2b8, \ub300\uc2dc\ubcf4\ub4dc UI</li> <li>Cloud Run \ud5ec\ud37c: \ubcf4\uc870 \uc720\ud2f8\ub9ac\ud2f0</li> <li>Templates: \uac1c\ubc1c\uc790 \uacbd\ud5d8 \uac1c\uc120</li> </ol>"},{"location":"TODO/#_4","title":"\ud83d\udcdd \uae30\uc5ec \ubc29\ubc95","text":""},{"location":"TODO/#_5","title":"\uc791\uc5c5 \uc2dc\uc791\ud558\uae30","text":"<ol> <li> <p>\uc774\uc288 \ud655\uc778/\uc0dd\uc131 <pre><code># GitHub Issues\uc5d0\uc11c \uad00\ub828 \uc774\uc288 \ud655\uc778\n# \uc5c6\ub2e4\uba74 \uc0c8 \uc774\uc288 \uc0dd\uc131 (\ub77c\ubca8: enhancement, help wanted)\n</code></pre></p> </li> <li> <p>\ube0c\ub79c\uce58 \uc0dd\uc131 <pre><code>git checkout -b feature/analytics-kpi-implementation\n</code></pre></p> </li> <li> <p>\ucf54\ub4dc \uc791\uc131</p> </li> <li>RFS Framework \ucf54\ub4dc \uc2a4\ud0c0\uc77c \uc900\uc218</li> <li>Result \ud328\ud134 \uc0ac\uc6a9</li> <li>\ud0c0\uc785 \ud78c\ud2b8 100% \uc801\uc6a9</li> <li> <p>\ud14c\uc2a4\ud2b8 \uc791\uc131 \ud544\uc218</p> </li> <li> <p>PR \uc81c\ucd9c <pre><code># PR \uc81c\ubaa9 \ud615\uc2dd: [Module] Feature description\n# \uc608: [Analytics] Implement KPI calculation logic\n</code></pre></p> </li> </ol>"},{"location":"TODO/#_6","title":"\ucf54\ub4dc \uc2a4\ud0c0\uc77c \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> Black \ud3ec\ub9f7\ud305 \uc801\uc6a9 (<code>black src/</code>)</li> <li> isort \uc815\ub82c (<code>isort src/</code>)</li> <li> Mypy \ud0c0\uc785 \uccb4\ud06c (<code>mypy src/</code>)</li> <li> \ud14c\uc2a4\ud2b8 \ud1b5\uacfc (<code>pytest</code>)</li> <li> \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8</li> </ul>"},{"location":"TODO/#_7","title":"\ud83d\udcca \uc9c4\ud589 \uc0c1\ud669","text":""},{"location":"TODO/#_8","title":"\uc804\uccb4 \ud1b5\uacc4","text":"<ul> <li>\uc644\ub8cc: 93%</li> <li>\uc9c4\ud589\uc911: 0%</li> <li>\ub300\uae30\uc911: 7%</li> </ul>"},{"location":"TODO/#_9","title":"\ubaa8\ub4c8\ubcc4 \uc644\uc131\ub3c4","text":"\ubaa8\ub4c8 \uc644\uc131\ub3c4 \uc0c1\ud0dc Core 100% \u2705 Complete Reactive 100% \u2705 Complete State Machine 100% \u2705 Complete Events 100% \u2705 Complete Security 100% \u2705 Complete CLI 100% \u2705 Complete Production 95% \ud83d\udd27 Minor fixes done Analytics 60% \ud83d\udea7 In Progress Gateway 70% \ud83d\udea7 In Progress Cloud Run 85% \ud83d\udd27 Minor improvements needed"},{"location":"TODO/#_10","title":"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Implementation Status - \uc0c1\uc138 \uad6c\ud604 \ud604\ud669</li> <li>Code Quality Guidelines - \ucf54\ub4dc \ud488\uc9c8 \uac00\uc774\ub4dc</li> <li>Contributing Guide - \uae30\uc5ec \uac00\uc774\ub4dc</li> <li>Issue Tracker - GitHub Issues</li> </ul>"},{"location":"TODO/#_11","title":"\ud83d\udcc5 \uc5c5\ub370\uc774\ud2b8 \uc774\ub825","text":"<ul> <li>2025-08-25: TODO.md \uc0dd\uc131, Phase 1 \uc644\ub8cc \uae30\ub85d</li> <li>2025-08-25: Phase 2-4 \uacc4\ud68d \uc218\ub9bd</li> </ul> <p>Note: \uc774 \ubb38\uc11c\ub294 \ud504\ub85c\uc81d\ud2b8 \uc9c4\ud589\uc5d0 \ub530\ub77c \uc9c0\uc18d\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub429\ub2c8\ub2e4.  \uc791\uc5c5\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc744 \ud655\uc778\ud558\uc138\uc694.</p>"},{"location":"USER_GUIDE/","title":"RFS Framework v4.2 \uc0ac\uc6a9\uc790 \uac00\uc774\ub4dc","text":""},{"location":"USER_GUIDE/#_1","title":"\uc18c\uac1c","text":"<p>RFS Framework v4.2\ub294 \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09 Python \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud55c \uc885\ud569\uc801\uc778 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. \uc131\ub2a5 \ucd5c\uc801\ud654, \ud504\ub85c\ub355\uc158 \uad00\ub9ac, \uadf8\ub9ac\uace0 \uace0\uae09 \ud1b5\ud569 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"USER_GUIDE/#_2","title":"\uc8fc\uc694 \ud2b9\uc9d5","text":"<ul> <li>\u26a1 \uc131\ub2a5 \ucd5c\uc801\ud654: \uc2e4\uc2dc\uac04 \ud504\ub85c\ud30c\uc77c\ub9c1 \ubc0f \uc790\ub3d9 \ucd5c\uc801\ud654</li> <li>\ud83d\udd0d \ud504\ub85c\ub355\uc158 \ubaa8\ub2c8\ud130\ub9c1: 24/7 \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc</li> <li>\ud83d\udd04 \uc7ac\ud574 \ubcf5\uad6c: \uc790\ub3d9 \ubc31\uc5c5 \ubc0f \ubcf5\uad6c \uc2dc\uc2a4\ud15c</li> <li>\ud83c\udf10 API Gateway: \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09 API \uad00\ub9ac</li> <li>\ud83d\udcbe \ubd84\uc0b0 \uce90\uc2dc: \uace0\uc131\ub2a5 \uba40\ud2f0\ub808\ubca8 \uce90\uc2f1</li> <li>\ud83d\udd0c \uc6f9 \ud1b5\ud569: REST, GraphQL, WebSocket \uc9c0\uc6d0</li> </ul>"},{"location":"USER_GUIDE/#_3","title":"\ube60\ub978 \uc2dc\uc791","text":""},{"location":"USER_GUIDE/#_4","title":"\uc124\uce58","text":"<pre><code># \uc804\uccb4 \uae30\ub2a5 \uc124\uce58\npip install rfs-framework[all]\n\n# \ud2b9\uc815 \uae30\ub2a5\ub9cc \uc124\uce58\npip install rfs-framework[performance,production,integration]\n</code></pre>"},{"location":"USER_GUIDE/#_5","title":"\uae30\ubcf8 \uc124\uc815","text":"<pre><code># config.py\nfrom rfs.config import RFSConfig\n\nconfig = RFSConfig(\n    environment=\"production\",\n    cloud_run_enabled=True,\n    monitoring_enabled=True,\n    cache_backend=\"redis\",\n    api_gateway_enabled=True\n)\n</code></pre>"},{"location":"USER_GUIDE/#_6","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"USER_GUIDE/#1","title":"1. \uc131\ub2a5 \ucd5c\uc801\ud654","text":""},{"location":"USER_GUIDE/#_7","title":"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ud504\ub85c\ud30c\uc77c\ub9c1","text":"<pre><code>import asyncio\nfrom rfs.performance.profiling import get_system_profiler\n\nasync def profile_application():\n    profiler = get_system_profiler()\n    await profiler.start()\n\n    # \ud504\ub85c\ud30c\uc77c\ub9c1\ud560 \uc791\uc5c5\n    await profiler.start_profile(\"data_processing\")\n\n    # \uc2e4\uc81c \uc791\uc5c5 \uc218\ud589\n    data = await process_large_dataset()\n\n    # \ud504\ub85c\ud30c\uc77c \uacb0\uacfc \ud655\uc778\n    result = await profiler.stop_profile(\"data_processing\")\n    profile = result.value\n\n    print(f\"\uc791\uc5c5 \uc2dc\uac04: {profile.duration}\ucd08\")\n    print(f\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9: {profile.memory_used / 1024 / 1024:.2f} MB\")\n    print(f\"CPU \uc0ac\uc6a9\ub960: {profile.cpu_usage}%\")\n\n    # \ubcd1\ubaa9 \ud604\uc0c1 \ubd84\uc11d\n    bottlenecks = profile.bottlenecks\n    for bottleneck in bottlenecks:\n        print(f\"\ubcd1\ubaa9: {bottleneck.function_name} - {bottleneck.time_spent}\ucd08\")\n\n    await profiler.stop()\n\nasyncio.run(profile_application())\n</code></pre>"},{"location":"USER_GUIDE/#cloud-run","title":"Cloud Run \ucd5c\uc801\ud654","text":"<pre><code>from rfs.performance.optimization import get_cloud_run_optimizer\n\nasync def optimize_for_cloud_run():\n    optimizer = get_cloud_run_optimizer()\n\n    # \ud658\uacbd \ubd84\uc11d \ubc0f \ucd5c\uc801\ud654\n    recommendations = await optimizer.optimize()\n\n    print(\"\ucd94\ucc9c \uc124\uc815:\")\n    print(f\"- \ub3d9\uc2dc \uc2e4\ud589: {recommendations.value['concurrency']}\")\n    print(f\"- \uba54\ubaa8\ub9ac: {recommendations.value['memory']} MB\")\n    print(f\"- CPU: {recommendations.value['cpu']}\")\n\n    # \uc790\ub3d9 \uc2a4\ucf00\uc77c\ub9c1 \uc124\uc815\n    await optimizer.configure_autoscaling(\n        min_instances=1,\n        max_instances=100,\n        target_cpu_utilization=70\n    )\n\nasyncio.run(optimize_for_cloud_run())\n</code></pre>"},{"location":"USER_GUIDE/#2","title":"2. \ud504\ub85c\ub355\uc158 \uad00\ub9ac","text":""},{"location":"USER_GUIDE/#_8","title":"\uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1","text":"<pre><code>from rfs.production.monitoring import get_production_monitor, get_alert_manager\n\nasync def setup_monitoring():\n    monitor = get_production_monitor()\n    alert_manager = get_alert_manager()\n\n    await monitor.start()\n    await alert_manager.start()\n\n    # \uc54c\ub9bc \uaddc\uce59 \uc124\uc815\n    alert_manager.add_rule(\n        rule_id=\"high_cpu\",\n        name=\"CPU \uc0ac\uc6a9\ub7c9 \ub192\uc74c\",\n        condition=\"cpu_percent &gt; 80\",\n        level=\"WARNING\",\n        channels=[\"email\", \"slack\"]\n    )\n\n    alert_manager.add_rule(\n        rule_id=\"low_memory\",\n        name=\"\uba54\ubaa8\ub9ac \ubd80\uc871\",\n        condition=\"memory_available &lt; 100\",  # MB\n        level=\"CRITICAL\",\n        channels=[\"email\", \"slack\", \"pagerduty\"]\n    )\n\n    # \ubaa8\ub2c8\ud130\ub9c1 \uc2e4\ud589\n    while True:\n        metrics = monitor.get_current_metrics()\n\n        print(f\"CPU: {metrics['system']['cpu_percent']}%\")\n        print(f\"\uba54\ubaa8\ub9ac: {metrics['system']['memory_percent']}%\")\n        print(f\"\ub514\uc2a4\ud06c: {metrics['system']['disk_percent']}%\")\n\n        await asyncio.sleep(60)  # 1\ubd84\ub9c8\ub2e4 \ud655\uc778\n\nasyncio.run(setup_monitoring())\n</code></pre>"},{"location":"USER_GUIDE/#_9","title":"\ubc31\uc5c5 \ubc0f \ubcf5\uad6c","text":"<pre><code>from rfs.production.recovery import (\n    get_backup_manager,\n    BackupPolicy,\n    BackupTarget,\n    BackupType\n)\n\nasync def setup_backup_system():\n    backup_manager = get_backup_manager()\n    await backup_manager.start()\n\n    # \ubc31\uc5c5 \uc815\ucc45 \uc124\uc815\n    policy = BackupPolicy(\n        id=\"daily_backup\",\n        name=\"\uc77c\uc77c \ubc31\uc5c5\",\n        backup_type=BackupType.INCREMENTAL,\n        schedule=\"0 2 * * *\",  # \ub9e4\uc77c \uc0c8\ubcbd 2\uc2dc\n        retention_days=30\n    )\n\n    backup_manager.add_policy(policy)\n\n    # \ubc31\uc5c5 \ub300\uc0c1 \uc124\uc815\n    target = BackupTarget(\n        id=\"database\",\n        name=\"\ub370\uc774\ud130\ubca0\uc774\uc2a4\",\n        type=\"database\",\n        source_path=\"postgresql://localhost/mydb\"\n    )\n\n    backup_manager.add_target(target)\n\n    # \uc218\ub3d9 \ubc31\uc5c5 \uc2e4\ud589\n    backup_operation = await backup_manager.create_backup(\n        policy_id=\"daily_backup\",\n        target_id=\"database\",\n        manual=True\n    )\n\n    print(f\"\ubc31\uc5c5 \uc2dc\uc791: {backup_operation.value.id}\")\n\nasyncio.run(setup_backup_system())\n</code></pre>"},{"location":"USER_GUIDE/#3-api-gateway","title":"3. API Gateway \uad6c\uc131","text":"<pre><code>from rfs.integration import (\n    get_api_gateway,\n    Route,\n    Backend,\n    LoadBalanceStrategy\n)\n\nasync def setup_api_gateway():\n    gateway = get_api_gateway()\n    await gateway.start()\n\n    # \ubc31\uc5d4\ub4dc \uc11c\ubc84 \uc124\uc815\n    backends = [\n        Backend(\"server1\", \"10.0.1.10\", 8080, weight=2),\n        Backend(\"server2\", \"10.0.1.11\", 8080, weight=1),\n        Backend(\"server3\", \"10.0.1.12\", 8080, weight=1)\n    ]\n\n    # API \ub77c\uc6b0\ud2b8 \uc124\uc815\n    user_route = Route(\n        id=\"user_api\",\n        path=\"/api/v1/users\",\n        methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        backends=backends,\n        authentication=\"JWT\",\n        rate_limit={\n            \"requests_per_second\": 100,\n            \"burst_size\": 200\n        },\n        cache_config={\n            \"ttl\": 60,\n            \"key_pattern\": \"user_{id}\"\n        }\n    )\n\n    gateway.add_route(user_route)\n\n    # \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc804\ub7b5 \uc124\uc815\n    gateway.load_balancer.strategy = LoadBalanceStrategy.LEAST_CONNECTIONS\n\n    print(\"API Gateway\uac00 \uc2dc\uc791\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\nasyncio.run(setup_api_gateway())\n</code></pre>"},{"location":"USER_GUIDE/#4","title":"4. \ubd84\uc0b0 \uce90\uc2dc \uc0ac\uc6a9","text":"<pre><code>from rfs.integration import (\n    get_distributed_cache_manager,\n    CacheConfig,\n    CacheBackend,\n    EvictionPolicy\n)\n\nasync def use_distributed_cache():\n    # Redis \ubc31\uc5d4\ub4dc \uce90\uc2dc \uc124\uc815\n    config = CacheConfig(\n        backend=CacheBackend.REDIS,\n        eviction_policy=EvictionPolicy.LRU,\n        max_size=100000,\n        max_memory_mb=512,\n        default_ttl=3600\n    )\n\n    cache = get_distributed_cache_manager(config)\n    await cache.start()\n\n    # \ub370\uc774\ud130 \uce90\uc2f1\n    user_data = {\n        \"id\": \"123\",\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\"\n    }\n\n    await cache.set(\"user:123\", user_data, ttl=1800)\n\n    # \uce90\uc2dc \uc870\ud68c\n    result = await cache.get(\"user:123\")\n    if result.value:\n        print(f\"\uce90\uc2dc\uc5d0\uc11c \uc870\ud68c: {result.value}\")\n\n    # \uce90\uc2dc \ud30c\ud2f0\uc158 \uc0ac\uc6a9\n    cache.create_partition(\n        \"session_cache\",\n        \"\uc138\uc158 \uce90\uc2dc\",\n        CacheConfig(\n            backend=CacheBackend.MEMORY,\n            max_size=1000,\n            default_ttl=900  # 15\ubd84\n        )\n    )\n\n    # \uc138\uc158 \ub370\uc774\ud130 \uc800\uc7a5\n    await cache.set(\n        \"session:abc123\",\n        {\"user_id\": \"123\", \"login_time\": \"2025-01-01T10:00:00\"},\n        partition_id=\"session_cache\"\n    )\n\nasyncio.run(use_distributed_cache())\n</code></pre>"},{"location":"USER_GUIDE/#_10","title":"\uace0\uae09 \uae30\ub2a5","text":""},{"location":"USER_GUIDE/#_11","title":"\ud1b5\ud569 \uc6cc\ud06c\ud50c\ub85c\uc6b0","text":"<pre><code>import asyncio\nfrom rfs.performance import get_system_profiler, get_cloud_run_optimizer\nfrom rfs.production import get_production_monitor, get_alert_manager\nfrom rfs.integration import get_api_gateway, get_distributed_cache_manager\n\nasync def integrated_application():\n    # 1. \ud504\ub85c\ud30c\uc77c\ub9c1 \uc2dc\uc791\n    profiler = get_system_profiler()\n    await profiler.start()\n\n    # 2. \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791\n    monitor = get_production_monitor()\n    alert_manager = get_alert_manager()\n    await monitor.start()\n    await alert_manager.start()\n\n    # 3. \uce90\uc2dc \ucd08\uae30\ud654\n    cache = get_distributed_cache_manager()\n    await cache.start()\n\n    # 4. API Gateway \uc2dc\uc791\n    gateway = get_api_gateway()\n    await gateway.start()\n\n    # 5. \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub85c\uc9c1\n    async def handle_request(request):\n        # \uce90\uc2dc \ud655\uc778\n        cached = await cache.get(f\"request:{request.id}\")\n        if cached.value:\n            return cached.value\n\n        # \ud504\ub85c\ud30c\uc77c\ub9c1\n        await profiler.start_profile(f\"request_{request.id}\")\n\n        # \uc2e4\uc81c \ucc98\ub9ac\n        result = await process_request(request)\n\n        # \ud504\ub85c\ud30c\uc77c \uc885\ub8cc\n        profile = await profiler.stop_profile(f\"request_{request.id}\")\n\n        # \uc131\ub2a5\uc774 \ub098\uc058\uba74 \uc54c\ub9bc\n        if profile.value.duration &gt; 1.0:  # 1\ucd08 \uc774\uc0c1\n            await alert_manager.create_alert(\n                rule_id=\"slow_request\",\n                title=\"\ub290\ub9b0 \uc694\uccad \uac10\uc9c0\",\n                message=f\"\uc694\uccad {request.id}\uac00 {profile.value.duration}\ucd08 \uac78\ub9bc\"\n            )\n\n        # \uacb0\uacfc \uce90\uc2f1\n        await cache.set(f\"request:{request.id}\", result, ttl=300)\n\n        return result\n\n    # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2e4\ud589\n    while True:\n        # \uc694\uccad \ucc98\ub9ac\n        request = await get_next_request()\n        result = await handle_request(request)\n        await send_response(result)\n\nasyncio.run(integrated_application())\n</code></pre>"},{"location":"USER_GUIDE/#_12","title":"\ubaa8\ubc94 \uc0ac\ub840","text":""},{"location":"USER_GUIDE/#1_1","title":"1. \uc5d0\ub7ec \ucc98\ub9ac","text":"<pre><code>from rfs.core import Success, Failure\n\nasync def safe_operation():\n    result = await some_api_call()\n\n    if isinstance(result, Success):\n        # \uc131\uacf5 \ucc98\ub9ac\n        data = result.value\n        return process_data(data)\n    else:\n        # \uc2e4\ud328 \ucc98\ub9ac\n        error = result.error\n        logger.error(f\"\uc791\uc5c5 \uc2e4\ud328: {error}\")\n\n        # \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\n        for attempt in range(3):\n            retry_result = await some_api_call()\n            if isinstance(retry_result, Success):\n                return retry_result.value\n            await asyncio.sleep(2 ** attempt)  # \uc9c0\uc218 \ubc31\uc624\ud504\n\n        # \ubaa8\ub4e0 \uc7ac\uc2dc\ub3c4 \uc2e4\ud328\n        return None\n</code></pre>"},{"location":"USER_GUIDE/#2_1","title":"2. \ub9ac\uc18c\uc2a4 \uc815\ub9ac","text":"<pre><code>async def managed_resources():\n    monitor = get_production_monitor()\n    cache = get_distributed_cache_manager()\n\n    try:\n        # \ub9ac\uc18c\uc2a4 \ucd08\uae30\ud654\n        await monitor.start()\n        await cache.start()\n\n        # \uc791\uc5c5 \uc218\ud589\n        await do_work()\n\n    finally:\n        # \ud56d\uc0c1 \uc815\ub9ac\n        await monitor.stop()\n        await cache.stop()\n</code></pre>"},{"location":"USER_GUIDE/#3","title":"3. \uc131\ub2a5 \ucd5c\uc801\ud654 \ud301","text":"<ol> <li>\uce90\uc2f1 \uc801\uadf9 \ud65c\uc6a9: \uc790\uc8fc \uc811\uadfc\ud558\ub294 \ub370\uc774\ud130\ub294 \ud56d\uc0c1 \uce90\uc2dc</li> <li>\ube44\ub3d9\uae30 \ucc98\ub9ac: I/O \uc791\uc5c5\uc740 \ud56d\uc0c1 \ube44\ub3d9\uae30\ub85c \ucc98\ub9ac</li> <li>\ubc30\uce58 \ucc98\ub9ac: \uac00\ub2a5\ud55c \uacbd\uc6b0 \uc694\uccad\uc744 \ubc30\uce58\ub85c \ucc98\ub9ac</li> <li>\uc5f0\uacb0 \ud480\ub9c1: \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc678\ubd80 \uc11c\ube44\uc2a4 \uc5f0\uacb0\uc740 \ud480\ub9c1 \uc0ac\uc6a9</li> <li>\ud504\ub85c\ud30c\uc77c\ub9c1: \uc815\uae30\uc801\uc73c\ub85c \ud504\ub85c\ud30c\uc77c\ub9c1\ud558\uc5ec \ubcd1\ubaa9 \ud604\uc0c1 \ud30c\uc545</li> </ol>"},{"location":"USER_GUIDE/#4_1","title":"4. \ud504\ub85c\ub355\uc158 \uccb4\ud06c\ub9ac\uc2a4\ud2b8","text":"<ul> <li> \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815 \uc644\ub8cc</li> <li> \uc54c\ub9bc \uaddc\uce59 \uad6c\uc131</li> <li> \ubc31\uc5c5 \uc815\ucc45 \uc124\uc815</li> <li> \uc7ac\ud574 \ubcf5\uad6c \uacc4\ud68d \uc218\ub9bd</li> <li> \ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4 \uac80\uc99d</li> <li> API \uc18d\ub3c4 \uc81c\ud55c \uc124\uc815</li> <li> \uce90\uc2dc \uc804\ub7b5 \uc218\ub9bd</li> <li> \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uad6c\uc131</li> <li> \ud5ec\uc2a4 \uccb4\ud06c \uc124\uc815</li> <li> \ub85c\uae45 \uad6c\uc131</li> </ul>"},{"location":"USER_GUIDE/#_13","title":"\ubb38\uc81c \ud574\uacb0","text":""},{"location":"USER_GUIDE/#_14","title":"\uc77c\ubc18\uc801\uc778 \ubb38\uc81c","text":""},{"location":"USER_GUIDE/#1_2","title":"1. \ub192\uc740 \uba54\ubaa8\ub9ac \uc0ac\uc6a9","text":"<pre><code>from rfs.performance.optimization import get_memory_optimizer\n\nasync def fix_memory_issues():\n    optimizer = get_memory_optimizer()\n\n    # \uba54\ubaa8\ub9ac \ubd84\uc11d\n    analysis = await optimizer.analyze()\n\n    # \uc790\ub3d9 \ucd5c\uc801\ud654\n    await optimizer.optimize(strategy=\"AGGRESSIVE\")\n\n    # \uac00\ube44\uc9c0 \uceec\ub809\uc158 \uac15\uc81c\n    await optimizer.force_garbage_collection()\n</code></pre>"},{"location":"USER_GUIDE/#2-api","title":"2. \ub290\ub9b0 API \uc751\ub2f5","text":"<pre><code># 1. \ud504\ub85c\ud30c\uc77c\ub9c1\uc73c\ub85c \ubcd1\ubaa9 \ud655\uc778\nprofile = await profiler.profile_endpoint(\"/api/slow\")\n\n# 2. \uce90\uc2dc \ucd94\uac00\nawait cache.set(cache_key, response_data, ttl=300)\n\n# 3. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \ucd5c\uc801\ud654\n# 4. \ube44\ub3d9\uae30 \ucc98\ub9ac \ucd94\uac00\n</code></pre>"},{"location":"USER_GUIDE/#3_1","title":"3. \uce90\uc2dc \ubbf8\uc2a4\uc728 \ub192\uc74c","text":"<pre><code># \uce90\uc2dc \ud1b5\uacc4 \ud655\uc778\nstats = cache.get_statistics()\nprint(f\"\ud788\ud2b8\uc728: {stats.hit_ratio}%\")\n\n# \uce90\uc2dc \uc6cc\ubc0d\nawait cache.add_warmup_task(\n    task_id=\"popular_data\",\n    loader=load_popular_data,\n    keys=popular_keys,\n    schedule=\"startup\"\n)\n</code></pre>"},{"location":"USER_GUIDE/#_15","title":"\ucd94\uac00 \ub9ac\uc18c\uc2a4","text":"<ul> <li>API \ub808\ud37c\ub7f0\uc2a4</li> <li>\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uac00\uc774\ub4dc</li> <li>\ubcc0\uacbd \ub85c\uadf8</li> <li>GitHub \uc800\uc7a5\uc18c</li> </ul>"},{"location":"USER_GUIDE/#_16","title":"\uc9c0\uc6d0","text":"<p>\ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uac70\ub098 \ub3c4\uc6c0\uc774 \ud544\uc694\ud55c \uacbd\uc6b0:</p> <ol> <li>\uc774\uc288 \ud2b8\ub798\ucee4\uc5d0 \ubb38\uc81c \uc81c\ucd9c</li> <li>\ud1a0\ub860 \ud3ec\ub7fc \ucc38\uc5ec</li> <li>\uacf5\uc2dd \ubb38\uc11c \ud655\uc778</li> </ol>"},{"location":"USER_GUIDE/#_17","title":"\ub77c\uc774\uc120\uc2a4","text":"<p>RFS Framework\ub294 MIT \ub77c\uc774\uc120\uc2a4 \ud558\uc5d0 \ubc30\ud3ec\ub429\ub2c8\ub2e4.</p>"},{"location":"changelog/","title":"\ubcc0\uacbd \uc774\ub825","text":"<p>RFS Framework\uc758 \ubaa8\ub4e0 \uc8fc\uc694 \ubcc0\uacbd\uc0ac\ud56d\uc774 \uc774 \ud30c\uc77c\uc5d0 \uae30\ub85d\ub429\ub2c8\ub2e4.</p> <p>\uc774 \ud615\uc2dd\uc740 Keep a Changelog\uc744 \uae30\ubc18\uc73c\ub85c \ud558\uba70, \uc774 \ud504\ub85c\uc81d\ud2b8\ub294 Semantic Versioning\uc744 \uc900\uc218\ud569\ub2c8\ub2e4.</p>"},{"location":"changelog/#403-2025-08-23","title":"[4.0.3] - 2025-08-23","text":""},{"location":"changelog/#-api","title":"\ud83d\ude80 \uc8fc\uc694 \uae30\ub2a5 \uc644\uc131 \uc5c5\ub370\uc774\ud2b8 - \"\uc644\uc804\ud55c API \uad6c\ud604\"","text":"<p>\ubb38\uc11c\uc5d0\ub9cc \uc788\ub358 \ubaa8\ub4e0 \ubbf8\uad6c\ud604 \uae30\ub2a5\ub4e4\uc744 \uc644\uc804\ud788 \uad6c\ud604\ud558\uc5ec, \ubb38\uc11c\uc640 \uc2e4\uc81c \uad6c\ud604 \uac04\uc758 \uaca9\ucc28\ub97c 100% \ud574\uacb0\ud588\uc2b5\ub2c8\ub2e4.</p>"},{"location":"changelog/#_2","title":"\u2728 \uc0c8\ub85c\uc6b4 \uae30\ub2a5","text":""},{"location":"changelog/#advanced-reactive-operators","title":"\ud83d\udd04 Advanced Reactive Operators","text":"<ul> <li><code>Flux.parallel(parallelism)</code>: \uba40\ud2f0\uc2a4\ub808\ub4dc \ubcd1\ub82c \ucc98\ub9ac \uc9c0\uc6d0</li> <li><code>Flux.window(size|duration)</code>: \uc2dc\uac04/\ud06c\uae30 \uae30\ubc18 \uc708\ub3c4\uc6b0 \ucc98\ub9ac</li> <li><code>Flux.throttle(elements, duration)</code>: \uc694\uccad \uc18d\ub3c4 \uc81c\ud55c (\uc2a4\ub85c\ud2c0\ub9c1)</li> <li><code>Flux.sample(duration)</code>: \uc8fc\uae30\uc801 \uc0d8\ud50c\ub9c1\uc73c\ub85c \ucd5c\uc2e0 \uac12\ub9cc \uc120\ud0dd</li> <li><code>Flux.on_error_continue()</code>: \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \uc2a4\ud2b8\ub9bc \uc911\ub2e8 \uc5c6\uc774 \uacc4\uc18d \uc9c4\ud589</li> <li><code>Flux.merge_with(*others)</code>: \uc5ec\ub7ec Flux\ub97c \ubcd1\ud569\ud558\uc5ec \ub3d9\uc2dc \ubc29\ucd9c</li> <li><code>Flux.concat_with(*others)</code>: \uc5ec\ub7ec Flux\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uc5f0\uacb0</li> <li><code>Flux.retry(max_attempts)</code>: \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \uc790\ub3d9 \uc7ac\uc2dc\ub3c4</li> <li><code>Mono.cache()</code>: \uacb0\uacfc\ub97c \uce90\uc2f1\ud558\uc5ec \uc7ac\uc0ac\uc6a9</li> <li><code>Mono.on_error_map(mapper)</code>: \uc5d0\ub7ec\ub97c \ub2e4\ub978 \uc5d0\ub7ec\ub85c \ubcc0\ud658</li> </ul>"},{"location":"changelog/#production-deployment-system","title":"\ud83d\udea2 Production Deployment System","text":"<p>\uc644\uc804\ud788 \uc0c8\ub85c\uc6b4 \ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uc2dc\uc2a4\ud15c \uad6c\ud604:</p> <ul> <li><code>ProductionDeployer</code>: \ub2e4\uc591\ud55c \ubc30\ud3ec \uc804\ub7b5\uc744 \uc9c0\uc6d0\ud558\ub294 \ubc30\ud3ec \uad00\ub9ac\uc790</li> <li>Blue-Green \ubc30\ud3ec: \ubb34\uc911\ub2e8 \ubc30\ud3ec</li> <li>Canary \ubc30\ud3ec: \uc810\uc9c4\uc801 \ud2b8\ub798\ud53d \uc99d\uac00</li> <li>Rolling \ubc30\ud3ec: \uc778\uc2a4\ud134\uc2a4\ubcc4 \uc21c\ucc28 \uc5c5\ub370\uc774\ud2b8</li> <li>Recreate \ubc30\ud3ec: \uc804\uccb4 \uc7ac\uc2dc\uc791 \ubc30\ud3ec</li> <li> <p>A/B Testing \ubc30\ud3ec: \uc0ac\uc6a9\uc790 \uadf8\ub8f9\ubcc4 \ud14c\uc2a4\ud2b8</p> </li> <li> <p><code>RollbackManager</code>: \uc790\ub3d9 \ub864\ubc31 \ubc0f \ubcf5\uad6c \uc2dc\uc2a4\ud15c</p> </li> <li>\ubc30\ud3ec \uc804 \uc2a4\ub0c5\uc0f7 \uc0dd\uc131</li> <li>\uc2e4\ud328 \uc2dc \uc790\ub3d9 \ub864\ubc31</li> <li>\ub864\ubc31 \uc774\ub825 \uad00\ub9ac</li> <li> <p>\ub2e4\uc591\ud55c \ub864\ubc31 \uc804\ub7b5 \uc9c0\uc6d0</p> </li> <li> <p>\ubc30\ud3ec \ud5ec\ud37c \ud568\uc218\ub4e4:</p> </li> <li><code>deploy_to_production()</code>: \uac04\ud3b8\ud55c \ubc30\ud3ec \uc2e4\ud589</li> <li><code>rollback_deployment()</code>: \uc6d0\ud074\ub9ad \ub864\ubc31</li> <li><code>get_production_deployer()</code>: \uae00\ub85c\ubc8c \ubc30\ud3ec\uc790 \uc778\uc2a4\ud134\uc2a4</li> </ul>"},{"location":"changelog/#security-hardening-system","title":"\ud83d\udd12 Security Hardening System","text":"<p>\ud3ec\uad04\uc801\uc778 \ubcf4\uc548 \uac15\ud654 \uc2dc\uc2a4\ud15c \uc2e0\uaddc \uad6c\ud604:</p> <ul> <li><code>SecurityHardening</code>: \uc815\ucc45 \uae30\ubc18 \ubcf4\uc548 \uac15\ud654 \uc5d4\uc9c4</li> <li>4\ub2e8\uacc4 \ubcf4\uc548 \uc218\uc900 (Basic, Standard, High, Critical)</li> <li>100+ \ubcf4\uc548 \uac80\uc0ac \ud56d\ubaa9</li> <li>\uc790\ub3d9 \ubcf4\uc548 \uc870\uce58 \uc801\uc6a9</li> <li> <p>\uc2e4\uc2dc\uac04 \ubcf4\uc548 \uc810\uc218 \uacc4\uc0b0</p> </li> <li> <p><code>SecurityPolicy</code>: \uc0c1\uc138\ud55c \ubcf4\uc548 \uc815\ucc45 \uc815\uc758</p> </li> <li>\ube44\ubc00\ubc88\ud638 \uc815\ucc45 (\uae38\uc774, \ubcf5\uc7a1\ub3c4, \ub9cc\ub8cc)</li> <li>\uc138\uc158 \uad00\ub9ac (\ud0c0\uc784\uc544\uc6c3, \ub3d9\uc2dc \uc138\uc158 \uc81c\ud55c)</li> <li>\uc554\ud638\ud654 \uc124\uc815 (\uc54c\uace0\ub9ac\uc998, \ud0a4 \ub85c\ud14c\uc774\uc158)</li> <li> <p>API \ubcf4\uc548 (HTTPS \uac15\uc81c, \uc18d\ub3c4 \uc81c\ud55c)</p> </li> <li> <p>\ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4 \uc9c0\uc6d0:</p> </li> <li>PCI DSS: \uce74\ub4dc \uacb0\uc81c \ubcf4\uc548 \ud45c\uc900</li> <li>GDPR: \uac1c\uc778\uc815\ubcf4\ubcf4\ud638 \uaddc\uc815</li> <li>HIPAA: \uc758\ub8cc\uc815\ubcf4\ubcf4\ud638\ubc95</li> <li> <p>SOC2: \uc2dc\uc2a4\ud15c \ubc0f \uc870\uc9c1 \uc81c\uc5b4</p> </li> <li> <p>\ube44\ubc00\ubc88\ud638 \ubcf4\uc548 \ub3c4\uad6c:</p> </li> <li><code>validate_password()</code>: \uc815\ucc45 \uae30\ubc18 \ube44\ubc00\ubc88\ud638 \uac80\uc99d</li> <li><code>generate_secure_token()</code>: \uc554\ud638\ud559\uc801 \uc548\uc804\ud55c \ud1a0\ud070 \uc0dd\uc131</li> <li><code>hash_password()</code>: PBKDF2 \uae30\ubc18 \ud574\uc2f1</li> <li><code>verify_password()</code>: \uc548\uc804\ud55c \ube44\ubc00\ubc88\ud638 \uac80\uc99d</li> </ul>"},{"location":"changelog/#cloud-native-helper-functions","title":"\u2601\ufe0f Cloud Native Helper Functions","text":"<p>\uc644\uc804\ud55c Cloud Native \ud5ec\ud37c \ud568\uc218 \uc2dc\uc2a4\ud15c:</p> <ul> <li>Service Discovery: </li> <li><code>get_service_discovery()</code>: \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \uc778\uc2a4\ud134\uc2a4</li> <li><code>discover_services()</code>: \ud328\ud134 \uae30\ubc18 \uc11c\ube44\uc2a4 \uac80\uc0c9</li> <li> <p><code>call_service()</code>: \uc11c\ube44\uc2a4 \uac04 \uc548\uc804\ud55c \ud1b5\uc2e0</p> </li> <li> <p>Task Queue:</p> </li> <li><code>get_task_queue()</code>: Cloud Tasks \ud050 \uc778\uc2a4\ud134\uc2a4</li> <li><code>submit_task()</code>: \uc989\uc2dc \uc2e4\ud589 \uc791\uc5c5 \uc81c\ucd9c</li> <li> <p><code>schedule_task()</code>: \uc9c0\uc5f0 \uc2e4\ud589 \uc791\uc5c5 \uc2a4\ucf00\uc904\ub9c1</p> </li> <li> <p>Monitoring:</p> </li> <li><code>record_metric()</code>: \uba54\ud2b8\ub9ad \uae30\ub85d</li> <li><code>log_info/warning/error()</code>: \uad6c\uc870\ud654\ub41c \ub85c\uae45</li> <li> <p><code>monitor_performance()</code>: \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1 \ub370\ucf54\ub808\uc774\ud130</p> </li> <li> <p>Auto Scaling:</p> </li> <li><code>get_autoscaling_optimizer()</code>: \uc624\ud1a0\uc2a4\ucf00\uc77c\ub9c1 \ucd5c\uc801\ud654\uae30</li> <li><code>optimize_scaling()</code>: \uc2a4\ucf00\uc77c\ub9c1 \ucd5c\uc801\ud654 \uc2e4\ud589</li> <li><code>get_scaling_stats()</code>: \uc2a4\ucf00\uc77c\ub9c1 \ud1b5\uacc4 \uc870\ud68c</li> </ul>"},{"location":"changelog/#core-helper-functions","title":"\ud83d\udd27 Core Helper Functions","text":"<p>\ub204\ub77d\ub41c \ud575\uc2ec \ud5ec\ud37c \ud568\uc218\ub4e4 \uad6c\ud604:</p> <ul> <li>Configuration:</li> <li><code>get_config()</code>: \uae00\ub85c\ubc8c \uc124\uc815 \uc778\uc2a4\ud134\uc2a4</li> <li> <p><code>get()</code>: \uac04\ud3b8\ud55c \uc124\uc815\uac12 \uc870\ud68c</p> </li> <li> <p>Events:</p> </li> <li><code>get_event_bus()</code>: \uae00\ub85c\ubc8c \uc774\ubca4\ud2b8 \ubc84\uc2a4</li> <li><code>create_event()</code>: \uc774\ubca4\ud2b8 \uc0dd\uc131</li> <li> <p><code>publish_event()</code>: \uc774\ubca4\ud2b8 \ubc1c\ud589</p> </li> <li> <p>Logging:</p> </li> <li><code>setup_logging()</code>: \ub85c\uae45 \uc2dc\uc2a4\ud15c \ucd08\uae30\ud654</li> <li> <p>\ud45c\uc900 \ub85c\uae45 \ud568\uc218\ub4e4 (log_info, log_warning, log_error, log_debug)</p> </li> <li> <p>Performance:</p> </li> <li><code>monitor_performance()</code>: \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1</li> <li><code>record_metric()</code>: \uba54\ud2b8\ub9ad \uae30\ub85d</li> </ul>"},{"location":"changelog/#_3","title":"\ud83d\udd27 \uac1c\uc120\uc0ac\ud56d","text":""},{"location":"changelog/#_4","title":"\ud83d\udce6 \ud328\ud0a4\uc9c0 \uc815\ub9ac","text":"<ul> <li>\ud328\ud0a4\uc9c0\uba85 \ud45c\uc900\ud654: <code>rfs-v4</code> \u2192 <code>rfs-framework</code>\uc73c\ub85c \uc77c\uad00\uc131 \uc788\uac8c \ubcc0\uacbd</li> <li>Import \uacbd\ub85c \uc218\uc815: \ubaa8\ub4e0 \ubb38\uc11c\uc640 \uc608\uc81c\uc5d0\uc11c \uc62c\ubc14\ub978 import \uacbd\ub85c \uc0ac\uc6a9</li> <li>Export \uc815\ub9ac: \ubaa8\ub4e0 \uc0c8\ub85c\uc6b4 API\ub4e4\uc774 <code>from rfs import ...</code>\ub85c \uc0ac\uc6a9 \uac00\ub2a5</li> </ul>"},{"location":"changelog/#_5","title":"\ud83d\udcda \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8","text":"<ul> <li>README.md: \uc0c8\ub85c\uc6b4 \uae30\ub2a5\ub4e4\uc758 \uc0ac\uc6a9 \uc608\uc81c \ucd94\uac00</li> <li>API_REFERENCE.md: \uc644\uc804\ud55c API \ubb38\uc11c\ub85c \uc5c5\ub370\uc774\ud2b8 (v4.0.3 \uc2e0\uaddc API \ud3ec\ud568)</li> <li>\uc608\uc81c \ud30c\uc77c\ub4e4: </li> <li><code>reactive_streams_example.py</code>: \uace0\uae09 Reactive Streams \uc5f0\uc0b0\uc790 \uc608\uc81c</li> <li><code>production_deployment_example.py</code>: \ubc30\ud3ec \uc2dc\uc2a4\ud15c \uc644\uc804 \uc608\uc81c</li> <li><code>security_hardening_example.py</code>: \ubcf4\uc548 \uac15\ud654 \uc2dc\uc2a4\ud15c \uc608\uc81c</li> <li><code>e_commerce_example.py</code>: \uae30\uc874 \uc608\uc81c\uc5d0 \uc2e0\uaddc \uae30\ub2a5 \ucd94\uac00</li> </ul>"},{"location":"changelog/#_6","title":"\ud83e\uddea \ud14c\uc2a4\ud2b8 \uac1c\uc120","text":"<ul> <li>Reactive Streams \ud14c\uc2a4\ud2b8 \uba54\uc11c\ub4dc\uba85 \uc218\uc815</li> <li>\uc0c8\ub85c\uc6b4 API\ub4e4\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ucd94\uac00 \uc900\ube44</li> </ul>"},{"location":"changelog/#_7","title":"\ud83d\udcca \uad6c\ud604 \ud1b5\uacc4","text":""},{"location":"changelog/#v402","title":"\uc774\uc804 (v4.0.2)","text":"<ul> <li>\ubb38\uc11c\ud654\ub41c \uae30\ub2a5 \uc911 \uad6c\ud604\ub960: ~65%</li> <li>\ub204\ub77d\ub41c \uc8fc\uc694 API: 35\uac1c \uc774\uc0c1</li> <li>Import \uc5d0\ub7ec: \ub2e4\uc218 \ubc1c\uc0dd</li> </ul>"},{"location":"changelog/#v403","title":"\ud604\uc7ac (v4.0.3)","text":"<ul> <li>\ubb38\uc11c\ud654\ub41c \uae30\ub2a5 \uc911 \uad6c\ud604\ub960: 100% \u2705</li> <li>\ub204\ub77d\ub41c \uc8fc\uc694 API: 0\uac1c \u2705</li> <li>Import \uc5d0\ub7ec: \uc644\uc804 \ud574\uacb0 \u2705</li> <li>\uc0c8\ub85c \uad6c\ud604\ub41c \ud074\ub798\uc2a4/\ud568\uc218: 50\uac1c \uc774\uc0c1</li> <li>\uc0c8\ub85c \ucd94\uac00\ub41c \uc608\uc81c: 3\uac1c \ud30c\uc77c, 15\uac1c \uc774\uc0c1 \ud568\uc218</li> </ul>"},{"location":"changelog/#breaking-changes","title":"\ud83c\udfaf Breaking Changes","text":"<p>\uc5c6\uc74c - \ubaa8\ub4e0 \ubcc0\uacbd\uc0ac\ud56d\uc740 \ud558\uc704 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud569\ub2c8\ub2e4.</p>"},{"location":"changelog/#_8","title":"\ud83d\udcc8 \uc131\ub2a5 \uac1c\uc120","text":"<ul> <li>Reactive Streams: parallel() \uc5f0\uc0b0\uc790\ub85c \uba40\ud2f0\uc2a4\ub808\ub4dc \uc131\ub2a5 \ud5a5\uc0c1</li> <li>Production Deployment: \ubc30\ud3ec \uc2dc\uac04 \ub2e8\ucd95 \ubc0f \uc548\uc815\uc131 \ud5a5\uc0c1</li> <li>Security: \ud6a8\uc728\uc801\uc778 \ubcf4\uc548 \uac80\uc0ac \ubc0f \ube60\ub978 \uc751\ub2f5 \uc2dc\uac04</li> </ul>"},{"location":"changelog/#402-2025-08-23","title":"[4.0.2] - 2025-08-23","text":""},{"location":"changelog/#_9","title":"\ud83d\udd27 \ud328\ud0a4\uc9c0 \uad00\ub9ac \uac1c\uc120","text":"<ul> <li>PyPI \ud328\ud0a4\uc9c0\uba85\uc744 <code>rfs-v4</code>\uc5d0\uc11c <code>rfs-framework</code>\ub85c \ubcc0\uacbd</li> <li>\ud328\ud0a4\uc9c0 \ucda9\ub3cc \ubb38\uc81c \ud574\uacb0</li> </ul>"},{"location":"changelog/#400-2025-08-23","title":"[4.0.0] - 2025-08-23","text":""},{"location":"changelog/#-","title":"\ud83c\udf89 \uc815\uc2dd \ub9b4\ub9ac\uc2a4 - \"\uc5d4\ud130\ud504\ub77c\uc774\uc988 \ud504\ub85c\ub355\uc158 \uc900\ube44\"","text":"<p>RFS Framework\uc758 \uccab \ubc88\uc9f8 \uba54\uc774\uc800 \ub9b4\ub9ac\uc2a4\uc785\ub2c8\ub2e4. \ud604\ub300\uc801\uc778 \uc5d4\ud130\ud504\ub77c\uc774\uc988\uae09 Python \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud55c \uc885\ud569\uc801\uc778 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"changelog/#_10","title":"\u2728 \uc8fc\uc694 \ucd94\uac00 \uae30\ub2a5","text":""},{"location":"changelog/#_11","title":"\ud83d\udd27 \ud575\uc2ec \ud504\ub808\uc784\uc6cc\ud06c","text":"<ul> <li>Result Pattern: \ud568\uc218\ud615 \uc5d0\ub7ec \ud578\ub4e4\ub9c1\uacfc \uc131\uacf5/\uc2e4\ud328 \ubaa8\ub098\ub4dc \ud328\ud134</li> <li><code>Result[T, E]</code> \ud0c0\uc785\uc73c\ub85c \uc548\uc804\ud55c \uc5d0\ub7ec \ucc98\ub9ac</li> <li><code>success()</code>, <code>failure()</code>, <code>is_success()</code>, <code>is_failure()</code> \uba54\uc11c\ub4dc</li> <li> <p>\uccb4\uc774\ub2dd \uac00\ub2a5\ud55c <code>map()</code>, <code>flat_map()</code>, <code>match()</code> \uc5f0\uc0b0\uc790</p> </li> <li> <p>Configuration Management: \ud658\uacbd\ubcc4 \uc124\uc815\uacfc \uac80\uc99d \uc2dc\uc2a4\ud15c</p> </li> <li>TOML \uae30\ubc18 \uc124\uc815 \ud30c\uc77c \uc9c0\uc6d0</li> <li>\ud658\uacbd \ubcc0\uc218 \uc790\ub3d9 \ub9e4\ud551</li> <li>\uc124\uc815 \ud504\ub85c\ud30c\uc77c (development, staging, production)</li> <li> <p>Pydantic \uae30\ubc18 \uc124\uc815 \uac80\uc99d</p> </li> <li> <p>Registry Pattern: \uc758\uc874\uc131 \uc8fc\uc785\uacfc \uc11c\ube44\uc2a4 \ub4f1\ub85d</p> </li> <li>\ud0c0\uc785 \uc548\uc804\ud55c \uc11c\ube44\uc2a4 \ub4f1\ub85d \ubc0f \uc870\ud68c</li> <li>\uc2f1\uae00\ud1a4 \ubc0f \ud329\ud1a0\ub9ac \ud328\ud134 \uc9c0\uc6d0</li> <li> <p>\uc21c\ud658 \uc758\uc874\uc131 \ud0d0\uc9c0 \ubc0f \ud574\uacb0</p> </li> <li> <p>Singleton Pattern: \uc2a4\ub808\ub4dc \uc548\uc804\ud55c \uc2f1\uae00\ud1a4 \uad6c\ud604</p> </li> <li>\uba54\ud0c0\ud074\ub798\uc2a4 \uae30\ubc18 \uad6c\ud604</li> <li>\uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc548\uc804\ud55c \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131</li> </ul>"},{"location":"changelog/#reactive-programming-phase-1-foundation","title":"\u26a1 Reactive Programming (Phase 1: Foundation)","text":"<ul> <li>Mono: \ub2e8\uc77c \uac12 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc</li> <li><code>just()</code>, <code>empty()</code>, <code>error()</code> \ud329\ud1a0\ub9ac \uba54\uc11c\ub4dc</li> <li><code>map()</code>, <code>filter()</code>, <code>flat_map()</code> \ubcc0\ud658 \uc5f0\uc0b0\uc790</li> <li> <p><code>cache()</code>, <code>retry()</code>, <code>timeout()</code> \uc720\ud2f8\ub9ac\ud2f0 \uc5f0\uc0b0\uc790</p> </li> <li> <p>Flux: \ub2e4\uc911 \uac12 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc</p> </li> <li><code>from_iterable()</code>, <code>range()</code>, <code>interval()</code> \uc0dd\uc131 \uc5f0\uc0b0\uc790</li> <li><code>merge()</code>, <code>zip()</code>, <code>concat()</code> \uc870\ud569 \uc5f0\uc0b0\uc790</li> <li> <p><code>buffer()</code>, <code>window()</code>, <code>group_by()</code> \ubd84\ud560 \uc5f0\uc0b0\uc790</p> </li> <li> <p>Schedulers: \ube44\ub3d9\uae30 \uc2e4\ud589 \ucee8\ud14d\uc2a4\ud2b8</p> </li> <li><code>ThreadPoolScheduler</code>: \uc2a4\ub808\ub4dc \ud480 \uae30\ubc18 \uc2e4\ud589</li> <li><code>AsyncIOScheduler</code>: AsyncIO \uc774\ubca4\ud2b8 \ub8e8\ud504 \uc2e4\ud589</li> <li>\ucee4\uc2a4\ud140 \uc2a4\ucf00\uc904\ub7ec \uc9c0\uc6d0</li> </ul>"},{"location":"changelog/#state-management-phase-2-advanced-patterns","title":"\ud83c\udfad State Management (Phase 2: Advanced Patterns)","text":"<ul> <li>Functional State Machine: \uc21c\uc218 \ud568\uc218 \uae30\ubc18 \uc0c1\ud0dc \uad00\ub9ac</li> <li>\ubd88\ubcc0 \uc0c1\ud0dc \uac1d\uccb4</li> <li>\ud568\uc218\ud615 \uc0c1\ud0dc \uc804\ud658</li> <li> <p>\uc0c1\ud0dc \ud788\uc2a4\ud1a0\ub9ac \ucd94\uc801</p> </li> <li> <p>Action System: \ud0c0\uc785 \uc548\uc804\ud55c \uc561\uc158 \ub514\uc2a4\ud328\uce58</p> </li> <li>\uc561\uc158 \ud0c0\uc785 \uc815\uc758 \ubc0f \uac80\uc99d</li> <li>\ube44\ub3d9\uae30 \uc561\uc158 \ud578\ub4e4\ub7ec</li> <li> <p>\uc561\uc158 \ubbf8\ub4e4\uc6e8\uc5b4 \uccb4\uc778</p> </li> <li> <p>Persistence: \uc0c1\ud0dc \uc601\uc18d\ud654 \ubc0f \ubcf5\uc6d0</p> </li> <li>JSON \uae30\ubc18 \uc0c1\ud0dc \uc9c1\ub82c\ud654</li> <li>\uc2a4\ub0c5\uc0f7 \ubc0f \ubcf5\uc6d0 \uae30\ub2a5</li> <li>\uc0c1\ud0dc \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc9c0\uc6d0</li> </ul>"},{"location":"changelog/#event-driven-architecture-phase-2-advanced-patterns","title":"\ud83d\udce1 Event-Driven Architecture (Phase 2: Advanced Patterns)","text":"<ul> <li>Event Store: \uc774\ubca4\ud2b8 \uc18c\uc2f1 \ud328\ud134 \uad6c\ud604</li> <li>\uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc \uc800\uc7a5 \ubc0f \uc870\ud68c</li> <li>\uc774\ubca4\ud2b8 \ubc84\uc804 \uad00\ub9ac</li> <li> <p>\uc2a4\ub0c5\uc0f7 \ucd5c\uc801\ud654</p> </li> <li> <p>Event Bus: \ube44\ub3d9\uae30 \uc774\ubca4\ud2b8 \ub77c\uc6b0\ud305</p> </li> <li>\ud0c0\uc785 \uc548\uc804\ud55c \uc774\ubca4\ud2b8 \ubc1c\ud589/\uad6c\ub3c5</li> <li>\uc774\ubca4\ud2b8 \ud544\ud130\ub9c1 \ubc0f \ubcc0\ud658</li> <li> <p>\uc5d0\ub7ec \ucc98\ub9ac \ubc0f \uc7ac\uc2dc\ub3c4</p> </li> <li> <p>CQRS: \uba85\ub839\uacfc \ucffc\ub9ac \ubd84\ub9ac</p> </li> <li>\uba85\ub839 \ud578\ub4e4\ub7ec \uad6c\ud604</li> <li>\ucffc\ub9ac \ud578\ub4e4\ub7ec \uad6c\ud604</li> <li> <p>\uc77d\uae30/\uc4f0\uae30 \ubaa8\ub378 \ubd84\ub9ac</p> </li> <li> <p>Saga Pattern: \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158</p> </li> <li>\ub2e8\uacc4\ubcc4 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac</li> <li>\ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 \uc9c0\uc6d0</li> <li>\uc0c1\ud0dc \ucd94\uc801 \ubc0f \ubcf5\uad6c</li> </ul>"},{"location":"changelog/#cloud-native-phase-2-advanced-patterns","title":"\u2601\ufe0f Cloud Native (Phase 2: Advanced Patterns)","text":"<ul> <li>Cloud Run Integration: \uc11c\ubc84\ub9ac\uc2a4 \ubc30\ud3ec \ucd5c\uc801\ud654</li> <li>\ucf5c\ub4dc \uc2a4\ud0c0\ud2b8 \ucd5c\uc801\ud654</li> <li>\uc790\ub3d9 \uc2a4\ucf00\uc77c\ub9c1 \uc124\uc815</li> <li> <p>\ud5ec\uc2a4\uccb4\ud06c \uc5d4\ub4dc\ud3ec\uc778\ud2b8</p> </li> <li> <p>Service Discovery: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac</p> </li> <li>\uc11c\ube44\uc2a4 \ub4f1\ub85d \ubc0f \uc870\ud68c</li> <li>\ud5ec\uc2a4\uccb4\ud06c \uae30\ubc18 \ub77c\uc6b0\ud305</li> <li> <p>\ub85c\ub4dc \ubc38\ub7f0\uc2f1</p> </li> <li> <p>Task Queue: \ube44\ub3d9\uae30 \uc791\uc5c5 \ucc98\ub9ac</p> </li> <li>Google Cloud Tasks \ud1b5\ud569</li> <li>\uc9c0\uc5f0 \uc2e4\ud589 \ubc0f \uc2a4\ucf00\uc904\ub9c1</li> <li>\uc7ac\uc2dc\ub3c4 \ubc0f \ub370\ub4dc\ub808\ud130 \ud050</li> </ul>"},{"location":"changelog/#developer-experience-phase-3-developer-experience","title":"\ud83d\udee0\ufe0f Developer Experience (Phase 3: Developer Experience)","text":"<ul> <li>CLI Tool: \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131, \uac1c\ubc1c, \ubc30\ud3ec \uba85\ub839\uc5b4</li> <li><code>create-project</code>: \ud504\ub85c\uc81d\ud2b8 \ud15c\ud50c\ub9bf \uc0dd\uc131</li> <li><code>dev</code>: \uac1c\ubc1c \uc11c\ubc84 \uc2e4\ud589 \ubc0f \ubaa8\ub2c8\ud130\ub9c1</li> <li><code>deploy</code>: \ud074\ub77c\uc6b0\ub4dc \ubc30\ud3ec \uc790\ub3d9\ud654</li> <li> <p><code>debug</code>: \ub514\ubc84\uae45 \ub3c4\uad6c</p> </li> <li> <p>Workflow Automation: CI/CD \ud30c\uc774\ud504\ub77c\uc778 \uc790\ub3d9\ud654</p> </li> <li>GitHub Actions \ud15c\ud50c\ub9bf</li> <li>Docker \ube4c\ub4dc \uc790\ub3d9\ud654</li> <li> <p>\ud14c\uc2a4\ud2b8 \ud30c\uc774\ud504\ub77c\uc778</p> </li> <li> <p>Testing Framework: \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \ub7ec\ub108</p> </li> <li>\ube44\ub3d9\uae30 \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0</li> <li>\ubaa8\uc758 \uac1d\uccb4 \uc0dd\uc131</li> <li> <p>\ucee4\ubc84\ub9ac\uc9c0 \ub9ac\ud3ec\ud305</p> </li> <li> <p>Documentation Generator: \uc790\ub3d9 \ubb38\uc11c \uc0dd\uc131</p> </li> <li>API \ubb38\uc11c \uc790\ub3d9 \uc0dd\uc131</li> <li>\ub9c8\ud06c\ub2e4\uc6b4 \ubcc0\ud658</li> <li>\ub2e4\uad6d\uc5b4 \uc9c0\uc6d0</li> </ul>"},{"location":"changelog/#production-ready-phase-4-validation-optimization","title":"\ud83d\udd12 Production Ready (Phase 4: Validation &amp; Optimization)","text":"<ul> <li>System Validation: \ud3ec\uad04\uc801\uc778 \uc2dc\uc2a4\ud15c \uac80\uc99d</li> <li>\uae30\ub2a5\uc801 \uac80\uc99d (Functional Validation)</li> <li>\ud1b5\ud569 \uac80\uc99d (Integration Validation)  </li> <li>\uc131\ub2a5 \uac80\uc99d (Performance Validation)</li> <li>\ubcf4\uc548 \uac80\uc99d (Security Validation)</li> <li> <p>\ud638\ud658\uc131 \uac80\uc99d (Compatibility Validation)</p> </li> <li> <p>Performance Optimization: \uba54\ubaa8\ub9ac, CPU, I/O \ucd5c\uc801\ud654</p> </li> <li>\uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1 \ubc0f \ucd5c\uc801\ud654</li> <li>CPU \uc0ac\uc6a9\ub960 \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \ud29c\ub2dd</li> <li>I/O \ubcd1\ubaa9 \ud0d0\uc9c0 \ubc0f \uac1c\uc120</li> <li> <p>Cloud Run \ud2b9\ud654 \ucd5c\uc801\ud654</p> </li> <li> <p>Security Scanning: \ucde8\uc57d\uc810 \ud0d0\uc9c0 \ubc0f \ubcf4\uc548 \uac15\ud654</p> </li> <li>\ucf54\ub4dc \uc778\uc81d\uc158 \ud0d0\uc9c0 (Code Injection Detection)</li> <li>SQL \uc778\uc81d\uc158 \ubc29\uc9c0 (SQL Injection Prevention)</li> <li>\ud558\ub4dc\ucf54\ub529\ub41c \uc2dc\ud06c\ub9bf \ud0d0\uc9c0 (Hardcoded Secrets Detection)</li> <li>\uacbd\ub85c \uc21c\ud68c \uacf5\uaca9 \ubc29\uc9c0 (Path Traversal Prevention)</li> <li> <p>CWE/CVSS \uae30\ubc18 \ucde8\uc57d\uc810 \ud3c9\uac00</p> </li> <li> <p>Production Readiness: \ubc30\ud3ec \uc900\ube44\uc131 \uac80\uc99d</p> </li> <li>\uc2dc\uc2a4\ud15c \uc548\uc815\uc131 \uac80\uc0ac (System Stability Check)</li> <li>\uc131\ub2a5 \ud45c\uc900 \uac80\uc99d (Performance Standards Validation)</li> <li>\ubcf4\uc548 \uc815\ucc45 \uc900\uc218 (Security Compliance)</li> <li>\ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815 (Monitoring Configuration)</li> <li>\ubc30\ud3ec \uc808\ucc28 \uac80\uc99d (Deployment Process Validation)</li> <li>\uc7ac\ud574 \ubcf5\uad6c \uc900\ube44 (Disaster Recovery Readiness)</li> <li>\uaddc\uc815 \uc900\uc218 \uac80\uc99d (Compliance Validation)</li> </ul>"},{"location":"changelog/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>\uc804\uccb4 \uc544\ud0a4\ud14d\ucc98\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub429\ub2c8\ub2e4:</p> <pre><code>Application Layer\n\u251c\u2500\u2500 CLI Tool (Rich UI, Commands, Workflows)\n\u251c\u2500\u2500 Monitoring (Metrics, Health Checks)\n\u2514\u2500\u2500 Security (Scanning, Encryption, Auth)\n\nBusiness Logic Layer  \n\u251c\u2500\u2500 Reactive Streams (Mono, Flux, Operators)\n\u251c\u2500\u2500 State Machine (States, Transitions, Actions)\n\u2514\u2500\u2500 Event System (Event Store, CQRS, Saga)\n\nInfrastructure Layer\n\u251c\u2500\u2500 Serverless (Cloud Run, Functions, Tasks)\n\u251c\u2500\u2500 Core (Result, Config, Registry)\n\u2514\u2500\u2500 Testing (Test Runner, Mocks, Coverage)\n</code></pre>"},{"location":"changelog/#technical-specifications","title":"\ud83d\udd27 Technical Specifications","text":""},{"location":"changelog/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.10+ (required for latest type annotations)</li> <li>Dependencies: </li> <li>Core: <code>pydantic&gt;=2.5.0</code>, <code>typing-extensions&gt;=4.8.0</code></li> <li>CLI: <code>rich&gt;=13.7.0</code>, <code>typer&gt;=0.9.0</code></li> <li>Cloud: <code>google-cloud-run&gt;=0.10.0</code></li> <li>Security: <code>cryptography&gt;=41.0.0</code>, <code>pyjwt&gt;=2.8.0</code></li> </ul>"},{"location":"changelog/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Cold Start: &lt;2\ucd08 (Google Cloud Run)</li> <li>Memory Usage: &lt;256MB (\uae30\ubcf8 \uc124\uc815)</li> <li>Response Time: &lt;100ms (\uce90\uc2dc\ub41c \uc694\uccad)  </li> <li>Throughput: 1000+ RPS \uc9c0\uc6d0</li> </ul>"},{"location":"changelog/#security-features","title":"Security Features","text":"<ul> <li>Vulnerability Scanning: 20+ \ubcf4\uc548 \uac80\uc0ac \ud56d\ubaa9</li> <li>Encryption: AES-256 \ub370\uc774\ud130 \uc554\ud638\ud654 \uc9c0\uc6d0</li> <li>Authentication: JWT \ud1a0\ud070 \uae30\ubc18 \uc778\uc99d</li> <li>Compliance: OWASP Top 10 \uc900\uc218</li> </ul>"},{"location":"changelog/#package-structure","title":"\ud83d\udce6 Package Structure","text":"<pre><code>rfs_v4/\n\u251c\u2500\u2500 core/                    # \ud575\uc2ec \ud328\ud134 \ubc0f \uc720\ud2f8\ub9ac\ud2f0\n\u2502   \u251c\u2500\u2500 result.py           # Result \ud328\ud134 \uad6c\ud604\n\u2502   \u251c\u2500\u2500 config.py           # \uc124\uc815 \uad00\ub9ac \uc2dc\uc2a4\ud15c\n\u2502   \u251c\u2500\u2500 registry.py         # \uc758\uc874\uc131 \uc8fc\uc785 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\n\u2502   \u2514\u2500\u2500 singleton.py        # \uc2f1\uae00\ud1a4 \ud328\ud134\n\u251c\u2500\u2500 reactive/               # \ubc18\uc751\ud615 \ud504\ub85c\uadf8\ub798\ubc0d\n\u2502   \u251c\u2500\u2500 mono.py            # \ub2e8\uc77c \uac12 \uc2a4\ud2b8\ub9bc\n\u2502   \u251c\u2500\u2500 flux.py            # \ub2e4\uc911 \uac12 \uc2a4\ud2b8\ub9bc\n\u2502   \u251c\u2500\u2500 operators.py       # \uc2a4\ud2b8\ub9bc \uc5f0\uc0b0\uc790\n\u2502   \u2514\u2500\u2500 schedulers.py      # \uc2e4\ud589 \ucee8\ud14d\uc2a4\ud2b8\n\u251c\u2500\u2500 state_machine/          # \uc0c1\ud0dc \uad00\ub9ac\n\u2502   \u251c\u2500\u2500 machine.py         # \uc0c1\ud0dc \uba38\uc2e0 \uad6c\ud604\n\u2502   \u251c\u2500\u2500 states.py          # \uc0c1\ud0dc \uc815\uc758\n\u2502   \u251c\u2500\u2500 transitions.py     # \uc0c1\ud0dc \uc804\ud658\n\u2502   \u2514\u2500\u2500 actions.py         # \uc561\uc158 \uc2dc\uc2a4\ud15c\n\u251c\u2500\u2500 events/                 # \uc774\ubca4\ud2b8 \uae30\ubc18 \uc544\ud0a4\ud14d\ucc98  \n\u2502   \u251c\u2500\u2500 event_store.py     # \uc774\ubca4\ud2b8 \uc800\uc7a5\uc18c\n\u2502   \u251c\u2500\u2500 event_bus.py       # \uc774\ubca4\ud2b8 \ubc84\uc2a4\n\u2502   \u251c\u2500\u2500 cqrs.py           # CQRS \ud328\ud134\n\u2502   \u2514\u2500\u2500 saga.py           # Saga \ud328\ud134\n\u251c\u2500\u2500 serverless/             # \ud074\ub77c\uc6b0\ub4dc \ub124\uc774\ud2f0\ube0c\n\u2502   \u251c\u2500\u2500 cloud_run.py       # Cloud Run \ud1b5\ud569\n\u2502   \u251c\u2500\u2500 functions.py       # \uc11c\ubc84\ub9ac\uc2a4 \ud568\uc218\n\u2502   \u2514\u2500\u2500 cloud_tasks.py     # \uc791\uc5c5 \ud050\n\u251c\u2500\u2500 cloud_run/              # Cloud Run \ud2b9\ud654\n\u2502   \u251c\u2500\u2500 monitoring.py      # \ubaa8\ub2c8\ud130\ub9c1\n\u2502   \u251c\u2500\u2500 autoscaling.py     # \uc624\ud1a0\uc2a4\ucf00\uc77c\ub9c1\n\u2502   \u2514\u2500\u2500 service_discovery.py # \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac\n\u251c\u2500\u2500 cli/                    # \uac1c\ubc1c\uc790 \ub3c4\uad6c\n\u2502   \u251c\u2500\u2500 main.py           # CLI \uc9c4\uc785\uc810\n\u2502   \u251c\u2500\u2500 commands/         # CLI \uba85\ub839\uc5b4\n\u2502   \u251c\u2500\u2500 workflows/        # \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc790\ub3d9\ud654\n\u2502   \u251c\u2500\u2500 testing/          # \ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c\n\u2502   \u2514\u2500\u2500 docs/            # \ubb38\uc11c \uc0dd\uc131\uae30\n\u251c\u2500\u2500 validation/             # \uc2dc\uc2a4\ud15c \uac80\uc99d\n\u2502   \u2514\u2500\u2500 validator.py       # \ud3ec\uad04\uc801 \uac80\uc99d \uc2dc\uc2a4\ud15c\n\u251c\u2500\u2500 optimization/           # \uc131\ub2a5 \ucd5c\uc801\ud654\n\u2502   \u2514\u2500\u2500 optimizer.py       # \uc131\ub2a5 \ucd5c\uc801\ud654 \uc5d4\uc9c4\n\u251c\u2500\u2500 security/              # \ubcf4\uc548 \uac15\ud654\n\u2502   \u2514\u2500\u2500 scanner.py         # \ubcf4\uc548 \ucde8\uc57d\uc810 \uc2a4\uce90\ub108\n\u2514\u2500\u2500 production/            # \ud504\ub85c\ub355\uc158 \uc900\ube44\n    \u2514\u2500\u2500 readiness.py       # \ud504\ub85c\ub355\uc158 \uc900\ube44\uc131 \uac80\uc99d\n</code></pre>"},{"location":"changelog/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"changelog/#installation","title":"Installation","text":"<pre><code>pip install rfs-framework-v4\n\n# \ub610\ub294 \uac1c\ubc1c \ubc84\uc804 (\ubaa8\ub4e0 \uae30\ub2a5 \ud3ec\ud568)\npip install rfs-framework-v4[all]\n</code></pre>"},{"location":"changelog/#quick-start-example","title":"Quick Start Example","text":"<pre><code>from rfs_v4 import RFSApp\nfrom rfs_v4.core import Result\nfrom rfs_v4.reactive import Mono\n\napp = RFSApp()\n\n@app.route(\"/hello\")\nasync def hello() -&gt; Result[str, str]:\n    return await Mono.just(\"Hello, RFS v4!\").to_result()\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"changelog/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>\uc0ac\uc6a9\uc790 \uac00\uc774\ub4dc - \uc804\uccb4 \uc0ac\uc6a9 \uac00\uc774\ub4dc</li> <li>RELEASE_NOTES.md - \uc0c1\uc138 \ub9b4\ub9ac\uc2a4 \ub178\ud2b8</li> <li>examples/ - \uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c</li> <li>API Reference - \uc644\uc804\ud55c API \ubb38\uc11c (\uc608\uc815)</li> </ul>"},{"location":"changelog/#development-roadmap","title":"\ud83c\udfaf Development Roadmap","text":""},{"location":"changelog/#phase-1-foundation","title":"Phase 1: Foundation \u2705 \uc644\ub8cc","text":"<ul> <li>Core patterns (Result, Config, Registry)</li> <li>Reactive programming (Mono/Flux)  </li> <li>Basic infrastructure</li> </ul>"},{"location":"changelog/#phase-2-advanced-patterns","title":"Phase 2: Advanced Patterns \u2705 \uc644\ub8cc","text":"<ul> <li>State machine implementation</li> <li>Event-driven architecture</li> <li>Cloud native integration</li> </ul>"},{"location":"changelog/#phase-3-developer-experience","title":"Phase 3: Developer Experience \u2705 \uc644\ub8cc","text":"<ul> <li>CLI tool development</li> <li>Workflow automation</li> <li>Testing framework</li> <li>Documentation generator</li> </ul>"},{"location":"changelog/#phase-4-validation-optimization","title":"Phase 4: Validation &amp; Optimization \u2705 \uc644\ub8cc","text":"<ul> <li>System validation framework</li> <li>Performance optimization</li> <li>Security hardening  </li> <li>Production readiness</li> </ul>"},{"location":"changelog/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>\uc6b0\ub9ac\ub294 \ucee4\ubba4\ub2c8\ud2f0\uc758 \uae30\uc5ec\ub97c \ud658\uc601\ud569\ub2c8\ub2e4!</p>"},{"location":"changelog/#development-setup","title":"Development Setup","text":"<pre><code># \uc800\uc7a5\uc18c \ud074\ub860\ngit clone https://github.com/interactord/rfs-framework.git\ncd rfs-framework\n\n# \uac00\uc0c1\ud658\uacbd \uc124\uc815\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# \ub610\ub294 venv\\Scripts\\activate  # Windows\n\n# \uac1c\ubc1c \uc758\uc874\uc131 \uc124\uce58\npip install -e \".[dev,test,docs]\"\n\n# \uc0ac\uc804 \ucee4\ubc0b \ud6c5 \uc124\uc815\npre-commit install\n</code></pre>"},{"location":"changelog/#code-quality-standards","title":"Code Quality Standards","text":"<ul> <li>\ud0c0\uc785 \ud78c\ud2b8: \ubaa8\ub4e0 \uacf5\uac1c API\uc5d0 \uc644\uc804\ud55c \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158</li> <li>\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0: \ucd5c\uc18c 90% \uc774\uc0c1</li> <li>\ubb38\uc11c\ud654: \ubaa8\ub4e0 \uacf5\uac1c \ud568\uc218\uc640 \ud074\ub798\uc2a4\uc5d0 \ub3c5\uc2a4\ud2b8\ub9c1</li> <li>\ubcf4\uc548: \ubaa8\ub4e0 PR\uc5d0 \ub300\ud574 \ubcf4\uc548 \uc2a4\uce94 \uc2e4\ud589</li> </ul>"},{"location":"changelog/#license","title":"\ud83d\udcc4 License","text":"<p>MIT License - \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 LICENSE \ud30c\uc77c\uc744 \ucc38\uc870\ud558\uc138\uc694.</p>"},{"location":"changelog/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>Python \ucee4\ubba4\ub2c8\ud2f0\uc758 async/await \uac1c\uc120\uc0ac\ud56d</li> <li>Google Cloud Platform \ud300\uc758 Cloud Run \uc9c0\uc6d0</li> <li>\ubaa8\ub4e0 \ud14c\uc2a4\ud130\uc640 \ud53c\ub4dc\ubc31\uc744 \uc81c\uacf5\ud574 \uc8fc\uc2e0 \ubd84\ub4e4</li> </ul> <p>\ub2e4\uc74c \ubc84\uc804\uc5d0\uc11c \ub9cc\ub098\uc694! \ud83d\ude80</p>"},{"location":"getting-started/","title":"\uc2dc\uc791\ud558\uae30","text":""},{"location":"getting-started/#_2","title":"\uc694\uad6c \uc0ac\ud56d","text":"<p>RFS Framework\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ucd5c\uc18c \uc694\uad6c \uc0ac\ud56d:</p> <ul> <li>Python: 3.10 \uc774\uc0c1</li> <li>\uba54\ubaa8\ub9ac: 512MB RAM (\uad8c\uc7a5: 1GB+)</li> <li>\uc6b4\uc601\uccb4\uc81c: Linux, macOS, Windows</li> </ul>"},{"location":"getting-started/#_3","title":"\uc124\uce58","text":""},{"location":"getting-started/#_4","title":"\uae30\ubcf8 \uc124\uce58","text":"<pre><code>pip install rfs-framework\n</code></pre>"},{"location":"getting-started/#_5","title":"\uc120\ud0dd\uc801 \ubaa8\ub4c8","text":"<p>\uc6a9\ub3c4\uc5d0 \ub530\ub77c \ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \uc120\ud0dd\uc801\uc73c\ub85c \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:</p> \ubaa8\ub4c8 \uc124\uba85 \uc0c1\ud0dc \uc124\uce58 \uba85\ub839 web FastAPI \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c \u2705 \uc644\ub8cc <code>pip install rfs-framework[web]</code> database \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc9c0\uc6d0 \u2705 \uc644\ub8cc <code>pip install rfs-framework[database]</code> test \ud14c\uc2a4\ud305 \ub3c4\uad6c \u2705 \uc644\ub8cc <code>pip install rfs-framework[test]</code> dev \uac1c\ubc1c \ub3c4\uad6c \u2705 \uc644\ub8cc <code>pip install rfs-framework[dev]</code> docs \ubb38\uc11c\ud654 \ub3c4\uad6c \u26a0\ufe0f TBD <code>pip install rfs-framework[docs]</code> ai AI/ML \ud1b5\ud569 \u26a0\ufe0f TBD <code>pip install rfs-framework[ai]</code> all \ubaa8\ub4e0 \ubaa8\ub4c8 - <code>pip install rfs-framework[all]</code>"},{"location":"getting-started/#_6","title":"\uccab \ubc88\uc9f8 \ud504\ub85c\uc81d\ud2b8","text":""},{"location":"getting-started/#1","title":"1. \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131","text":"<pre><code># CLI\ub97c \uc0ac\uc6a9\ud55c \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\nrfs-cli create-project my-app --template basic\n\n# \ud504\ub85c\uc81d\ud2b8 \ub514\ub809\ud1a0\ub9ac\ub85c \uc774\ub3d9\ncd my-app\n</code></pre>"},{"location":"getting-started/#2","title":"2. \uae30\ubcf8 \uc608\uc81c","text":"app.py<pre><code>from rfs import Result, Success, Failure\nfrom rfs.reactive import Flux\nimport asyncio\n\n# Result \ud328\ud134 \uc0ac\uc6a9\ndef process_data(data: dict) -&gt; Result[dict, str]:\n    \"\"\"\ub370\uc774\ud130 \ucc98\ub9ac \ud568\uc218\"\"\"\n    if not data:\n        return Failure(\"\ub370\uc774\ud130\uac00 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4\")\n\n    # \ub370\uc774\ud130 \ubcc0\ud658\n    processed = {\n        \"id\": data.get(\"id\"),\n        \"name\": data.get(\"name\", \"\").upper(),\n        \"timestamp\": datetime.now()\n    }\n    return Success(processed)\n\n# \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \uc0ac\uc6a9\nasync def stream_processing():\n    \"\"\"\ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac\"\"\"\n    result = await (\n        Flux.from_iterable(range(10))\n        .map(lambda x: x * 2)\n        .filter(lambda x: x &gt; 5)\n        .collect_list()\n    )\n    return result\n\n# \uc2e4\ud589\nif __name__ == \"__main__\":\n    # Result \ud328\ud134 \ud14c\uc2a4\ud2b8\n    result = process_data({\"id\": 1, \"name\": \"test\"})\n    if result.is_success:\n        print(f\"\uc131\uacf5: {result.unwrap()}\")\n\n    # \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ud14c\uc2a4\ud2b8\n    stream_result = asyncio.run(stream_processing())\n    print(f\"\uc2a4\ud2b8\ub9bc \uacb0\uacfc: {stream_result}\")\n</code></pre>"},{"location":"getting-started/#3-api","title":"3. \uc6f9 API \uc0dd\uc131","text":"web_app.py<pre><code>from rfs.web import RFSApp\nfrom rfs import Result, Success, Failure\n\n# \uc571 \uc0dd\uc131\napp = RFSApp()\n\n@app.route(\"/health\", method=\"GET\")\nasync def health_check() -&gt; Result[dict, str]:\n    \"\"\"\ud5ec\uc2a4 \uccb4\ud06c \uc5d4\ub4dc\ud3ec\uc778\ud2b8\"\"\"\n    return Success({\"status\": \"healthy\", \"version\": \"4.3.0\"})\n\n@app.route(\"/users/{user_id}\", method=\"GET\")\nasync def get_user(user_id: int) -&gt; Result[dict, str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc870\ud68c\"\"\"\n    # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c\n    if user_id == 1:\n        return Success({\"id\": 1, \"name\": \"John Doe\"})\n    return Failure(f\"User {user_id} not found\")\n\n# \uc11c\ubc84 \uc2e4\ud589\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"getting-started/#_7","title":"\uac1c\ubc1c \ud658\uacbd \uc124\uc815","text":""},{"location":"getting-started/#vs-code","title":"VS Code \uc124\uc815","text":"<p><code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"python.linting.enabled\": true,\n    \"python.linting.pylintEnabled\": false,\n    \"python.linting.flake8Enabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.linting.mypyEnabled\": true,\n    \"editor.formatOnSave\": true,\n    \"python.testing.pytestEnabled\": true\n}\n</code></pre>"},{"location":"getting-started/#pre-commit","title":"Pre-commit \uc124\uc815","text":"<p><code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: https://github.com/psf/black\n    rev: 23.11.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.1.0\n    hooks:\n      - id: flake8\n</code></pre> <p>\uc124\uce58 \ubc0f \ud65c\uc131\ud654:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre>"},{"location":"getting-started/#_8","title":"\ub2e4\uc74c \ub2e8\uacc4","text":"<ul> <li>\ud575\uc2ec \uac1c\ub150 - Result \ud328\ud134\uacfc \ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d</li> <li>\uc124\uc815 \uad00\ub9ac - \ud658\uacbd\ubcc4 \uc124\uc815</li> <li>CLI \ub3c4\uad6c - \uba85\ub839\ud589 \uc778\ud130\ud398\uc774\uc2a4</li> <li>API \ub808\ud37c\ub7f0\uc2a4 - \uc0c1\uc138 API \ubb38\uc11c</li> </ul>"},{"location":"installation/","title":"RFS Framework \uc124\uce58 \uac00\uc774\ub4dc","text":""},{"location":"installation/#pypi","title":"\ud83d\udce6 PyPI \ud328\ud0a4\uc9c0 \uc815\ubcf4","text":"<p>\ucd5c\uc2e0 \ubc84\uc804: 4.0.0 (PyPI \ub4f1\ub85d) \ud504\ub85c\uc81d\ud2b8 \ubc84\uc804: 4.3.0 (\uc18c\uc2a4 \ucf54\ub4dc)</p> <p>\u26a0\ufe0f \uc8fc\uc758: PyPI\uc5d0 \ub4f1\ub85d\ub41c \ubc84\uc804(4.0.0)\uacfc \ud604\uc7ac \uc18c\uc2a4 \ucf54\ub4dc \ubc84\uc804(4.3.0)\uc774 \ub2e4\ub985\ub2c8\ub2e4. \ucd5c\uc2e0 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 GitHub\uc5d0\uc11c \uc9c1\uc811 \uc124\uce58\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4.</p>"},{"location":"installation/#_1","title":"\ud83d\ude80 \uc124\uce58 \ubc29\ubc95","text":""},{"location":"installation/#1","title":"1. \uae30\ubcf8 \uc124\uce58","text":"<pre><code># PyPI\uc5d0\uc11c \uc124\uce58 (v4.0.0)\npip install rfs-framework\n\n# GitHub\uc5d0\uc11c \ucd5c\uc2e0 \ubc84\uc804 \uc124\uce58 (v4.3.0)\npip install git+https://github.com/interactord/rfs-framework.git\n</code></pre>"},{"location":"installation/#2","title":"2. \uc120\ud0dd\uc801 \ubaa8\ub4c8 \uc124\uce58","text":"<p>RFS Framework\ub294 \ub2e4\uc591\ud55c \uc6a9\ub3c4\uc5d0 \ub9de\ucdb0 \uc120\ud0dd\uc801\uc73c\ub85c \uc124\uce58\ud560 \uc218 \uc788\ub294 6\uac1c\uc758 \ucd94\uac00 \ubaa8\ub4c8\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4:</p>"},{"location":"installation/#web-fastapi","title":"\ud83d\udcf1 [web] - FastAPI \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c \uc9c0\uc6d0 (\uc644\ub8cc)","text":"<p><pre><code>pip install rfs-framework[web]\n</code></pre> \ud3ec\ud568 \ud328\ud0a4\uc9c0: - <code>fastapi&gt;=0.104.0</code> - \ubaa8\ub358 \uc6f9 API \ud504\ub808\uc784\uc6cc\ud06c - <code>uvicorn[standard]&gt;=0.24.0</code> - ASGI \uc11c\ubc84 - <code>gunicorn&gt;=21.2.0</code> - \ud504\ub85c\ub355\uc158 WSGI \uc11c\ubc84</p> <p>\u2705 \uad6c\ud604 \uc0c1\ud0dc: \uc644\uc804 \uad6c\ud604\ub428 - Web server, middleware, routing \ubaa8\ub4c8 \uad6c\ud604 - FastAPI/Flask \ub4c0\uc5bc \uc9c0\uc6d0</p>"},{"location":"installation/#database-","title":"\ud83d\udcbe [database] - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc9c0\uc6d0 (\uc644\ub8cc)","text":"<p><pre><code>pip install rfs-framework[database]\n</code></pre> \ud3ec\ud568 \ud328\ud0a4\uc9c0: - <code>sqlalchemy&gt;=2.0.23</code> - SQL \ud234\ud0b7 \ubc0f ORM - <code>alembic&gt;=1.13.0</code> - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 - <code>asyncpg&gt;=0.29.0</code> - PostgreSQL \ube44\ub3d9\uae30 \ub4dc\ub77c\uc774\ubc84 - <code>aiosqlite&gt;=0.19.0</code> - SQLite \ube44\ub3d9\uae30 \ub4dc\ub77c\uc774\ubc84 - <code>redis&gt;=5.0.1</code> - Redis \ud074\ub77c\uc774\uc5b8\ud2b8</p> <p>\u2705 \uad6c\ud604 \uc0c1\ud0dc: \uc644\uc804 \uad6c\ud604\ub428 - Database models, session, migration \ubaa8\ub4c8 \uad6c\ud604 - Redis cache, distributed cache \uad6c\ud604 - 36\uac1c \ud30c\uc77c\uc5d0\uc11c \ud65c\uc6a9 \uc911</p>"},{"location":"installation/#test-","title":"\ud83e\uddea [test] - \ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c (\uc644\ub8cc)","text":"<p><pre><code>pip install rfs-framework[test]\n</code></pre> \ud3ec\ud568 \ud328\ud0a4\uc9c0: - <code>pytest&gt;=7.4.0</code> - \ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c - <code>pytest-asyncio&gt;=0.21.0</code> - \ube44\ub3d9\uae30 \ud14c\uc2a4\ud2b8 \uc9c0\uc6d0 - <code>pytest-cov&gt;=4.1.0</code> - \ucf54\ub4dc \ucee4\ubc84\ub9ac\uc9c0 - <code>pytest-mock&gt;=3.12.0</code> - Mock \uc9c0\uc6d0 - <code>httpx&gt;=0.25.0</code> - FastAPI \ud14c\uc2a4\ud2b8\uc6a9 - <code>faker&gt;=20.1.0</code> - \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131</p> <p>\u2705 \uad6c\ud604 \uc0c1\ud0dc: \uc644\uc804 \uad6c\ud604\ub428 - 25\uac1c \ud14c\uc2a4\ud2b8 \ud30c\uc77c \uc791\uc131 - Unit, Integration \ud14c\uc2a4\ud2b8 \uad6c\uc870 \uc644\uc131 - conftest.py \uc124\uc815 \uc644\ub8cc</p>"},{"location":"installation/#dev-","title":"\ud83d\udee0\ufe0f [dev] - \uac1c\ubc1c \ub3c4\uad6c (\uc644\ub8cc)","text":"<p><pre><code>pip install rfs-framework[dev]\n</code></pre> \ud3ec\ud568 \ud328\ud0a4\uc9c0: - <code>black&gt;=23.11.0</code> - \ucf54\ub4dc \ud3ec\ub9e4\ud130 - <code>isort&gt;=5.12.0</code> - import \uc815\ub82c - <code>flake8&gt;=6.1.0</code> - \ub9b0\ud130 - <code>mypy&gt;=1.7.0</code> - \ud0c0\uc785 \uccb4\ucee4 - <code>pre-commit&gt;=3.6.0</code> - Git \ud6c5 - <code>bandit&gt;=1.7.5</code> - \ubcf4\uc548 \ub9b0\ud305</p> <p>\u2705 \uad6c\ud604 \uc0c1\ud0dc: \uc124\uc815 \ud30c\uc77c\ub9cc \ud544\uc694 - pyproject.toml\uc5d0 \uc124\uc815 \ud3ec\ud568 - \uac1c\ubc1c \ub3c4\uad6c\ub294 \ubcc4\ub3c4 \uad6c\ud604 \ubd88\ud544\uc694</p>"},{"location":"installation/#docs-tbd","title":"\ud83d\udcda [docs] - \ubb38\uc11c\ud654 \ub3c4\uad6c (TBD)","text":"<p><pre><code>pip install rfs-framework[docs]\n</code></pre> \ud3ec\ud568 \ud328\ud0a4\uc9c0: - <code>mkdocs&gt;=1.5.3</code> - \ubb38\uc11c \uc0dd\uc131\uae30 - <code>mkdocs-material&gt;=9.4.0</code> - Material \ud14c\ub9c8 - <code>mkdocstrings[python]&gt;=0.24.0</code> - Python docstring \ud30c\uc11c - <code>mkdocs-mermaid2-plugin&gt;=1.1.1</code> - \ub2e4\uc774\uc5b4\uadf8\ub7a8 \uc9c0\uc6d0</p> <p>\u26a0\ufe0f \uad6c\ud604 \uc0c1\ud0dc: \ubd80\ubd84 \uad6c\ud604 - mkdocs.yml \uc124\uc815 \ud30c\uc77c \uc5c6\uc74c - API \ubb38\uc11c\ub294 \uc788\uc73c\ub098 MkDocs \ud1b5\ud569 \ubbf8\uc644\uc131 - Wiki \ubb38\uc11c\ub294 \uc644\uc131 (17\uac1c \ubaa8\ub4c8)</p>"},{"location":"installation/#ai-aiml-tbd","title":"\ud83e\udd16 [ai] - AI/ML \ud1b5\ud569 (TBD)","text":"<p><pre><code>pip install rfs-framework[ai]\n</code></pre> \ud3ec\ud568 \ud328\ud0a4\uc9c0: - <code>openai&gt;=1.3.0</code> - OpenAI API \ud074\ub77c\uc774\uc5b8\ud2b8 - <code>anthropic&gt;=0.7.0</code> - Anthropic API \ud074\ub77c\uc774\uc5b8\ud2b8 - <code>transformers&gt;=4.35.0</code> - Hugging Face Transformers</p> <p>\u26a0\ufe0f \uad6c\ud604 \uc0c1\ud0dc: \ubbf8\uad6c\ud604 - AI \ud1b5\ud569 \ubaa8\ub4c8 \uc5c6\uc74c - 2\uac1c \ud30c\uc77c\uc5d0\uc11c \uc5b8\uae09\ub9cc \uc788\uc74c - \uc2e4\uc81c AI \uae30\ub2a5 \uad6c\ud604 \ud544\uc694</p>"},{"location":"installation/#3","title":"3. \uc804\uccb4 \uc124\uce58","text":""},{"location":"installation/#all-","title":"[all] - \ubaa8\ub4e0 \uc120\ud0dd\uc801 \ubaa8\ub4c8 \ud3ec\ud568","text":"<p><pre><code>pip install rfs-framework[all]\n</code></pre> \uc704\uc758 6\uac1c \ubaa8\ub4c8(<code>web</code>, <code>database</code>, <code>test</code>, <code>dev</code>, <code>docs</code>, <code>ai</code>)\uc744 \ubaa8\ub450 \ud3ec\ud568\ud569\ub2c8\ub2e4.</p>"},{"location":"installation/#_2","title":"\ud83c\udfaf \uc0ac\uc6a9 \ubaa9\uc801\ubcc4 \uad8c\uc7a5 \uc124\uce58","text":""},{"location":"installation/#api","title":"\uc6f9 API \uac1c\ubc1c","text":"<pre><code>pip install rfs-framework[web,database,test]\n</code></pre>"},{"location":"installation/#_3","title":"\ub370\uc774\ud130 \ucc98\ub9ac \uc560\ud50c\ub9ac\ucf00\uc774\uc158","text":"<pre><code>pip install rfs-framework[database,test]\n</code></pre>"},{"location":"installation/#_4","title":"\uc624\ud508\uc18c\uc2a4 \uae30\uc5ec\uc790","text":"<pre><code>pip install rfs-framework[dev,test,docs]\n</code></pre>"},{"location":"installation/#_5","title":"\ud480\uc2a4\ud0dd \uac1c\ubc1c","text":"<pre><code>pip install rfs-framework[all]\n</code></pre>"},{"location":"installation/#_6","title":"\ucd5c\uc18c \uc124\uce58 (\ucf54\uc5b4 \uae30\ub2a5\ub9cc)","text":"<pre><code>pip install rfs-framework\n</code></pre>"},{"location":"installation/#_7","title":"\ud83d\udd27 \uac1c\ubc1c \ud658\uacbd \uc124\uc815","text":""},{"location":"installation/#_8","title":"\ub85c\uceec \uac1c\ubc1c \ud658\uacbd","text":"<pre><code># \uc800\uc7a5\uc18c \ud074\ub860\ngit clone https://github.com/interactord/rfs-framework.git\ncd rfs-framework\n\n# \uac00\uc0c1\ud658\uacbd \uc0dd\uc131 \ubc0f \ud65c\uc131\ud654\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# \ub610\ub294\nvenv\\Scripts\\activate  # Windows\n\n# \uac1c\ubc1c \ubaa8\ub4dc\ub85c \uc124\uce58 (editable install)\npip install -e .\n\n# \uac1c\ubc1c \ub3c4\uad6c \ud3ec\ud568 \uc124\uce58\npip install -e \".[dev,test]\"\n\n# \ubaa8\ub4e0 \uae30\ub2a5 \ud3ec\ud568 \uac1c\ubc1c \uc124\uce58\npip install -e \".[all]\"\n</code></pre>"},{"location":"installation/#_9","title":"\ud83d\udcca \uc124\uce58 \ud655\uc778","text":"<pre><code># \ud328\ud0a4\uc9c0 \uc124\uce58 \ud655\uc778\npip show rfs-framework\n\n# \ubc84\uc804 \ud655\uc778\npython -c \"import rfs; print(rfs.__version__)\"\n\n# CLI \ub3c4\uad6c \ud655\uc778\nrfs --version\nrfs status\n</code></pre>"},{"location":"installation/#_10","title":"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d","text":"<ol> <li>Python \ubc84\uc804: Python 3.10 \uc774\uc0c1 \ud544\uc694</li> <li>\uac00\uc0c1\ud658\uacbd \uc0ac\uc6a9 \uad8c\uc7a5: \uc758\uc874\uc131 \ucda9\ub3cc \ubc29\uc9c0</li> <li>PyPI vs GitHub: </li> <li>PyPI (v4.0.0): \uc548\uc815 \ubc84\uc804</li> <li>GitHub (v4.3.0): \ucd5c\uc2e0 \uae30\ub2a5 \ud3ec\ud568</li> </ol>"},{"location":"installation/#_11","title":"\ud83c\udd98 \ubb38\uc81c \ud574\uacb0","text":""},{"location":"installation/#_12","title":"\uc124\uce58 \uc624\ub958 \ubc1c\uc0dd \uc2dc","text":"<pre><code># pip \uc5c5\uadf8\ub808\uc774\ub4dc\npip install --upgrade pip\n\n# \uce90\uc2dc \uc0ad\uc81c \ud6c4 \uc7ac\uc124\uce58\npip cache purge\npip install rfs-framework --no-cache-dir\n\n# \ud2b9\uc815 \ubc84\uc804 \uc124\uce58\npip install rfs-framework==4.0.0\n</code></pre>"},{"location":"installation/#_13","title":"\uc758\uc874\uc131 \ucda9\ub3cc \uc2dc","text":"<pre><code># \uc758\uc874\uc131 \ud655\uc778\npip check\n\n# \ucda9\ub3cc\ud558\ub294 \ud328\ud0a4\uc9c0 \uc81c\uac70 \ud6c4 \uc7ac\uc124\uce58\npip uninstall conflicting-package\npip install rfs-framework\n</code></pre>"},{"location":"installation/#_14","title":"\ud83d\udcda \ucd94\uac00 \uc815\ubcf4","text":"<ul> <li>\ud504\ub85c\uc81d\ud2b8 \ud648\ud398\uc774\uc9c0</li> <li>PyPI \ud328\ud0a4\uc9c0 \ud398\uc774\uc9c0</li> <li>\ubb38\uc81c \ubcf4\uace0</li> </ul>"},{"location":"tags/","title":"Tags","text":"<p>RFS Framework \ubb38\uc11c\uc758 \ubaa8\ub4e0 \ud0dc\uadf8\ub4e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tags/#_1","title":"\uc0ac\uc6a9 \ubc29\ubc95","text":"<p>\uac01 \ubb38\uc11c \ud398\uc774\uc9c0\uc5d0\uc11c \uad00\ub828 \ud0dc\uadf8\ub97c \ud074\ub9ad\ud558\uba74 \uac19\uc740 \ud0dc\uadf8\uac00 \uc9c0\uc815\ub41c \ub2e4\ub978 \ubb38\uc11c\ub4e4\uc744 \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"tags/#_2","title":"\uc8fc\uc694 \ud0dc\uadf8 \uce74\ud14c\uace0\ub9ac","text":""},{"location":"tags/#_3","title":"\ud83c\udfaf \ud575\uc2ec \uae30\ub2a5","text":"<ul> <li><code>core</code> - \ud575\uc2ec \ud504\ub808\uc784\uc6cc\ud06c \uae30\ub2a5</li> <li><code>result</code> - Result \ud328\ud134</li> <li><code>reactive</code> - \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc</li> <li><code>hof</code> - \uace0\ucc28 \ud568\uc218</li> </ul>"},{"location":"tags/#_4","title":"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98","text":"<ul> <li><code>architecture</code> - \uc2dc\uc2a4\ud15c \uc544\ud0a4\ud14d\ucc98</li> <li><code>patterns</code> - \ub514\uc790\uc778 \ud328\ud134</li> <li><code>dependency-injection</code> - \uc758\uc874\uc131 \uc8fc\uc785</li> <li><code>configuration</code> - \uc124\uc815 \uad00\ub9ac</li> </ul>"},{"location":"tags/#api","title":"\ud83c\udf10 \uc6f9 &amp; API","text":"<ul> <li><code>web</code> - \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c</li> <li><code>api</code> - API \uac1c\ubc1c</li> <li><code>fastapi</code> - FastAPI \ud1b5\ud569</li> <li><code>middleware</code> - \ubbf8\ub4e4\uc6e8\uc5b4</li> </ul>"},{"location":"tags/#_5","title":"\ud83d\udcbe \ub370\uc774\ud130","text":"<ul> <li><code>database</code> - \ub370\uc774\ud130\ubca0\uc774\uc2a4</li> <li><code>sqlalchemy</code> - SQLAlchemy ORM</li> <li><code>redis</code> - Redis \uce90\uc2dc</li> <li><code>migration</code> - \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158</li> </ul>"},{"location":"tags/#_6","title":"\ud83d\udd12 \ubcf4\uc548","text":"<ul> <li><code>security</code> - \ubcf4\uc548 \uae30\ub2a5</li> <li><code>authentication</code> - \uc778\uc99d</li> <li><code>authorization</code> - \uc778\uac00</li> <li><code>rbac</code> - \uc5ed\ud560 \uae30\ubc18 \uc811\uadfc \uc81c\uc5b4</li> <li><code>jwt</code> - JWT \ud1a0\ud070</li> </ul>"},{"location":"tags/#_7","title":"\ud83d\ude80 \ubc30\ud3ec &amp; \uc6b4\uc601","text":"<ul> <li><code>deployment</code> - \ubc30\ud3ec</li> <li><code>cloud-run</code> - Google Cloud Run</li> <li><code>monitoring</code> - \ubaa8\ub2c8\ud130\ub9c1</li> <li><code>logging</code> - \ub85c\uae45</li> <li><code>production</code> - \ud504\ub85c\ub355\uc158</li> </ul>"},{"location":"tags/#_8","title":"\ud83e\uddea \ud14c\uc2a4\ud2b8 &amp; \ud488\uc9c8","text":"<ul> <li><code>testing</code> - \ud14c\uc2a4\ud2b8</li> <li><code>pytest</code> - Pytest \ud14c\uc2a4\ud305</li> <li><code>quality</code> - \ucf54\ub4dc \ud488\uc9c8</li> <li><code>performance</code> - \uc131\ub2a5</li> </ul>"},{"location":"tags/#_9","title":"\ud83d\udcda \ubb38\uc11c &amp; \uac00\uc774\ub4dc","text":"<ul> <li><code>guide</code> - \uc0ac\uc6a9 \uac00\uc774\ub4dc</li> <li><code>tutorial</code> - \ud29c\ud1a0\ub9ac\uc5bc</li> <li><code>api-reference</code> - API \ub808\ud37c\ub7f0\uc2a4</li> <li><code>examples</code> - \uc608\uc81c \ucf54\ub4dc</li> </ul>"},{"location":"tags/#cli","title":"\ud83d\udee0\ufe0f \ub3c4\uad6c &amp; CLI","text":"<ul> <li><code>cli</code> - \uba85\ub839\ud589 \ub3c4\uad6c</li> <li><code>development</code> - \uac1c\ubc1c \ub3c4\uad6c</li> <li><code>automation</code> - \uc790\ub3d9\ud654</li> </ul> <p>\ud0dc\uadf8 \uc2dc\uc2a4\ud15c\uc744 \ud1b5\ud574 \uad00\ub828 \ubb38\uc11c\ub4e4\uc744 \uc27d\uac8c \ucc3e\uc544\ubcf4\uc138\uc694!</p>"},{"location":"api/","title":"API \ub808\ud37c\ub7f0\uc2a4","text":"<p>RFS Framework\uc758 \ubaa8\ub4e0 \uacf5\uac1c API\uc5d0 \ub300\ud55c \uc0c1\uc138\ud55c \ubb38\uc11c\uc785\ub2c8\ub2e4.</p>"},{"location":"api/#core","title":"\ud83d\udd27 Core (\ud575\uc2ec)","text":"<p>\ud575\uc2ec \ud504\ub808\uc784\uc6cc\ud06c \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p> <ul> <li>Result Pattern - \ud568\uc218\ud615 \uc5d0\ub7ec \ud578\ub4e4\ub9c1</li> <li>Configuration - \uc124\uc815 \uad00\ub9ac \uc2dc\uc2a4\ud15c</li> <li>Registry - \uc758\uc874\uc131 \uc8fc\uc785 \ub808\uc9c0\uc2a4\ud2b8\ub9ac</li> </ul>"},{"location":"api/#reactive","title":"\u26a1 Reactive (\ubc18\uc751\ud615)","text":"<p>\ube44\ub3d9\uae30 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac\ub97c \uc704\ud55c API\uc785\ub2c8\ub2e4.</p> <ul> <li>Mono - \ub2e8\uc77c \uac12 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc</li> <li>Flux - \ub2e4\uc911 \uac12 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc</li> </ul>"},{"location":"api/#hof-higher-order-functions","title":"\ud83c\udfaf HOF (Higher-Order Functions)","text":"<p>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uace0\ucc28 \ud568\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4.</p> <ul> <li>Core Functions - compose, pipe, curry \ub4f1</li> <li>Collections - \uceec\ub809\uc158 \ucc98\ub9ac \uc720\ud2f8\ub9ac\ud2f0</li> <li>Monads - Maybe, Either, Result \ubaa8\ub098\ub4dc</li> </ul>"},{"location":"api/#_1","title":"\ud83d\udcda \ucd94\uac00 \ubaa8\ub4c8","text":""},{"location":"api/#web","title":"\ud83c\udf10 Web","text":"<ul> <li>FastAPI/Flask \ud1b5\ud569</li> <li>\ubbf8\ub4e4\uc6e8\uc5b4 \uc2dc\uc2a4\ud15c</li> <li>\ub77c\uc6b0\ud305 \uad00\ub9ac</li> </ul>"},{"location":"api/#database","title":"\ud83d\udcbe Database","text":"<ul> <li>SQLAlchemy \ud1b5\ud569</li> <li>Redis \uce90\uc2dc</li> <li>\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub3c4\uad6c</li> </ul>"},{"location":"api/#security","title":"\ud83d\udee1\ufe0f Security","text":"<ul> <li>RBAC/ABAC \uc811\uadfc \uc81c\uc5b4</li> <li>JWT \uc778\uc99d</li> <li>\ubcf4\uc548 \uc2a4\uce90\ub108</li> </ul>"},{"location":"api/#monitoring","title":"\ud83d\udcca Monitoring","text":"<ul> <li>\uc131\ub2a5 \uba54\ud2b8\ub9ad</li> <li>\ud5ec\uc2a4 \uccb4\ud06c</li> <li>\ub85c\uae45 \uc2dc\uc2a4\ud15c</li> </ul>"},{"location":"api/#production","title":"\ud83d\ude80 Production","text":"<ul> <li>\ubc30\ud3ec \uc804\ub7b5</li> <li>\ub864\ubc31 \uad00\ub9ac</li> <li>\ucd5c\uc801\ud654 \ub3c4\uad6c</li> </ul>"},{"location":"api/#_2","title":"\uc0ac\uc6a9 \uc608\uc81c","text":"<p>\uac01 API \ubb38\uc11c\uc5d0\ub294 \ub2e4\uc74c\uc774 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4:</p> <ul> <li>\uac1c\uc694: \uae30\ub2a5 \uc124\uba85</li> <li>\ud30c\ub77c\ubbf8\ud130: \uc785\ub825 \ub9e4\uac1c\ubcc0\uc218</li> <li>\ubc18\ud658\uac12: \ucd9c\ub825 \ud615\ud0dc</li> <li>\uc608\uc81c: \uc2e4\uc81c \uc0ac\uc6a9 \ucf54\ub4dc</li> <li>\uad00\ub828 API: \uc5f0\uad00\ub41c \ub2e4\ub978 API</li> </ul>"},{"location":"api/#_3","title":"\ubc84\uc804\ubcc4 \ubcc0\uacbd\uc0ac\ud56d","text":"<p>API \ubcc0\uacbd\uc0ac\ud56d\uc740 CHANGELOG\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"api/core/config/","title":"Configuration API","text":"<p>Configuration management API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud074\ub798\uc2a4: - <code>Config</code>: \uae30\ubcf8 \uc124\uc815 \ud074\ub798\uc2a4 - <code>ConfigLoader</code>: \uc124\uc815 \ub85c\ub354 - <code>ConfigValidator</code>: \uc124\uc815 \uac80\uc99d\uae30</p>"},{"location":"api/core/config/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/core/config/#_2","title":"\uae30\ubcf8 \uc124\uc815","text":"<pre><code>from rfs.core.config import Config, ConfigLoader\nfrom pydantic import BaseModel\nfrom typing import Optional\n\nclass DatabaseConfig(BaseModel):\n    host: str = \"localhost\"\n    port: int = 5432\n    username: str\n    password: str\n    database: str\n\nclass AppConfig(Config):\n    debug: bool = False\n    database: DatabaseConfig\n    api_key: Optional[str] = None\n\n    class Config:\n        env_prefix = \"APP_\"\n        case_sensitive = False\n\n# \ud658\uacbd \ubcc0\uc218\uc5d0\uc11c \ub85c\ub4dc\nconfig = ConfigLoader.load(AppConfig, \n    env_file=\".env\",\n    env_file_encoding=\"utf-8\"\n)\n\nprint(f\"Debug mode: {config.debug}\")\nprint(f\"Database: {config.database.host}:{config.database.port}\")\n</code></pre>"},{"location":"api/core/config/#_3","title":"\ud658\uacbd\ubcc4 \uc124\uc815","text":"<pre><code>from rfs.core.config import Config\nimport os\n\nclass Environment(str, Enum):\n    DEVELOPMENT = \"development\"\n    STAGING = \"staging\"\n    PRODUCTION = \"production\"\n\nclass AppConfig(Config):\n    environment: Environment = Environment.DEVELOPMENT\n    database_url: str\n    redis_url: Optional[str] = None\n\n    @property\n    def is_production(self) -&gt; bool:\n        return self.environment == Environment.PRODUCTION\n\n    @property\n    def is_development(self) -&gt; bool:\n        return self.environment == Environment.DEVELOPMENT\n\n# \ud658\uacbd\uc5d0 \ub530\ub978 \uc124\uc815 \ub85c\ub4dc\nenv = os.getenv(\"ENVIRONMENT\", \"development\")\nconfig_file = f\"config/{env}.json\"\n\nconfig = ConfigLoader.from_file(AppConfig, config_file)\n\nif config.is_production:\n    print(\"Running in production mode\")\n</code></pre>"},{"location":"api/core/config/#_4","title":"\uc124\uc815 \uac80\uc99d","text":"<pre><code>from rfs.core.config import Config, ConfigValidator\nfrom pydantic import validator, Field\nfrom typing import List\n\nclass ServerConfig(Config):\n    host: str = Field(default=\"0.0.0.0\", description=\"Server host\")\n    port: int = Field(default=8000, ge=1, le=65535, description=\"Server port\")\n    workers: int = Field(default=1, ge=1, le=16, description=\"Number of workers\")\n    allowed_hosts: List[str] = Field(default_factory=list)\n\n    @validator('host')\n    def validate_host(cls, v):\n        if not v or v.isspace():\n            raise ValueError(\"Host cannot be empty\")\n        return v.strip()\n\n    @validator('allowed_hosts')\n    def validate_allowed_hosts(cls, v):\n        if not v:\n            return [\"localhost\", \"127.0.0.1\"]\n        return v\n\n# \uc124\uc815 \uc720\ud6a8\uc131 \uac80\uc0ac\ntry:\n    config = ServerConfig(\n        host=\"\",  # \ube48 \ud638\uc2a4\ud2b8\ub294 \uac80\uc99d \uc2e4\ud328\n        port=8080,\n        workers=4\n    )\nexcept ValidationError as e:\n    print(f\"Configuration error: {e}\")\n\n# \uc62c\ubc14\ub978 \uc124\uc815\nconfig = ServerConfig(\n    host=\"localhost\",\n    port=8080,\n    workers=4,\n    allowed_hosts=[\"localhost\", \"*.example.com\"]\n)\n\n# \uc124\uc815 \uac80\uc99d\nvalidator = ConfigValidator(config)\nvalidation_result = validator.validate()\n\nif validation_result.is_valid:\n    print(\"Configuration is valid\")\nelse:\n    print(f\"Validation errors: {validation_result.errors}\")\n</code></pre>"},{"location":"api/core/config/#_5","title":"\ub3d9\uc801 \uc124\uc815 \uad00\ub9ac","text":"<pre><code>from rfs.core.config import Config, ConfigWatcher\nimport asyncio\n\nclass AppConfig(Config):\n    max_connections: int = 100\n    timeout: float = 30.0\n    feature_flags: Dict[str, bool] = Field(default_factory=dict)\n\n    def update_feature_flag(self, name: str, enabled: bool):\n        self.feature_flags[name] = enabled\n\n# \uc124\uc815 \ud30c\uc77c \uac10\uc2dc \ubc0f \uc790\ub3d9 \ub9ac\ub85c\ub4dc\nasync def watch_config():\n    config = ConfigLoader.load(AppConfig, \"config.json\")\n\n    watcher = ConfigWatcher(config, \"config.json\")\n\n    @watcher.on_change\n    async def on_config_change(new_config: AppConfig):\n        print(f\"Configuration updated: {new_config.dict()}\")\n        # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815 \uc5c5\ub370\uc774\ud2b8\n        update_application_config(new_config)\n\n    await watcher.start()\n\n# \uc2e4\ud589\nasyncio.run(watch_config())\n</code></pre>"},{"location":"api/core/config/#_6","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ud575\uc2ec \ud328\ud134 - \uc124\uc815 \uad00\ub9ac \ud328\ud134</li> <li>\ud658\uacbd \uc124\uc815 - \uc0c1\uc138 \uc124\uc815 \uac00\uc774\ub4dc</li> </ul>"},{"location":"api/core/registry/","title":"Registry API","text":"<p>Registry and dependency injection API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud074\ub798\uc2a4: - <code>Registry</code>: \uae30\ubcf8 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \ud074\ub798\uc2a4 - <code>ServiceRegistry</code>: \uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac - <code>DependencyInjector</code>: \uc758\uc874\uc131 \uc8fc\uc785\uae30</p>"},{"location":"api/core/registry/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/core/registry/#_2","title":"\uae30\ubcf8 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \uc0ac\uc6a9","text":"<pre><code>from rfs.core.registry import Registry\nfrom abc import ABC, abstractmethod\n\n# \uc778\ud130\ud398\uc774\uc2a4 \uc815\uc758\nclass Repository(ABC):\n    @abstractmethod\n    def save(self, entity): ...\n\n    @abstractmethod\n    def find_by_id(self, id: str): ...\n\nclass UserRepository(Repository):\n    def __init__(self, db_connection):\n        self.db = db_connection\n\n    def save(self, user):\n        return self.db.insert(\"users\", user)\n\n    def find_by_id(self, user_id: str):\n        return self.db.query(\"users\", {\"id\": user_id})\n\n# \ub808\uc9c0\uc2a4\ud2b8\ub9ac \ub4f1\ub85d\nregistry = Registry()\n\n# \uc11c\ube44\uc2a4 \ub4f1\ub85d\nregistry.register(\"user_repository\", UserRepository)\nregistry.register(\"database\", DatabaseConnection)\n\n# \uc758\uc874\uc131 \uc8fc\uc785\n@registry.inject(\"user_repository\")\ndef create_user(user_data, user_repo: UserRepository):\n    return user_repo.save(user_data)\n\n# \uc0ac\uc6a9\nuser = create_user({\"name\": \"John\", \"email\": \"john@example.com\"})\n</code></pre>"},{"location":"api/core/registry/#_3","title":"\uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac","text":"<pre><code>from rfs.core.registry import ServiceRegistry\nfrom rfs.core.annotations import Service, Inject\nfrom typing import Protocol\n\nclass NotificationService(Protocol):\n    def send(self, message: str, recipient: str) -&gt; bool: ...\n\n@Service(\"email_service\")\nclass EmailService:\n    def __init__(self, smtp_host: str = \"localhost\"):\n        self.smtp_host = smtp_host\n\n    def send(self, message: str, recipient: str) -&gt; bool:\n        print(f\"Sending email to {recipient}: {message}\")\n        return True\n\n@Service(\"sms_service\") \nclass SMSService:\n    def send(self, message: str, recipient: str) -&gt; bool:\n        print(f\"Sending SMS to {recipient}: {message}\")\n        return True\n\n@Service(\"user_service\")\nclass UserService:\n    def __init__(self, \n                 email_service: NotificationService = Inject(\"email_service\"),\n                 sms_service: NotificationService = Inject(\"sms_service\")):\n        self.email_service = email_service\n        self.sms_service = sms_service\n\n    def register_user(self, email: str, phone: str):\n        # \uc0ac\uc6a9\uc790 \ub4f1\ub85d \ub85c\uc9c1\n        print(f\"Registering user: {email}\")\n\n        # \uc54c\ub9bc \uc11c\ube44\uc2a4 \uc0ac\uc6a9\n        self.email_service.send(\"Welcome!\", email)\n        self.sms_service.send(\"Welcome!\", phone)\n\n# \uc11c\ube44\uc2a4 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \uc0dd\uc131 \ubc0f \uc0ac\uc6a9\nregistry = ServiceRegistry()\nregistry.auto_discover(\"app.services\")  # \uc11c\ube44\uc2a4 \uc790\ub3d9 \ubc1c\uacac\n\n# \uc11c\ube44\uc2a4 \uc778\uc2a4\ud134\uc2a4 \uac00\uc838\uc624\uae30\nuser_service = registry.get(\"user_service\")\nuser_service.register_user(\"user@example.com\", \"+1234567890\")\n</code></pre>"},{"location":"api/core/registry/#_4","title":"\uc2a4\ucf54\ud504\uc640 \ub77c\uc774\ud504\uc0ac\uc774\ud074 \uad00\ub9ac","text":"<pre><code>from rfs.core.registry import Registry, Scope\nfrom enum import Enum\n\nclass ServiceScope(Enum):\n    SINGLETON = \"singleton\"\n    SCOPED = \"scoped\" \n    TRANSIENT = \"transient\"\n\n@Service(\"cache_service\", scope=ServiceScope.SINGLETON)\nclass CacheService:\n    def __init__(self):\n        self.cache = {}\n\n    def get(self, key: str):\n        return self.cache.get(key)\n\n    def set(self, key: str, value):\n        self.cache[key] = value\n\n@Service(\"request_service\", scope=ServiceScope.SCOPED)\nclass RequestService:\n    def __init__(self):\n        self.request_id = generate_request_id()\n\n    def get_request_id(self):\n        return self.request_id\n\n@Service(\"logger\", scope=ServiceScope.TRANSIENT)\nclass Logger:\n    def __init__(self, name: str = None):\n        self.name = name or \"default\"\n\n    def info(self, message: str):\n        print(f\"[{self.name}] INFO: {message}\")\n\n# \uc2a4\ucf54\ud504\ubcc4 \uc778\uc2a4\ud134\uc2a4 \uad00\ub9ac\nregistry = ServiceRegistry()\n\n# \uc2f1\uae00\ud1a4: \ud56d\uc0c1 \uac19\uc740 \uc778\uc2a4\ud134\uc2a4\ncache1 = registry.get(\"cache_service\")\ncache2 = registry.get(\"cache_service\")\nassert cache1 is cache2\n\n# \uc2a4\ucf54\ud504\ub4dc: \uc2a4\ucf54\ud504 \ub0b4\uc5d0\uc11c \uac19\uc740 \uc778\uc2a4\ud134\uc2a4\nwith registry.create_scope() as scope:\n    req1 = scope.get(\"request_service\")\n    req2 = scope.get(\"request_service\")\n    assert req1 is req2\n    assert req1.get_request_id() == req2.get_request_id()\n\n# \ud2b8\ub79c\uc9c0\uc5b8\ud2b8: \ud56d\uc0c1 \uc0c8\ub85c\uc6b4 \uc778\uc2a4\ud134\uc2a4\nlogger1 = registry.get(\"logger\")\nlogger2 = registry.get(\"logger\")\nassert logger1 is not logger2\n</code></pre>"},{"location":"api/core/registry/#_5","title":"\uc124\uc815 \uae30\ubc18 \uc758\uc874\uc131 \uc8fc\uc785","text":"<pre><code>from rfs.core.registry import ConfigurableRegistry\nfrom rfs.core.config import Config\n\nclass ServiceConfig(Config):\n    database_url: str\n    cache_ttl: int = 3600\n    notification_providers: List[str] = [\"email\", \"sms\"]\n\n@Service(\"data_service\")\nclass DataService:\n    def __init__(self, \n                 db_url: str = Inject(\"config.database_url\"),\n                 cache_ttl: int = Inject(\"config.cache_ttl\")):\n        self.db_url = db_url\n        self.cache_ttl = cache_ttl\n\n# \uc124\uc815 \uae30\ubc18 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\nconfig = ServiceConfig(\n    database_url=\"postgresql://localhost/mydb\",\n    cache_ttl=7200\n)\n\nregistry = ConfigurableRegistry(config)\ndata_service = registry.get(\"data_service\")\n\nprint(f\"Database URL: {data_service.db_url}\")\nprint(f\"Cache TTL: {data_service.cache_ttl}\")\n</code></pre>"},{"location":"api/core/registry/#_6","title":"\uc870\uac74\ubd80 \ub4f1\ub85d\uacfc \ud504\ub85c\ud30c\uc77c","text":"<pre><code>from rfs.core.registry import ConditionalRegistry\nfrom rfs.core.annotations import Profile, ConditionalOnProperty\n\n@Service(\"dev_database\")\n@Profile(\"development\")\nclass DevDatabaseService:\n    def connect(self):\n        return \"Connected to development database\"\n\n@Service(\"prod_database\") \n@Profile(\"production\")\nclass ProdDatabaseService:\n    def connect(self):\n        return \"Connected to production database\"\n\n@Service(\"feature_service\")\n@ConditionalOnProperty(\"features.advanced\", having_value=\"true\")\nclass AdvancedFeatureService:\n    def process(self):\n        return \"Processing with advanced features\"\n\n# \ud504\ub85c\ud30c\uc77c \uae30\ubc18 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\nregistry = ConditionalRegistry(active_profiles=[\"development\"])\n\n# \uac1c\ubc1c \ud504\ub85c\ud30c\uc77c\uc5d0\uc11c\ub9cc \ub4f1\ub85d\ub428\ndev_db = registry.get(\"dev_database\")  # \uc131\uacf5\ntry:\n    prod_db = registry.get(\"prod_database\")  # \uc2e4\ud328\nexcept ServiceNotFoundError:\n    print(\"Production database not available in dev profile\")\n\n# \uc18d\uc131 \uae30\ubc18 \uc870\uac74\ubd80 \ub4f1\ub85d\nregistry.set_property(\"features.advanced\", \"true\")\nfeature_service = registry.get(\"feature_service\")  # \uc131\uacf5\n</code></pre>"},{"location":"api/core/registry/#_7","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\uc758\uc874\uc131 \uc8fc\uc785 - DI \ud328\ud134 \uc0c1\uc138 \uc124\uba85</li> <li>\uc124\uc815 \uad00\ub9ac - \uc124\uc815 \uc5f0\ub3d9</li> <li>Core \uc5b4\ub178\ud14c\uc774\uc158 - \uc11c\ube44\uc2a4 \uc5b4\ub178\ud14c\uc774\uc158</li> </ul>"},{"location":"api/core/result/","title":"Result Pattern API","text":"<p>Result pattern API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud074\ub798\uc2a4: - <code>Result</code>: \uae30\ubcf8 Result \ubaa8\ub098\ub4dc \ud074\ub798\uc2a4 - <code>Success</code>: \uc131\uacf5 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ub294 \ud074\ub798\uc2a4 - <code>Failure</code>: \uc2e4\ud328 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ub294 \ud074\ub798\uc2a4</p>"},{"location":"api/core/result/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/core/result/#_2","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":"<pre><code>from rfs.core.result import Result, Success, Failure\n\ndef divide(a: float, b: float) -&gt; Result[float, str]:\n    \"\"\"\uc548\uc804\ud55c \ub098\ub217\uc148 \ud568\uc218\"\"\"\n    if b == 0:\n        return Failure(\"Division by zero\")\n    return Success(a / b)\n\n# \uc0ac\uc6a9\nresult = divide(10, 2)\nif result.is_success():\n    print(f\"Result: {result.unwrap()}\")  # Result: 5.0\nelse:\n    print(f\"Error: {result.unwrap_err()}\")\n</code></pre>"},{"location":"api/core/result/#_3","title":"\uccb4\uc774\ub2dd","text":"<pre><code>def validate_positive(x: float) -&gt; Result[float, str]:\n    if x &lt;= 0:\n        return Failure(\"Must be positive\")\n    return Success(x)\n\ndef square_root(x: float) -&gt; Result[float, str]:\n    import math\n    return Success(math.sqrt(x))\n\n# \uccb4\uc774\ub2dd\nresult = (\n    Success(16.0)\n    .bind(validate_positive)\n    .bind(square_root)\n    .map(lambda x: round(x, 2))\n)\n\nprint(result.unwrap())  # 4.0\n</code></pre>"},{"location":"api/core/result/#_4","title":"\uc5d0\ub7ec \ucc98\ub9ac","text":"<pre><code>from typing import Union\nfrom enum import Enum\n\nclass ValidationError(Enum):\n    EMPTY_INPUT = \"empty_input\"\n    INVALID_FORMAT = \"invalid_format\" \n    OUT_OF_RANGE = \"out_of_range\"\n\ndef validate_email(email: str) -&gt; Result[str, ValidationError]:\n    if not email:\n        return Failure(ValidationError.EMPTY_INPUT)\n\n    if \"@\" not in email:\n        return Failure(ValidationError.INVALID_FORMAT)\n\n    if len(email) &gt; 255:\n        return Failure(ValidationError.OUT_OF_RANGE)\n\n    return Success(email.lower())\n\n# \uc0ac\uc6a9\nresult = validate_email(\"user@example.com\")\nmatch result:\n    case Success(email):\n        print(f\"Valid email: {email}\")\n    case Failure(error):\n        print(f\"Validation error: {error.value}\")\n</code></pre>"},{"location":"api/core/result/#_5","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>\ud575\uc2ec \ud328\ud134 - Result \ud328\ud134 \uac1c\ub150 \uc124\uba85</li> <li>HOF \ubaa8\ub098\ub4dc - \ub2e4\ub978 \ubaa8\ub098\ub4dc \ud328\ud134</li> </ul>"},{"location":"api/hof/collections/","title":"HOF Collections API","text":"<p>Higher-Order Functions (HOF) collections API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud568\uc218: - <code>map_list</code>, <code>filter_list</code>: \ub9ac\uc2a4\ud2b8 \uc870\uc791 - <code>group_by</code>, <code>partition</code>: \uadf8\ub8f9\ud654 \ubc0f \ubd84\ud560 - <code>flatten</code>, <code>chunk</code>: \ud3c9\ud0c4\ud654 \ubc0f \ucc2d\ud06c\ud654</p>"},{"location":"api/hof/collections/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/hof/collections/#_2","title":"\ub9ac\uc2a4\ud2b8 \ubcc0\ud658 \ud568\uc218","text":"<pre><code>from rfs.hof.collections import map_list, filter_list, reduce_list\nfrom typing import List\n\n# map_list - \ub9ac\uc2a4\ud2b8\uc758 \uac01 \uc694\uc18c\uc5d0 \ud568\uc218 \uc801\uc6a9\nnumbers = [1, 2, 3, 4, 5]\nsquared = map_list(lambda x: x ** 2, numbers)\nprint(squared)  # [1, 4, 9, 16, 25]\n\n# \ubb38\uc790\uc5f4 \ubcc0\ud658\nnames = [\"alice\", \"bob\", \"charlie\"]\ncapitalized = map_list(str.capitalize, names)\nprint(capitalized)  # [\"Alice\", \"Bob\", \"Charlie\"]\n\n# filter_list - \uc870\uac74\uc5d0 \ub9de\ub294 \uc694\uc18c\ub9cc \ud544\ud130\ub9c1\neven_numbers = filter_list(lambda x: x % 2 == 0, numbers)\nprint(even_numbers)  # [2, 4]\n\n# \uae38\uc774 \uae30\uc900 \ud544\ud130\ub9c1\nlong_names = filter_list(lambda name: len(name) &gt; 3, names)\nprint(long_names)  # [\"alice\", \"charlie\"]\n\n# reduce_list - \ub9ac\uc2a4\ud2b8\ub97c \ub2e8\uc77c \uac12\uc73c\ub85c \ucd95\uc57d\ntotal = reduce_list(lambda acc, x: acc + x, 0, numbers)\nprint(total)  # 15\n\n# \ucd5c\ub300\uac12 \ucc3e\uae30\nmaximum = reduce_list(\n    lambda acc, x: x if x &gt; acc else acc,\n    float('-inf'),\n    numbers\n)\nprint(maximum)  # 5\n</code></pre>"},{"location":"api/hof/collections/#_3","title":"\uace0\uae09 \ub9ac\uc2a4\ud2b8 \uc870\uc791","text":"<pre><code>from rfs.hof.collections import (\n    take, drop, take_while, drop_while,\n    partition, group_by, chunk, flatten\n)\n\n# take / drop - \uc694\uc18c \uac00\uc838\uc624\uae30/\ubc84\ub9ac\uae30\ndata = list(range(10))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfirst_five = take(5, data)\nprint(first_five)  # [0, 1, 2, 3, 4]\n\nrest = drop(5, data)\nprint(rest)  # [5, 6, 7, 8, 9]\n\n# take_while / drop_while - \uc870\uac74\ubd80 \uac00\uc838\uc624\uae30/\ubc84\ub9ac\uae30\nless_than_five = take_while(lambda x: x &lt; 5, data)\nprint(less_than_five)  # [0, 1, 2, 3, 4]\n\nfrom_five = drop_while(lambda x: x &lt; 5, data)\nprint(from_five)  # [5, 6, 7, 8, 9]\n\n# partition - \uc870\uac74\uc5d0 \ub530\ub77c \ubd84\ud560\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens, odds = partition(lambda x: x % 2 == 0, numbers)\nprint(evens)  # [2, 4, 6, 8, 10]\nprint(odds)   # [1, 3, 5, 7, 9]\n\n# group_by - \ud0a4 \ud568\uc218\ub85c \uadf8\ub8f9\ud654\nwords = [\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\"]\nby_first_letter = group_by(lambda word: word[0], words)\nprint(by_first_letter)\n# {'a': ['apple', 'apricot'], 'b': ['banana', 'blueberry'], 'c': ['cherry']}\n\n# chunk - \uc9c0\uc815\ub41c \ud06c\uae30\ub85c \ubd84\ud560\ndata = list(range(12))\nchunks = chunk(3, data)\nprint(chunks)  # [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]]\n\n# flatten - \uc911\ucca9\ub41c \ub9ac\uc2a4\ud2b8 \ud3c9\ud0c4\ud654\nnested = [[1, 2], [3, 4], [5, 6]]\nflat = flatten(nested)\nprint(flat)  # [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"api/hof/collections/#_4","title":"\ub515\uc154\ub108\ub9ac \uc870\uc791","text":"<pre><code>from rfs.hof.collections import (\n    map_dict, filter_dict, merge_dicts,\n    pick, omit, transform_keys, transform_values\n)\n\n# map_dict - \ub515\uc154\ub108\ub9ac \uac12\uc5d0 \ud568\uc218 \uc801\uc6a9\nscores = {\"alice\": 85, \"bob\": 92, \"charlie\": 78}\npercentages = map_dict(lambda score: f\"{score}%\", scores)\nprint(percentages)  # {\"alice\": \"85%\", \"bob\": \"92%\", \"charlie\": \"78%\"}\n\n# filter_dict - \uc870\uac74\uc5d0 \ub9de\ub294 \ud56d\ubaa9\ub9cc \ud544\ud130\ub9c1\nhigh_scores = filter_dict(lambda k, v: v &gt;= 80, scores)\nprint(high_scores)  # {\"alice\": 85, \"bob\": 92}\n\n# merge_dicts - \uc5ec\ub7ec \ub515\uc154\ub108\ub9ac \ubcd1\ud569\ndict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\ndict3 = {\"c\": 5, \"d\": 6}\n\nmerged = merge_dicts(dict1, dict2, dict3)\nprint(merged)  # {\"a\": 1, \"b\": 3, \"c\": 5, \"d\": 6} (\ub098\uc911 \uac12\uc774 \uc6b0\uc120)\n\n# pick / omit - \ud2b9\uc815 \ud0a4\ub9cc \uc120\ud0dd/\uc81c\uc678\ndata = {\"name\": \"Alice\", \"age\": 30, \"email\": \"alice@example.com\", \"password\": \"secret\"}\n\npublic_data = pick([\"name\", \"age\"], data)\nprint(public_data)  # {\"name\": \"Alice\", \"age\": 30}\n\nsafe_data = omit([\"password\"], data)\nprint(safe_data)  # {\"name\": \"Alice\", \"age\": 30, \"email\": \"alice@example.com\"}\n\n# transform_keys / transform_values - \ud0a4/\uac12 \ubcc0\ud658\nuser_data = {\"first_name\": \"Alice\", \"last_name\": \"Smith\", \"user_age\": 30}\n\n# \ud0a4\ub97c \uce74\uba5c\ucf00\uc774\uc2a4\ub85c \ubcc0\ud658\ncamel_case = transform_keys(lambda k: k.replace(\"_\", \"\").lower(), user_data)\nprint(camel_case)  # {\"firstname\": \"Alice\", \"lastname\": \"Smith\", \"userage\": 30}\n\n# \ubaa8\ub4e0 \uac12\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\nstring_values = transform_values(str, user_data)\nprint(string_values)  # {\"first_name\": \"Alice\", \"last_name\": \"Smith\", \"user_age\": \"30\"}\n</code></pre>"},{"location":"api/hof/collections/#_5","title":"\uc9d1\ud569 \uc5f0\uc0b0","text":"<pre><code>from rfs.hof.collections import (\n    union, intersection, difference, symmetric_difference,\n    is_subset, is_superset, cartesian_product\n)\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\nset_c = {1, 2, 3}\n\n# \uc9d1\ud569 \uc5f0\uc0b0\nunion_result = union(set_a, set_b)\nprint(union_result)  # {1, 2, 3, 4, 5, 6, 7, 8}\n\nintersection_result = intersection(set_a, set_b)\nprint(intersection_result)  # {4, 5}\n\ndifference_result = difference(set_a, set_b)\nprint(difference_result)  # {1, 2, 3}\n\nsym_diff = symmetric_difference(set_a, set_b)\nprint(sym_diff)  # {1, 2, 3, 6, 7, 8}\n\n# \uc9d1\ud569 \uad00\uacc4 \ud655\uc778\nprint(is_subset(set_c, set_a))    # True\nprint(is_superset(set_a, set_c))  # True\n\n# \uce74\ub974\ud14c\uc9c0\uc548 \uacf1\ncolors = [\"red\", \"blue\"]\nsizes = [\"S\", \"M\", \"L\"]\nproducts = cartesian_product(colors, sizes)\nprint(list(products))  # [(\"red\", \"S\"), (\"red\", \"M\"), (\"red\", \"L\"), (\"blue\", \"S\"), (\"blue\", \"M\"), (\"blue\", \"L\")]\n</code></pre>"},{"location":"api/hof/collections/#_6","title":"\ud568\uc218\ud615 \uceec\ub809\uc158 \uc5f0\uc0b0\uc790","text":"<pre><code>from rfs.hof.collections import (\n    any_match, all_match, none_match,\n    find, find_index, count_where,\n    max_by, min_by, sort_by\n)\n\nnumbers = [1, 3, 5, 7, 8, 10, 12]\n\n# \uc870\uac74 \ub9e4\uce6d\nhas_even = any_match(lambda x: x % 2 == 0, numbers)\nprint(has_even)  # True\n\nall_positive = all_match(lambda x: x &gt; 0, numbers)\nprint(all_positive)  # True\n\nno_negative = none_match(lambda x: x &lt; 0, numbers)\nprint(no_negative)  # True\n\n# \uc694\uc18c \ucc3e\uae30\nfirst_even = find(lambda x: x % 2 == 0, numbers)\nprint(first_even)  # 8\n\nfirst_even_index = find_index(lambda x: x % 2 == 0, numbers)\nprint(first_even_index)  # 4\n\neven_count = count_where(lambda x: x % 2 == 0, numbers)\nprint(even_count)  # 3\n\n# \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub85c \uc608\uc81c\nusers = [\n    {\"name\": \"Alice\", \"age\": 30, \"score\": 85},\n    {\"name\": \"Bob\", \"age\": 25, \"score\": 92},\n    {\"name\": \"Charlie\", \"age\": 35, \"score\": 78}\n]\n\n# \ucd5c\ub300/\ucd5c\uc18c\uac12 \ucc3e\uae30 (\ud0a4 \ud568\uc218 \uae30\uc900)\nyoungest = min_by(lambda user: user[\"age\"], users)\nprint(youngest)  # {\"name\": \"Bob\", \"age\": 25, \"score\": 92}\n\nhighest_score = max_by(lambda user: user[\"score\"], users)\nprint(highest_score)  # {\"name\": \"Bob\", \"age\": 25, \"score\": 92}\n\n# \uc815\ub82c\nby_age = sort_by(lambda user: user[\"age\"], users)\nprint([user[\"name\"] for user in by_age])  # [\"Bob\", \"Alice\", \"Charlie\"]\n\nby_score_desc = sort_by(lambda user: -user[\"score\"], users)\nprint([user[\"name\"] for user in by_score_desc])  # [\"Bob\", \"Alice\", \"Charlie\"]\n</code></pre>"},{"location":"api/hof/collections/#_7","title":"\uc9c0\uc5f0 \ud3c9\uac00\uc640 \uc774\ud130\ub808\uc774\ud130","text":"<pre><code>from rfs.hof.collections import (\n    lazy_map, lazy_filter, lazy_take,\n    iterate, cycle, repeat, range_infinite\n)\n\n# lazy_map - \uc9c0\uc5f0 \ud3c9\uac00 \ub9f5\ndef expensive_computation(x):\n    print(f\"Computing {x}\")\n    return x ** 2\n\nnumbers = [1, 2, 3, 4, 5]\nlazy_squares = lazy_map(expensive_computation, numbers)\n\n# \uc544\uc9c1 \uacc4\uc0b0\ub418\uc9c0 \uc54a\uc74c\nprint(\"Created lazy iterator\")\n\n# \uccab 3\uac1c\ub9cc \uc0ac\uc6a9\nfirst_three = list(lazy_take(3, lazy_squares))\nprint(first_three)  # [1, 4, 9] (1, 2, 3\ub9cc \uacc4\uc0b0\ub428)\n\n# lazy_filter - \uc9c0\uc5f0 \ud3c9\uac00 \ud544\ud130\nlarge_numbers = range(1000000)  # \ud070 \ub370\uc774\ud130\uc14b\nlazy_evens = lazy_filter(lambda x: x % 2 == 0, large_numbers)\nfirst_five_evens = list(lazy_take(5, lazy_evens))\nprint(first_five_evens)  # [0, 2, 4, 6, 8]\n\n# iterate - \ud568\uc218\ub97c \ubc18\ubcf5 \uc801\uc6a9\ud558\uc5ec \ubb34\ud55c \uc2dc\ud000\uc2a4 \uc0dd\uc131\npowers_of_two = iterate(lambda x: x * 2, 1)\nfirst_ten_powers = list(lazy_take(10, powers_of_two))\nprint(first_ten_powers)  # [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n\n# cycle - \uceec\ub809\uc158\uc744 \ubb34\ud55c \ubc18\ubcf5\ncolors = [\"red\", \"green\", \"blue\"]\ncolor_cycle = cycle(colors)\nfirst_seven_colors = list(lazy_take(7, color_cycle))\nprint(first_seven_colors)  # [\"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\"]\n\n# repeat - \uac12\uc744 \ubb34\ud55c \ubc18\ubcf5\ndefault_value = repeat(42)\nfive_defaults = list(lazy_take(5, default_value))\nprint(five_defaults)  # [42, 42, 42, 42, 42]\n</code></pre>"},{"location":"api/hof/collections/#_8","title":"\ud2b8\ub79c\uc2a4\ub4c0\uc11c \ud328\ud134","text":"<pre><code>from rfs.hof.collections import transduce, compose_transducers\n\n# \ud2b8\ub79c\uc2a4\ub4c0\uc11c \uc815\uc758\ndef mapping(transform_fn):\n    def transducer(reducing_fn):\n        def reducer(acc, item):\n            transformed = transform_fn(item)\n            return reducing_fn(acc, transformed)\n        return reducer\n    return transducer\n\ndef filtering(predicate_fn):\n    def transducer(reducing_fn):\n        def reducer(acc, item):\n            if predicate_fn(item):\n                return reducing_fn(acc, item)\n            return acc\n        return reducer\n    return transducer\n\n# \uceec\ub809\uc158 \ucc98\ub9ac\ndata = range(1, 11)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# \ud2b8\ub79c\uc2a4\ub4c0\uc11c \ud569\uc131\nxform = compose_transducers(\n    filtering(lambda x: x % 2 == 0),  # \uc9dd\uc218\ub9cc\n    mapping(lambda x: x ** 2),        # \uc81c\uacf1\n    filtering(lambda x: x &gt; 10)       # 10\ubcf4\ub2e4 \ud070 \uac83\ub9cc\n)\n\n# \ud2b8\ub79c\uc2a4\ub4c0\uc11c \uc801\uc6a9\nresult = transduce(xform, list, data)\nprint(result)  # [16, 36, 64, 100]\n\n# \ub2e4\ub978 reducing \ud568\uc218 \uc0ac\uc6a9\nsum_result = transduce(xform, lambda acc, x: acc + x, 0, data)\nprint(sum_result)  # 216 (16 + 36 + 64 + 100)\n</code></pre>"},{"location":"api/hof/collections/#_9","title":"\uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c: \ub370\uc774\ud130 \ubd84\uc11d","text":"<pre><code>from rfs.hof.collections import *\nimport json\nfrom datetime import datetime\n\n# \uc0d8\ud50c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\nusers = [\n    {\"id\": 1, \"name\": \"Alice\", \"age\": 28, \"department\": \"Engineering\", \"salary\": 75000, \"join_date\": \"2020-01-15\"},\n    {\"id\": 2, \"name\": \"Bob\", \"age\": 32, \"department\": \"Engineering\", \"salary\": 85000, \"join_date\": \"2019-03-20\"},\n    {\"id\": 3, \"name\": \"Charlie\", \"age\": 25, \"department\": \"Marketing\", \"salary\": 55000, \"join_date\": \"2021-06-10\"},\n    {\"id\": 4, \"name\": \"Diana\", \"age\": 35, \"department\": \"Engineering\", \"salary\": 95000, \"join_date\": \"2018-08-05\"},\n    {\"id\": 5, \"name\": \"Eve\", \"age\": 29, \"department\": \"Sales\", \"salary\": 60000, \"join_date\": \"2020-11-12\"}\n]\n\n# \ub370\uc774\ud130 \ubd84\uc11d \ud30c\uc774\ud504\ub77c\uc778\ndef analyze_users(users):\n    # \ubd80\uc11c\ubcc4 \uadf8\ub8f9\ud654\n    by_department = group_by(lambda u: u[\"department\"], users)\n\n    # \uac01 \ubd80\uc11c\ubcc4 \ud1b5\uacc4\n    department_stats = map_dict(\n        lambda employees: {\n            \"count\": len(employees),\n            \"avg_salary\": sum(emp[\"salary\"] for emp in employees) / len(employees),\n            \"avg_age\": sum(emp[\"age\"] for emp in employees) / len(employees),\n            \"total_salary\": sum(emp[\"salary\"] for emp in employees)\n        },\n        by_department\n    )\n\n    # \uace0\uc5f0\ubd09\uc790 \ucc3e\uae30 (\uc0c1\uc704 20%)\n    salary_threshold = sorted([u[\"salary\"] for u in users], reverse=True)[1]  # \uc0c1\uc704 20%\n    high_earners = filter_list(lambda u: u[\"salary\"] &gt;= salary_threshold, users)\n\n    # \uacbd\ub825\ubcc4 \uadf8\ub8f9\ud654 (\uc785\uc0ac\ub144\ub3c4 \uae30\uc900)\n    def get_tenure_group(user):\n        join_year = int(user[\"join_date\"][:4])\n        if join_year &lt;= 2018:\n            return \"Senior (2018 or earlier)\"\n        elif join_year &lt;= 2020:\n            return \"Mid (2019-2020)\"\n        else:\n            return \"Junior (2021+)\"\n\n    by_tenure = group_by(get_tenure_group, users)\n\n    return {\n        \"total_employees\": len(users),\n        \"department_stats\": department_stats,\n        \"high_earners\": [pick([\"name\", \"department\", \"salary\"], u) for u in high_earners],\n        \"tenure_distribution\": map_dict(len, by_tenure)\n    }\n\n# \ubd84\uc11d \uc2e4\ud589\nanalysis = analyze_users(users)\nprint(json.dumps(analysis, indent=2))\n</code></pre>"},{"location":"api/hof/collections/#_10","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>HOF Core - \ud575\uc2ec \uace0\ucc28 \ud568\uc218\ub4e4</li> <li>HOF Monads - \ubaa8\ub098\ub4dc \ud328\ud134 \uad6c\ud604</li> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d - \ud568\uc218\ud615 \ud328\ud134 \uac1c\ub150</li> </ul>"},{"location":"api/hof/core/","title":"HOF Core Functions API","text":"<p>Higher-Order Functions (HOF) core API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud568\uc218: - <code>compose</code>, <code>pipe</code>: \ud568\uc218 \ud569\uc131 - <code>curry</code>, <code>partial</code>: \ucee4\ub9c1 \ubc0f \ubd80\ubd84 \uc801\uc6a9 - <code>memoize</code>: \uacb0\uacfc \uce90\uc2f1</p>"},{"location":"api/hof/core/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/hof/core/#composition","title":"\ud568\uc218 \ud569\uc131 (Composition)","text":"<pre><code>from rfs.hof import compose, pipe\n\n# compose - \ud568\uc218\ub4e4\uc744 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ud569\uc131\ndef add_one(x: int) -&gt; int:\n    return x + 1\n\ndef multiply_by_two(x: int) -&gt; int:\n    return x * 2\n\ndef to_string(x: int) -&gt; str:\n    return str(x)\n\n# \ud568\uc218 \ud569\uc131: f(g(h(x)))\ncomposed = compose(to_string, multiply_by_two, add_one)\nresult = composed(5)  # str(((5 + 1) * 2)) = \"12\"\nprint(result)\n\n# pipe - \ud568\uc218\ub4e4\uc744 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud30c\uc774\ud504\npiped = pipe(\n    add_one,\n    multiply_by_two,\n    to_string\n)\nresult = piped(5)  # \uac19\uc740 \uacb0\uacfc: \"12\"\nprint(result)\n\n# \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \ub370\uc774\ud130 \ubcc0\ud658 \ud30c\uc774\ud504\ub77c\uc778\nfrom typing import List, Dict\n\ndef parse_csv_line(line: str) -&gt; List[str]:\n    return line.strip().split(',')\n\ndef to_user_dict(fields: List[str]) -&gt; Dict[str, str]:\n    return {\n        'name': fields[0],\n        'email': fields[1],\n        'age': fields[2]\n    }\n\ndef validate_user(user: Dict[str, str]) -&gt; Dict[str, str]:\n    if '@' not in user['email']:\n        raise ValueError(f\"Invalid email: {user['email']}\")\n    return user\n\n# CSV \ub77c\uc778\uc744 \uac80\uc99d\ub41c \uc0ac\uc6a9\uc790 \ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658\ncsv_to_user = pipe(\n    parse_csv_line,\n    to_user_dict,\n    validate_user\n)\n\nuser = csv_to_user(\"John Doe,john@example.com,30\")\nprint(user)  # {'name': 'John Doe', 'email': 'john@example.com', 'age': '30'}\n</code></pre>"},{"location":"api/hof/core/#currying","title":"\ucee4\ub9c1 (Currying)","text":"<pre><code>from rfs.hof import curry, partial\n\n# curry - \ud568\uc218\ub97c \ucee4\ub9ac\ub41c \ubc84\uc804\uc73c\ub85c \ubcc0\ud658\n@curry\ndef add_three(a: int, b: int, c: int) -&gt; int:\n    return a + b + c\n\n# \ubd80\ubd84 \uc801\uc6a9\nadd_10_and = add_three(10)  # a=10\uc73c\ub85c \ubd80\ubd84 \uc801\uc6a9\nadd_10_20_and = add_10_and(20)  # b=20\uc73c\ub85c \ubd80\ubd84 \uc801\uc6a9\nresult = add_10_20_and(5)  # c=5\ub85c \uc644\uc804 \uc801\uc6a9\nprint(result)  # 35\n\n# \ud55c \ubc88\uc5d0 \uc5ec\ub7ec \uc778\uc790 \uc801\uc6a9\nresult = add_three(10, 20, 5)  # \uc9c1\uc811 \uc801\uc6a9\ub3c4 \uac00\ub2a5\nprint(result)  # 35\n\n# partial - \ubd80\ubd84 \uc801\uc6a9\uc744 \uc704\ud55c \uc720\ud2f8\ub9ac\ud2f0\ndef greet(greeting: str, name: str, punctuation: str = \"!\") -&gt; str:\n    return f\"{greeting}, {name}{punctuation}\"\n\n# \uc778\uc0ac\ub9d0\uc744 \ubbf8\ub9ac \uc124\uc815\nsay_hello = partial(greet, \"Hello\")\nsay_goodbye = partial(greet, \"Goodbye\", punctuation=\".\")\n\nprint(say_hello(\"Alice\"))      # \"Hello, Alice!\"\nprint(say_goodbye(\"Bob\"))      # \"Goodbye, Bob.\"\n\n# \uc2e4\uc6a9\uc801\uc778 \ucee4\ub9c1 \uc608\uc81c: \uc124\uc815 \uae30\ubc18 \ud568\uc218\n@curry\ndef make_http_request(base_url: str, headers: dict, endpoint: str, params: dict = None):\n    # HTTP \uc694\uccad \uc2dc\ubbac\ub808\uc774\uc158\n    url = f\"{base_url}/{endpoint}\"\n    return {\n        'url': url,\n        'headers': headers,\n        'params': params or {}\n    }\n\n# API \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uc815\napi_headers = {'Authorization': 'Bearer token123', 'Content-Type': 'application/json'}\napi_client = make_http_request('https://api.example.com', api_headers)\n\n# \ud2b9\uc815 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ud568\uc218\ub4e4\nget_users = api_client('users')\nget_posts = api_client('posts')\n\nusers_request = get_users({'page': 1, 'limit': 10})\nposts_request = get_posts({'author_id': 123})\n</code></pre>"},{"location":"api/hof/core/#_2","title":"\ud568\uc218 \ubcc0\ud658 \uc720\ud2f8\ub9ac\ud2f0","text":"<pre><code>from rfs.hof import flip, const, identity, memoize\n\n# flip - \uc778\uc790 \uc21c\uc11c\ub97c \ub4a4\ubc14\uafb8\uae30\ndef divide(a: float, b: float) -&gt; float:\n    return a / b\n\n# \uc77c\ubc18\uc801\uc778 \ub098\ub217\uc148\nprint(divide(10, 2))  # 5.0\n\n# \uc21c\uc11c\ub97c \ub4a4\ubc14\uafbc \ub098\ub217\uc148\ndivide_flipped = flip(divide)\nprint(divide_flipped(2, 10))  # 5.0 (\uc778\uc790\uac00 \ub4a4\ubc14\ub01c)\n\n# const - \ud56d\uc0c1 \uac19\uc740 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\nalways_42 = const(42)\nprint(always_42())      # 42\nprint(always_42(1, 2))  # 42 (\uc778\uc790 \ubb34\uc2dc)\n\n# identity - \uc785\ub825\uac12\uc744 \uadf8\ub300\ub85c \ubc18\ud658\nprint(identity(5))        # 5\nprint(identity(\"hello\"))  # \"hello\"\n\n# memoize - \ud568\uc218 \uacb0\uacfc \uce90\uc2f1\n@memoize\ndef fibonacci(n: int) -&gt; int:\n    if n &lt;= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# \uccab \ubc88\uc9f8 \ud638\ucd9c\uc740 \uacc4\uc0b0\ud568\nresult1 = fibonacci(30)  # \ub290\ub9bc\n\n# \ub450 \ubc88\uc9f8 \ud638\ucd9c\uc740 \uce90\uc2dc\ub41c \uacb0\uacfc \uc0ac\uc6a9\nresult2 = fibonacci(30)  # \ube60\ub984\nprint(result1 == result2)  # True\n\n# \uce90\uc2dc \uc0c1\ud0dc \ud655\uc778\nprint(f\"Cache size: {fibonacci.cache_info().currsize}\")\n</code></pre>"},{"location":"api/hof/core/#_3","title":"\ud568\uc218 \uacb0\ud569 \ud328\ud134","text":"<pre><code>from rfs.hof import apply, tap, when, unless\n\n# apply - \ud568\uc218\ub97c \uac12\uc5d0 \uc801\uc6a9\ndef square(x: int) -&gt; int:\n    return x * x\n\nresult = apply(square, 5)\nprint(result)  # 25\n\n# \uc5ec\ub7ec \ud568\uc218\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uc801\uc6a9\ndef double(x: int) -&gt; int:\n    return x * 2\n\ndef add_ten(x: int) -&gt; int:\n    return x + 10\n\ntransforms = [square, double, add_ten]\nresult = 5\nfor transform in transforms:\n    result = apply(transform, result)\nprint(result)  # ((5\u00b2 * 2) + 10) = 60\n\n# tap - \ubd80\uc218 \ud6a8\uacfc\ub97c \uc704\ud55c \ud568\uc218 (\uac12\uc740 \uadf8\ub300\ub85c \ud1b5\uacfc)\ndef log_value(x):\n    print(f\"Current value: {x}\")\n    return x\n\nresult = pipe(\n    lambda x: x + 1,\n    tap(log_value),  # \uac12\uc744 \ub85c\uae45\ud558\uc9c0\ub9cc \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc74c\n    lambda x: x * 2,\n    tap(log_value)\n)(5)\n# \ucd9c\ub825:\n# Current value: 6\n# Current value: 12\nprint(f\"Final result: {result}\")  # 12\n\n# when/unless - \uc870\uac74\ubd80 \ud568\uc218 \uc801\uc6a9\ndef is_even(x: int) -&gt; bool:\n    return x % 2 == 0\n\ndef halve(x: int) -&gt; int:\n    return x // 2\n\n# \uc9dd\uc218\uc77c \ub54c\ub9cc \ubc18\uc73c\ub85c \ub098\ub204\uae30\nconditional_halve = when(is_even, halve)\nprint(conditional_halve(8))  # 4 (\uc9dd\uc218\uc774\ubbc0\ub85c halve \uc801\uc6a9)\nprint(conditional_halve(7))  # 7 (\ud640\uc218\uc774\ubbc0\ub85c \uadf8\ub300\ub85c)\n\n# \uc9dd\uc218\uac00 \uc544\ub2d0 \ub54c\ub9cc \ub450 \ubc30\ub85c \ub9cc\ub4e4\uae30\nconditional_double = unless(is_even, double)\nprint(conditional_double(7))  # 14 (\ud640\uc218\uc774\ubbc0\ub85c double \uc801\uc6a9)\nprint(conditional_double(8))  # 8 (\uc9dd\uc218\uc774\ubbc0\ub85c \uadf8\ub300\ub85c)\n</code></pre>"},{"location":"api/hof/core/#_4","title":"\uace0\ucc28 \ud568\uc218 \ud328\ud134","text":"<pre><code>from rfs.hof import bifunctor, contramap, fmap\nfrom typing import Tuple, Callable\n\n# bifunctor - \ub450 \uac1c\uc758 \ud0c0\uc785 \ud30c\ub77c\ubbf8\ud130\ub97c \uac00\uc9c4 \ud568\uc218\uc5d0 \ub3d9\uc2dc \uc801\uc6a9\ndef process_pair(f: Callable, g: Callable, pair: Tuple):\n    return bifunctor(f, g, pair)\n\npair = (5, \"hello\")\nresult = process_pair(\n    lambda x: x * 2,      # \uccab \ubc88\uc9f8 \uc694\uc18c\uc5d0 \uc801\uc6a9\n    lambda s: s.upper(),  # \ub450 \ubc88\uc9f8 \uc694\uc18c\uc5d0 \uc801\uc6a9\n    pair\n)\nprint(result)  # (10, \"HELLO\")\n\n# contramap - \uc785\ub825\uc744 \ubcc0\ud658\ud55c \ud6c4 \ud568\uc218 \uc801\uc6a9\ndef string_length(s: str) -&gt; int:\n    return len(s)\n\n# \uc22b\uc790\ub97c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud55c \ud6c4 \uae38\uc774 \uacc4\uc0b0\nnumber_to_length = contramap(str, string_length)\nresult = number_to_length(12345)\nprint(result)  # 5\n\n# fmap - \ucee8\ud14c\uc774\ub108 \ub0b4\ubd80\uc758 \uac12\uc5d0 \ud568\uc218 \uc801\uc6a9\nfrom typing import Optional\n\ndef safe_divide(a: float, b: float) -&gt; Optional[float]:\n    return a / b if b != 0 else None\n\n# Optional \ub0b4\ubd80 \uac12\uc5d0 \ud568\uc218 \uc801\uc6a9\ndef double_if_exists(optional_value: Optional[float]) -&gt; Optional[float]:\n    return fmap(lambda x: x * 2, optional_value)\n\nresult1 = double_if_exists(safe_divide(10, 2))  # Some(10.0)\nresult2 = double_if_exists(safe_divide(10, 0))  # None\nprint(result1, result2)\n</code></pre>"},{"location":"api/hof/core/#_5","title":"\uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c: \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778","text":"<pre><code>from rfs.hof import pipe, curry, memoize, when\nimport json\nfrom typing import Dict, List\n\n# \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\n@memoize\ndef fetch_user_data(user_id: str) -&gt; Dict:\n    # \uc2e4\uc81c\ub85c\ub294 DB\ub098 API\uc5d0\uc11c \uac00\uc838\uc634\n    return {\n        'id': user_id,\n        'name': f'User {user_id}',\n        'email': f'user{user_id}@example.com',\n        'preferences': {'notifications': True, 'theme': 'dark'}\n    }\n\n@curry\ndef transform_user(formatter: Callable, validator: Callable, user: Dict) -&gt; Dict:\n    return pipe(\n        formatter,\n        validator,\n        when(lambda u: u.get('valid', True), \n             lambda u: {**u, 'processed': True})\n    )(user)\n\ndef format_user(user: Dict) -&gt; Dict:\n    return {\n        **user,\n        'display_name': user['name'].title(),\n        'email_domain': user['email'].split('@')[1]\n    }\n\ndef validate_user(user: Dict) -&gt; Dict:\n    is_valid = (\n        '@' in user['email'] and\n        len(user['name']) &gt; 0 and\n        'preferences' in user\n    )\n    return {**user, 'valid': is_valid}\n\n# \uc0ac\uc6a9\uc790 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\nprocess_user = pipe(\n    fetch_user_data,\n    transform_user(format_user, validate_user)\n)\n\n# \uc0ac\uc6a9\nprocessed_user = process_user('123')\nprint(json.dumps(processed_user, indent=2))\n</code></pre>"},{"location":"api/hof/core/#_6","title":"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud328\ud134","text":"<pre><code>from rfs.hof import debounce, throttle, once\nimport asyncio\nimport time\n\n# debounce - \uc5f0\uc18d \ud638\ucd9c\uc744 \uc9c0\uc5f0\uc2dc\ucf1c \ub9c8\uc9c0\ub9c9 \ud638\ucd9c\ub9cc \uc2e4\ud589\n@debounce(delay=1.0)\ndef search_api(query: str):\n    print(f\"Searching for: {query}\")\n    return f\"Results for {query}\"\n\n# \ube60\ub978 \uc5f0\uc18d \ud638\ucd9c\nsearch_api(\"python\")\nsearch_api(\"pytho\")  \nsearch_api(\"python\")  # \uc774\uac83\ub9cc 1\ucd08 \ud6c4 \uc2e4\ud589\ub428\n\n# throttle - \uc9c0\uc815\ub41c \uac04\uaca9\uc73c\ub85c\ub9cc \ud568\uc218 \uc2e4\ud589\n@throttle(interval=2.0)\ndef log_event(event: str):\n    print(f\"[{time.time():.2f}] Event: {event}\")\n\n# \uc5f0\uc18d \ud638\ucd9c\ud574\ub3c4 2\ucd08 \uac04\uaca9\uc73c\ub85c\ub9cc \uc2e4\ud589\nfor i in range(5):\n    log_event(f\"Event {i}\")\n    time.sleep(0.5)\n\n# once - \ud55c \ubc88\ub9cc \uc2e4\ud589\ub418\ub294 \ud568\uc218\n@once\ndef initialize_system():\n    print(\"System initialized\")\n    return \"initialization_complete\"\n\n# \uc5ec\ub7ec \ubc88 \ud638\ucd9c\ud574\ub3c4 \ud55c \ubc88\ub9cc \uc2e4\ud589\nresult1 = initialize_system()  # \"System initialized\" \ucd9c\ub825\nresult2 = initialize_system()  # \ucd9c\ub825 \uc5c6\uc74c, \uce90\uc2dc\ub41c \uacb0\uacfc \ubc18\ud658\nprint(result1 == result2)  # True\n</code></pre>"},{"location":"api/hof/core/#_7","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>HOF Collections - \uceec\ub809\uc158 \ucc98\ub9ac \ud568\uc218\ub4e4</li> <li>HOF Monads - \ubaa8\ub098\ub4dc \ud328\ud134 \uad6c\ud604</li> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d - \ud568\uc218\ud615 \ud328\ud134 \uac1c\ub150</li> </ul>"},{"location":"api/hof/monads/","title":"HOF Monads API","text":"<p>Higher-Order Functions (HOF) monads API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ubaa8\ub098\ub4dc: - <code>Maybe</code>: \uc120\ud0dd\uc801 \uac12 \ubaa8\ub098\ub4dc (Some/Nothing) - <code>Either</code>: \uc131\uacf5/\uc2e4\ud328 \ubaa8\ub098\ub4dc (Left/Right) - <code>IO</code>: \ub610\ub294 \ubd80\uc218 \ud6a8\uacfc \ubaa8\ub098\ub4dc</p>"},{"location":"api/hof/monads/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/hof/monads/#maybe","title":"Maybe \ubaa8\ub098\ub4dc","text":"<pre><code>from rfs.hof.monads import Maybe, Some, Nothing\n\n# \uac12\uc774 \uc788\ub294 \uacbd\uc6b0\nmaybe_value = Some(42)\nprint(maybe_value.is_some())  # True\nprint(maybe_value.is_nothing())  # False\nprint(maybe_value.get())  # 42\n\n# \uac12\uc774 \uc5c6\ub294 \uacbd\uc6b0\nmaybe_empty = Nothing()\nprint(maybe_empty.is_some())  # False\nprint(maybe_empty.is_nothing())  # True\n\n# \uc548\uc804\ud55c \uac12 \ucd94\ucd9c\nprint(maybe_value.get_or_else(0))  # 42\nprint(maybe_empty.get_or_else(0))   # 0\n\n# map\uc744 \ud1b5\ud55c \ubcc0\ud658\ndoubled = maybe_value.map(lambda x: x * 2)\nprint(doubled.get())  # 84\n\n# Nothing\uc5d0 map\uc744 \uc801\uc6a9\ud558\uba74 Nothing \ubc18\ud658\nnothing_doubled = maybe_empty.map(lambda x: x * 2)\nprint(nothing_doubled.is_nothing())  # True\n\n# flatMap\uc73c\ub85c \uccb4\uc774\ub2dd\ndef safe_divide(x: int, y: int) -&gt; Maybe[float]:\n    if y == 0:\n        return Nothing()\n    return Some(x / y)\n\nresult = (\n    Some(10)\n    .flat_map(lambda x: safe_divide(x, 2))\n    .map(lambda x: round(x, 2))\n)\nprint(result.get())  # 5.0\n\n# \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uc5f0\uc0b0 \uccb4\uc774\ub2dd\nunsafe_result = (\n    Some(10)\n    .flat_map(lambda x: safe_divide(x, 0))  # Nothing \ubc18\ud658\n    .map(lambda x: x * 100)  # \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c\n)\nprint(unsafe_result.is_nothing())  # True\n</code></pre>"},{"location":"api/hof/monads/#maybe-null","title":"Maybe\ub97c \ud65c\uc6a9\ud55c null \uc548\uc804\uc131","text":"<pre><code>from rfs.hof.monads import Maybe, Some, Nothing\nfrom typing import Dict, Optional\n\ndef find_user(user_id: int) -&gt; Maybe[Dict]:\n    \"\"\"\uc0ac\uc6a9\uc790\ub97c \ucc3e\ub294 \ud568\uc218 (\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc2dc\ubbac\ub808\uc774\uc158)\"\"\"\n    users = {\n        1: {\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"},\n        2: {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\"}\n    }\n\n    if user_id in users:\n        return Some(users[user_id])\n    return Nothing()\n\ndef get_user_email(user: Dict) -&gt; Maybe[str]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc774\uba54\uc77c \ucd94\ucd9c\"\"\"\n    if \"email\" in user:\n        return Some(user[\"email\"])\n    return Nothing()\n\ndef validate_email(email: str) -&gt; Maybe[str]:\n    \"\"\"\uc774\uba54\uc77c \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    if \"@\" in email and \".\" in email:\n        return Some(email)\n    return Nothing()\n\n# \uc548\uc804\ud55c \uc0ac\uc6a9\uc790 \uc774\uba54\uc77c \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\ndef process_user_email(user_id: int) -&gt; str:\n    result = (\n        find_user(user_id)\n        .flat_map(get_user_email)\n        .flat_map(validate_email)\n        .map(lambda email: email.lower())\n    )\n\n    return result.get_or_else(\"Invalid or missing email\")\n\n# \uc0ac\uc6a9\nprint(process_user_email(1))  # \"alice@example.com\"\nprint(process_user_email(999))  # \"Invalid or missing email\"\n</code></pre>"},{"location":"api/hof/monads/#either","title":"Either \ubaa8\ub098\ub4dc","text":"<pre><code>from rfs.hof.monads import Either, Left, Right\nfrom typing import Union\n\n# \uc131\uacf5/\uc2e4\ud328\ub97c \ub098\ud0c0\ub0b4\ub294 Either\ndef parse_int(s: str) -&gt; Either[str, int]:\n    \"\"\"\ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ud30c\uc2f1\"\"\"\n    try:\n        return Right(int(s))\n    except ValueError:\n        return Left(f\"Cannot parse '{s}' as integer\")\n\n# \ub098\uc774 \uac80\uc99d\ndef validate_age(age: int) -&gt; Either[str, int]:\n    \"\"\"\ub098\uc774 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    if age &lt; 0:\n        return Left(\"Age cannot be negative\")\n    elif age &gt; 150:\n        return Left(\"Age seems unrealistic\")\n    else:\n        return Right(age)\n\n# \uc5f0\uc0b0 \uccb4\uc774\ub2dd\ndef process_age_input(input_str: str) -&gt; Either[str, str]:\n    return (\n        parse_int(input_str)\n        .flat_map(validate_age)\n        .map(lambda age: f\"Valid age: {age}\")\n    )\n\n# \uc0ac\uc6a9 \uc608\uc81c\nprint(process_age_input(\"25\"))      # Right(\"Valid age: 25\")\nprint(process_age_input(\"abc\"))     # Left(\"Cannot parse 'abc' as integer\")\nprint(process_age_input(\"-5\"))      # Left(\"Age cannot be negative\")\nprint(process_age_input(\"200\"))     # Left(\"Age seems unrealistic\")\n\n# \ud328\ud134 \ub9e4\uce6d\uc744 \ud1b5\ud55c \ucc98\ub9ac\nresult = process_age_input(\"30\")\nif result.is_left():\n    print(f\"Error: {result.get_left()}\")\nelse:\n    print(f\"Success: {result.get_right()}\")\n</code></pre>"},{"location":"api/hof/monads/#either_1","title":"Either\ub97c \ud65c\uc6a9\ud55c \uc5d0\ub7ec \ub204\uc801","text":"<pre><code>from rfs.hof.monads import Either, Left, Right\nfrom typing import List, Dict\n\ndef validate_name(name: str) -&gt; Either[List[str], str]:\n    \"\"\"\uc774\ub984 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    errors = []\n\n    if not name:\n        errors.append(\"Name is required\")\n    elif len(name) &lt; 2:\n        errors.append(\"Name must be at least 2 characters\")\n\n    if name and not name[0].isupper():\n        errors.append(\"Name must start with uppercase letter\")\n\n    return Left(errors) if errors else Right(name)\n\ndef validate_email_either(email: str) -&gt; Either[List[str], str]:\n    \"\"\"\uc774\uba54\uc77c \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    errors = []\n\n    if not email:\n        errors.append(\"Email is required\")\n    elif \"@\" not in email:\n        errors.append(\"Email must contain @\")\n    elif \".\" not in email.split(\"@\")[-1]:\n        errors.append(\"Email domain must contain .\")\n\n    return Left(errors) if errors else Right(email)\n\ndef validate_user_data(name: str, email: str) -&gt; Either[List[str], Dict[str, str]]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc804\uccb4 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    name_result = validate_name(name)\n    email_result = validate_email_either(email)\n\n    # \uc5d0\ub7ec \ub204\uc801\n    all_errors = []\n    if name_result.is_left():\n        all_errors.extend(name_result.get_left())\n    if email_result.is_left():\n        all_errors.extend(email_result.get_left())\n\n    if all_errors:\n        return Left(all_errors)\n\n    return Right({\n        \"name\": name_result.get_right(),\n        \"email\": email_result.get_right()\n    })\n\n# \uc0ac\uc6a9\nvalid_user = validate_user_data(\"Alice\", \"alice@example.com\")\nprint(valid_user)  # Right({\"name\": \"Alice\", \"email\": \"alice@example.com\"})\n\ninvalid_user = validate_user_data(\"a\", \"invalid-email\")\nif invalid_user.is_left():\n    for error in invalid_user.get_left():\n        print(f\"- {error}\")\n# - Name must be at least 2 characters\n# - Email must contain @\n</code></pre>"},{"location":"api/hof/monads/#io","title":"IO \ubaa8\ub098\ub4dc","text":"<pre><code>from rfs.hof.monads import IO\nimport json\n\ndef read_file(filename: str) -&gt; IO[str]:\n    \"\"\"\ud30c\uc77c \uc77d\uae30\ub97c \ub098\ud0c0\ub0b4\ub294 IO \ubaa8\ub098\ub4dc\"\"\"\n    def action():\n        with open(filename, 'r') as f:\n            return f.content()\n    return IO(action)\n\ndef parse_json(json_str: str) -&gt; IO[dict]:\n    \"\"\"JSON \ud30c\uc2f1\uc744 \ub098\ud0c0\ub0b4\ub294 IO \ubaa8\ub098\ub4dc\"\"\"\n    def action():\n        return json.loads(json_str)\n    return IO(action)\n\ndef write_file(filename: str, content: str) -&gt; IO[None]:\n    \"\"\"\ud30c\uc77c \uc4f0\uae30\ub97c \ub098\ud0c0\ub0b4\ub294 IO \ubaa8\ub098\ub4dc\"\"\"\n    def action():\n        with open(filename, 'w') as f:\n            f.write(content)\n        return None\n    return IO(action)\n\n# IO \uc5f0\uc0b0 \uccb4\uc774\ub2dd (\uc9c0\uc5f0 \uc2e4\ud589)\nfile_processing = (\n    read_file(\"config.json\")\n    .flat_map(parse_json)\n    .map(lambda data: {**data, \"processed\": True})\n    .map(json.dumps)\n    .flat_map(lambda processed_json: write_file(\"output.json\", processed_json))\n)\n\n# \uc2e4\uc81c \uc2e4\ud589\uc740 run() \ud638\ucd9c \uc2dc\uc5d0\ub9cc \ubc1c\uc0dd\n# file_processing.run()  # \uc2e4\uc81c \ud30c\uc77c I/O \uc2e4\ud589\n\n# \uc21c\uc218\ud55c \uacc4\uc0b0\uacfc \ubd80\uc218 \ud6a8\uacfc \ubd84\ub9ac\ndef pure_computation(data: dict) -&gt; dict:\n    \"\"\"\uc21c\uc218\ud55c \uacc4\uc0b0 \ud568\uc218\"\"\"\n    return {\n        **data,\n        \"timestamp\": \"2025-01-01T00:00:00Z\",\n        \"version\": \"1.0\"\n    }\n\n# IO\uc640 \uc21c\uc218 \ud568\uc218 \uc870\ud569\nenhanced_processing = (\n    read_file(\"input.json\")\n    .flat_map(parse_json)\n    .map(pure_computation)  # \uc21c\uc218\ud55c \ubcc0\ud658\n    .map(json.dumps)\n    .flat_map(lambda result: write_file(\"enhanced.json\", result))\n)\n</code></pre>"},{"location":"api/hof/monads/#_2","title":"\ubaa8\ub098\ub4dc \ud2b8\ub79c\uc2a4\ud3ec\uba38","text":"<pre><code>from rfs.hof.monads import Maybe, Either, Left, Right, Some, Nothing\nfrom typing import TypeVar, Generic, Callable\n\nT = TypeVar('T')\nU = TypeVar('U')\nE = TypeVar('E')\n\nclass MaybeT(Generic[T]):\n    \"\"\"Maybe Transformer - Maybe\ub97c \ub2e4\ub978 \ubaa8\ub098\ub4dc\uc640 \uc870\ud569\"\"\"\n\n    def __init__(self, wrapped_maybe):\n        self.wrapped_maybe = wrapped_maybe\n\n    def map(self, f: Callable[[T], U]) -&gt; 'MaybeT[U]':\n        return MaybeT(\n            self.wrapped_maybe.map(\n                lambda maybe: maybe.map(f)\n            )\n        )\n\n    def flat_map(self, f: Callable[[T], 'MaybeT[U]']) -&gt; 'MaybeT[U]':\n        def inner_flat_map(maybe):\n            if maybe.is_nothing():\n                return maybe\n            return f(maybe.get()).wrapped_maybe\n\n        return MaybeT(\n            self.wrapped_maybe.flat_map(inner_flat_map)\n        )\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc870\ud68c \uc2dc\ubbac\ub808\uc774\uc158 (\ube44\ub3d9\uae30\uc801\uc774\uace0 \uc2e4\ud328\ud560 \uc218 \uc788\uc74c)\ndef find_user_async(user_id: int) -&gt; Either[str, Maybe[Dict]]:\n    \"\"\"\uc0ac\uc6a9\uc790\ub97c \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ucc3e\uae30 (\uc2e4\ud328\ud560 \uc218 \uc788\uc74c)\"\"\"\n    if user_id &lt; 0:\n        return Left(\"Invalid user ID\")\n    elif user_id == 1:\n        return Right(Some({\"id\": 1, \"name\": \"Alice\"}))\n    elif user_id == 2:\n        return Right(Some({\"id\": 2, \"name\": \"Bob\"}))\n    else:\n        return Right(Nothing())  # \uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc74c\n\ndef get_user_permissions(user: Dict) -&gt; Either[str, Maybe[List[str]]]:\n    \"\"\"\uc0ac\uc6a9\uc790 \uad8c\ud55c \uc870\ud68c\"\"\"\n    permissions_db = {\n        1: [\"read\", \"write\"],\n        2: [\"read\"]\n    }\n\n    user_id = user[\"id\"]\n    if user_id in permissions_db:\n        return Right(Some(permissions_db[user_id]))\n    else:\n        return Right(Nothing())\n\n# \ubcf5\ud569 \uc5f0\uc0b0: \uc0ac\uc6a9\uc790 \ucc3e\uae30 + \uad8c\ud55c \uc870\ud68c\ndef get_user_with_permissions(user_id: int) -&gt; Either[str, Maybe[Dict]]:\n    user_result = find_user_async(user_id)\n\n    if user_result.is_left():\n        return user_result\n\n    maybe_user = user_result.get_right()\n    if maybe_user.is_nothing():\n        return Right(Nothing())\n\n    user = maybe_user.get()\n    permissions_result = get_user_permissions(user)\n\n    if permissions_result.is_left():\n        return permissions_result\n\n    maybe_permissions = permissions_result.get_right()\n    if maybe_permissions.is_nothing():\n        return Right(Some({**user, \"permissions\": []}))\n\n    return Right(Some({\n        **user,\n        \"permissions\": maybe_permissions.get()\n    }))\n\n# \uc0ac\uc6a9\nresult = get_user_with_permissions(1)\nif result.is_left():\n    print(f\"Error: {result.get_left()}\")\nelif result.get_right().is_nothing():\n    print(\"User not found\")\nelse:\n    user_with_perms = result.get_right().get()\n    print(f\"User: {user_with_perms}\")\n</code></pre>"},{"location":"api/hof/monads/#api","title":"\uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c: API \uc751\ub2f5 \ucc98\ub9ac","text":"<pre><code>from rfs.hof.monads import Maybe, Either, Left, Right, Some, Nothing\nimport json\nfrom typing import Dict, List\nimport requests\n\ndef safe_json_parse(response_text: str) -&gt; Either[str, dict]:\n    \"\"\"\uc548\uc804\ud55c JSON \ud30c\uc2f1\"\"\"\n    try:\n        return Right(json.loads(response_text))\n    except json.JSONDecodeError as e:\n        return Left(f\"JSON parse error: {e}\")\n\ndef extract_user_data(api_response: dict) -&gt; Either[str, Dict]:\n    \"\"\"API \uc751\ub2f5\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ucd94\ucd9c\"\"\"\n    if \"data\" not in api_response:\n        return Left(\"Missing 'data' field in response\")\n\n    user_data = api_response[\"data\"]\n    required_fields = [\"id\", \"name\", \"email\"]\n\n    for field in required_fields:\n        if field not in user_data:\n            return Left(f\"Missing required field: {field}\")\n\n    return Right(user_data)\n\ndef validate_user_response(user: Dict) -&gt; Either[str, Dict]:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc0ac\"\"\"\n    if not isinstance(user[\"id\"], int):\n        return Left(\"User ID must be an integer\")\n\n    if not user[\"email\"] or \"@\" not in user[\"email\"]:\n        return Left(\"Invalid email address\")\n\n    return Right(user)\n\n# API \uc751\ub2f5 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\ndef process_api_response(response_text: str) -&gt; Either[str, Dict]:\n    \"\"\"API \uc751\ub2f5\uc744 \uc548\uc804\ud558\uac8c \ucc98\ub9ac\"\"\"\n    return (\n        safe_json_parse(response_text)\n        .flat_map(extract_user_data)\n        .flat_map(validate_user_response)\n        .map(lambda user: {\n            **user,\n            \"processed_at\": \"2025-01-01T00:00:00Z\"\n        })\n    )\n\n# \uc0ac\uc6a9 \uc608\uc81c\nvalid_response = '{\"data\": {\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}}'\ninvalid_response = '{\"data\": {\"id\": \"not-a-number\", \"name\": \"Bob\"}}'\nmalformed_json = '{\"data\": invalid json}'\n\n# \uac01\uac01 \ucc98\ub9ac\nfor response in [valid_response, invalid_response, malformed_json]:\n    result = process_api_response(response)\n\n    if result.is_left():\n        print(f\"Error: {result.get_left()}\")\n    else:\n        print(f\"Success: {result.get_right()}\")\n\n# \ubc30\uce58 \ucc98\ub9ac\nresponses = [valid_response, invalid_response, malformed_json]\nresults = [process_api_response(resp) for resp in responses]\n\nsuccessful_users = [r.get_right() for r in results if r.is_right()]\nerrors = [r.get_left() for r in results if r.is_left()]\n\nprint(f\"Processed {len(successful_users)} users successfully\")\nprint(f\"Encountered {len(errors)} errors\")\n</code></pre>"},{"location":"api/hof/monads/#_3","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Result Pattern - Result \ubaa8\ub098\ub4dc (Either\uc758 \ud2b9\uc218\ud55c \ud615\ud0dc)</li> <li>HOF Core - \ud575\uc2ec \uace0\ucc28 \ud568\uc218\ub4e4</li> <li>HOF Collections - \uceec\ub809\uc158 \ucc98\ub9ac \ud568\uc218\ub4e4</li> <li>\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d - \ud568\uc218\ud615 \ud328\ud134 \uac1c\ub150</li> </ul>"},{"location":"api/reactive/flux/","title":"Flux API","text":"<p>Flux reactive stream API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud074\ub798\uc2a4: - <code>Flux</code>: \ub2e4\uc911 \uac12 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc</p>"},{"location":"api/reactive/flux/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/reactive/flux/#flux","title":"\uae30\ubcf8 Flux \uc0dd\uc131","text":"<pre><code>from rfs.reactive import Flux\nimport asyncio\n\n# \ub9ac\uc2a4\ud2b8\ub85c\ubd80\ud130 Flux \uc0dd\uc131\nflux = Flux.from_iterable([1, 2, 3, 4, 5])\nresult = await flux.collect_list()\nprint(result)  # [1, 2, 3, 4, 5]\n\n# \ube48 Flux \uc0dd\uc131\nempty_flux = Flux.empty()\nresult = await empty_flux.collect_list()\nprint(result)  # []\n\n# \ubb34\ud55c \uc2dc\ud000\uc2a4 \uc0dd\uc131\ninfinite_flux = Flux.range(1, 1000000).take(5)\nresult = await infinite_flux.collect_list()\nprint(result)  # [1, 2, 3, 4, 5]\n\n# \uc5d0\ub7ec Flux \uc0dd\uc131\nerror_flux = Flux.error(ValueError(\"Something went wrong\"))\ntry:\n    await error_flux.collect_list()\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api/reactive/flux/#_2","title":"\ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc \uc0dd\uc131","text":"<pre><code>from rfs.reactive import Flux\nimport asyncio\nimport aiofiles\n\nasync def read_file_lines(filename: str):\n    \"\"\"\ud30c\uc77c\uc758 \uac01 \ub77c\uc778\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc77d\uae30\"\"\"\n    async with aiofiles.open(filename, 'r') as f:\n        async for line in f:\n            yield line.strip()\n\n# \ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130\ub97c Flux\ub85c \ubcc0\ud658\ndef file_lines_flux(filename: str) -&gt; Flux[str]:\n    return Flux.from_async_iterable(read_file_lines(filename))\n\n# \uc0ac\uc6a9\nlines_flux = file_lines_flux(\"data.txt\")\nlines = await lines_flux.collect_list()\nprint(f\"Read {len(lines)} lines\")\n\n# \uc8fc\uae30\uc801 \uc2a4\ud2b8\ub9bc \uc0dd\uc131\ninterval_flux = Flux.interval(1.0).take(5)  # 1\ucd08\ub9c8\ub2e4 \uac12 \ubc29\ucd9c, 5\uac1c\ub9cc\nvalues = await interval_flux.collect_list()\nprint(values)  # [0, 1, 2, 3, 4]\n</code></pre>"},{"location":"api/reactive/flux/#flux_1","title":"Flux \ubcc0\ud658 \uc5f0\uc0b0\uc790","text":"<pre><code>from rfs.reactive import Flux\n\n# map - \uac01 \uc694\uc18c \ubcc0\ud658\nnumbers_flux = Flux.from_iterable([1, 2, 3, 4, 5])\nsquared_flux = numbers_flux.map(lambda x: x ** 2)\nresult = await squared_flux.collect_list()\nprint(result)  # [1, 4, 9, 16, 25]\n\n# flatMap - \uac01 \uc694\uc18c\ub97c Flux\ub85c \ubcc0\ud658 \ud6c4 \ud3c9\ud0c4\ud654\ndef expand_number(n):\n    return Flux.from_iterable([n, n * 10, n * 100])\n\nexpanded_flux = (\n    Flux.from_iterable([1, 2, 3])\n    .flat_map(expand_number)\n)\nresult = await expanded_flux.collect_list()\nprint(result)  # [1, 10, 100, 2, 20, 200, 3, 30, 300]\n\n# filter - \uc870\uac74\ubd80 \ud544\ud130\ub9c1\neven_flux = (\n    Flux.range(1, 10)\n    .filter(lambda x: x % 2 == 0)\n)\nresult = await even_flux.collect_list()\nprint(result)  # [2, 4, 6, 8, 10]\n\n# distinct - \uc911\ubcf5 \uc81c\uac70\nunique_flux = (\n    Flux.from_iterable([1, 2, 2, 3, 3, 3, 4])\n    .distinct()\n)\nresult = await unique_flux.collect_list()\nprint(result)  # [1, 2, 3, 4]\n</code></pre>"},{"location":"api/reactive/flux/#_3","title":"\uadf8\ub8f9\ud654\uc640 \uc9d1\uacc4","text":"<pre><code>from rfs.reactive import Flux\nfrom collections import defaultdict\n\n# groupBy - \ud0a4\ubcc4 \uadf8\ub8f9\ud654\ndef group_by_length(word: str) -&gt; int:\n    return len(word)\n\nwords_flux = Flux.from_iterable([\"cat\", \"dog\", \"elephant\", \"ant\", \"butterfly\"])\ngrouped_flux = words_flux.group_by(group_by_length)\n\n# \uadf8\ub8f9\ubcc4\ub85c \uc218\uc9d1\ngroups = {}\nasync for length, words in grouped_flux:\n    groups[length] = await words.collect_list()\n\nprint(groups)  # {3: [\"cat\", \"dog\", \"ant\"], 8: [\"elephant\"], 9: [\"butterfly\"]}\n\n# reduce - \uc9d1\uacc4\nsum_flux = (\n    Flux.range(1, 100)\n    .reduce(0, lambda acc, x: acc + x)\n)\ntotal = await sum_flux.subscribe()\nprint(total)  # 5050\n\n# scan - \ub204\uc801 \uac12 \ubc29\ucd9c\ncumulative_flux = (\n    Flux.from_iterable([1, 2, 3, 4, 5])\n    .scan(0, lambda acc, x: acc + x)\n)\nresult = await cumulative_flux.collect_list()\nprint(result)  # [0, 1, 3, 6, 10, 15]\n</code></pre>"},{"location":"api/reactive/flux/#_4","title":"\ubcd1\ub82c \ucc98\ub9ac","text":"<pre><code>from rfs.reactive import Flux\nimport asyncio\nimport time\n\n# \ubb34\uac70\uc6b4 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\nasync def heavy_computation(n: int) -&gt; int:\n    await asyncio.sleep(0.1)  # 100ms \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n    return n ** 2\n\n# \uc21c\ucc28 \ucc98\ub9ac\nstart = time.time()\nsequential_result = await (\n    Flux.range(1, 10)\n    .flat_map(lambda x: Flux.from_callable(lambda: heavy_computation(x)))\n    .collect_list()\n)\nsequential_time = time.time() - start\nprint(f\"Sequential: {sequential_time:.2f}s\")\n\n# \ubcd1\ub82c \ucc98\ub9ac (\ucd5c\ub300 4\uac1c \ub3d9\uc2dc \uc2e4\ud589)\nstart = time.time()\nparallel_result = await (\n    Flux.range(1, 10)\n    .parallel(max_concurrency=4)\n    .flat_map(lambda x: Flux.from_callable(lambda: heavy_computation(x)))\n    .collect_list()\n)\nparallel_time = time.time() - start\nprint(f\"Parallel: {parallel_time:.2f}s\")  # \ud6e8\uc52c \ube60\ub984\n\nprint(f\"Speedup: {sequential_time / parallel_time:.1f}x\")\n</code></pre>"},{"location":"api/reactive/flux/#_5","title":"\uc708\ub3c4\uc6b0\uc640 \ubc84\ud37c\ub9c1","text":"<pre><code>from rfs.reactive import Flux\n\n# buffer - \uc9c0\uc815\ub41c \ud06c\uae30\ub85c \ubc84\ud37c\ub9c1\nbuffered_flux = (\n    Flux.range(1, 12)\n    .buffer(3)  # 3\uac1c\uc529 \ubb36\uc5b4\uc11c \ucc98\ub9ac\n)\nresult = await buffered_flux.collect_list()\nprint(result)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\n# window - \uc2dc\uac04 \uae30\ubc18 \uc708\ub3c4\uc6b0\ntime_windowed_flux = (\n    Flux.interval(0.1)  # 100ms\ub9c8\ub2e4 \uac12 \ubc29\ucd9c\n    .take(20)\n    .window_timeout(5, 0.5)  # \ucd5c\ub300 5\uac1c \ub610\ub294 500ms\ub9c8\ub2e4 \uc708\ub3c4\uc6b0\n)\n\nwindows = []\nasync for window in time_windowed_flux:\n    window_data = await window.collect_list()\n    windows.append(window_data)\n\nprint(f\"Created {len(windows)} windows\")\n\n# sliding window - \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0\nsliding_flux = (\n    Flux.from_iterable([1, 2, 3, 4, 5, 6, 7, 8])\n    .sliding_window(size=3, step=1)\n)\nresult = await sliding_flux.collect_list()\nprint(result)  # [[1,2,3], [2,3,4], [3,4,5], [4,5,6], [5,6,7], [6,7,8]]\n</code></pre>"},{"location":"api/reactive/flux/#_6","title":"\uc5d0\ub7ec \ucc98\ub9ac\uc640 \ud68c\ubcf5","text":"<pre><code>from rfs.reactive import Flux\nimport random\n\n# \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc5f0\uc0b0\ndef risky_operation(n: int) -&gt; int:\n    if random.random() &lt; 0.3:  # 30% \ud655\ub960\ub85c \uc5d0\ub7ec\n        raise RuntimeError(f\"Error processing {n}\")\n    return n * 2\n\n# onErrorContinue - \uc5d0\ub7ec \ubb34\uc2dc\ud558\uace0 \uacc4\uc18d\nsafe_flux = (\n    Flux.range(1, 20)\n    .map(risky_operation)\n    .on_error_continue(lambda error, value: print(f\"Skipping {value} due to {error}\"))\n)\nresult = await safe_flux.collect_list()\nprint(f\"Processed {len(result)} items successfully\")\n\n# retry - \uc804\uccb4 \uc2a4\ud2b8\ub9bc \uc7ac\uc2dc\ub3c4\ndef unreliable_source():\n    return Flux.from_iterable([1, 2, 3]).map(risky_operation)\n\nreliable_flux = (\n    Flux.defer(unreliable_source)  # \uc9c0\uc5f0 \uc2e4\ud589\n    .retry(max_attempts=3, delay=0.5)\n    .on_error_return([])  # \ucd5c\uc885 \uc2e4\ud328 \uc2dc \ube48 \ub9ac\uc2a4\ud2b8\n)\n\nresult = await reliable_flux.collect_list()\nprint(result)\n</code></pre>"},{"location":"api/reactive/flux/#_7","title":"\ubc31\ud504\ub808\uc154\uc640 \ud50c\ub85c\uc6b0 \uc81c\uc5b4","text":"<pre><code>from rfs.reactive import Flux\nimport asyncio\n\n# \ube60\ub978 \uc0dd\uc0b0\uc790\uc640 \ub290\ub9b0 \uc18c\ube44\uc790\nasync def slow_consumer(item):\n    await asyncio.sleep(0.1)  # \ub290\ub9b0 \ucc98\ub9ac\n    return f\"Processed: {item}\"\n\n# \ubc31\ud504\ub808\uc154 \ucc98\ub9ac\ncontrolled_flux = (\n    Flux.range(1, 1000)  # \ube60\ub978 \uc0dd\uc0b0\uc790\n    .on_backpressure_buffer(max_size=10)  # \ubc84\ud37c \ud06c\uae30 \uc81c\ud55c\n    .flat_map(\n        lambda x: Flux.from_callable(lambda: slow_consumer(x)),\n        max_concurrency=3  # \ucd5c\ub300 3\uac1c \ub3d9\uc2dc \ucc98\ub9ac\n    )\n)\n\n# \ucc98\ub9ac\ub41c \ud56d\ubaa9 \uc218\uc9d1\nresult = await controlled_flux.take(20).collect_list()\nprint(f\"Processed {len(result)} items with backpressure control\")\n\n# \uc0d8\ud50c\ub9c1 - \uc77c\uc815 \uac04\uaca9\uc73c\ub85c \uc0d8\ud50c\ub9c1\nsampled_flux = (\n    Flux.interval(0.01)  # 10ms\ub9c8\ub2e4 \uac12 \uc0dd\uc131\n    .take(1000)\n    .sample(0.1)  # 100ms\ub9c8\ub2e4 \uc0d8\ud50c\ub9c1\n)\nsamples = await sampled_flux.collect_list()\nprint(f\"Sampled {len(samples)} items from 1000\")\n</code></pre>"},{"location":"api/reactive/flux/#_8","title":"\ubcf5\ud569 \uc2a4\ud2b8\ub9bc \uc870\ud569","text":"<pre><code>from rfs.reactive import Flux\n\n# merge - \uc5ec\ub7ec \uc2a4\ud2b8\ub9bc \ubcd1\ud569\nstream1 = Flux.from_iterable([1, 3, 5]).delay_elements(0.1)\nstream2 = Flux.from_iterable([2, 4, 6]).delay_elements(0.15)\nstream3 = Flux.from_iterable([7, 8, 9]).delay_elements(0.05)\n\nmerged_flux = Flux.merge(stream1, stream2, stream3)\nresult = await merged_flux.collect_list()\nprint(f\"Merged result: {sorted(result)}\")\n\n# zip - \uc2a4\ud2b8\ub9bc \uacb0\ud569\nnames = Flux.from_iterable([\"Alice\", \"Bob\", \"Charlie\"])\nages = Flux.from_iterable([25, 30, 35])\ncities = Flux.from_iterable([\"New York\", \"London\", \"Tokyo\"])\n\npeople_flux = Flux.zip(\n    names, ages, cities,\n    lambda name, age, city: {\"name\": name, \"age\": age, \"city\": city}\n)\npeople = await people_flux.collect_list()\nprint(people)\n\n# combineLatest - \ucd5c\uc2e0 \uac12 \uc870\ud569\ntemperature = Flux.interval(1.0).map(lambda x: 20 + x)  # \uc628\ub3c4 \uc13c\uc11c\nhumidity = Flux.interval(1.5).map(lambda x: 40 + x * 2)  # \uc2b5\ub3c4 \uc13c\uc11c\n\nweather_flux = (\n    Flux.combine_latest(temperature, humidity)\n    .map(lambda temp, hum: f\"Temperature: {temp}\u00b0C, Humidity: {hum}%\")\n    .take(5)\n)\n\nweather_data = await weather_flux.collect_list()\nfor reading in weather_data:\n    print(reading)\n</code></pre>"},{"location":"api/reactive/flux/#_9","title":"\uace0\uae09 \uc5f0\uc0b0\uc790","text":"<pre><code>from rfs.reactive import Flux\n\n# switchMap - \uc0c8 \uc2a4\ud2b8\ub9bc\uc73c\ub85c \uc804\ud658\ndef search_results(query: str) -&gt; Flux[str]:\n    # \uac80\uc0c9 \uacb0\uacfc \uc2dc\ubbac\ub808\uc774\uc158\n    return Flux.from_iterable([f\"Result {i} for '{query}'\" for i in range(3)])\n\nsearch_queries = Flux.from_iterable([\"python\", \"java\", \"javascript\"])\nlatest_results = search_queries.switch_map(search_results)\nresult = await latest_results.collect_list()\nprint(result)\n\n# takeWhile / skipWhile - \uc870\uac74\ubd80 \uc81c\uc5b4\nnumbers = Flux.from_iterable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# 5 \ubbf8\ub9cc\uc778 \ub3d9\uc548\ub9cc \uac00\uc838\uc624\uae30\ntaken = await numbers.take_while(lambda x: x &lt; 5).collect_list()\nprint(f\"Taken: {taken}\")  # [1, 2, 3, 4]\n\n# 5 \ubbf8\ub9cc\uc778 \ub3d9\uc548 \uac74\ub108\ub6f0\uae30\nskipped = await numbers.skip_while(lambda x: x &lt; 5).collect_list()\nprint(f\"After skip: {skipped}\")  # [5, 6, 7, 8, 9, 10]\n\n# concatMap - \uc21c\uc11c \ubcf4\uc7a5 \ud3c9\ud0c4\ud654\ndef process_batch(n: int) -&gt; Flux[str]:\n    return Flux.from_iterable([f\"batch-{n}-item-{i}\" for i in range(3)])\n\nordered_flux = (\n    Flux.from_iterable([1, 2, 3])\n    .concat_map(process_batch)  # \uc21c\uc11c \ubcf4\uc7a5\n)\nordered_result = await ordered_flux.collect_list()\nprint(ordered_result)  # batch-1 \ud56d\ubaa9\ub4e4\uc774 \uba3c\uc800, \uadf8 \ub2e4\uc74c batch-2, batch-3\n</code></pre>"},{"location":"api/reactive/flux/#_10","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Mono API - \ub2e8\uc77c \uac12 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc</li> <li>\ubc18\uc751\ud615 \ud504\ub85c\uadf8\ub798\ubc0d - \ubc18\uc751\ud615 \ud328\ud134 \uac1c\ub150</li> <li>\ube44\ub3d9\uae30 \ucc98\ub9ac - \ud568\uc218\ud615 \ubc18\uc751\ud615 \uc720\ud2f8\ub9ac\ud2f0</li> </ul>"},{"location":"api/reactive/mono/","title":"Mono API","text":"<p>Mono reactive stream API documentation for RFS Framework.</p> <p>\uc8fc\uc694 \ud074\ub798\uc2a4: - <code>Mono</code>: \ub2e8\uc77c \uac12 \ube44\ub3d9\uae30 \uc2a4\ud2b8\ub9bc</p>"},{"location":"api/reactive/mono/#_1","title":"\uc0ac\uc6a9 \uc608\uc81c","text":""},{"location":"api/reactive/mono/#mono","title":"\uae30\ubcf8 Mono \uc0dd\uc131","text":"<pre><code>from rfs.reactive import Mono\nimport asyncio\nfrom typing import Optional\n\n# \uac12\uc73c\ub85c\ubd80\ud130 Mono \uc0dd\uc131\nmono = Mono.just(\"Hello, World!\")\nresult = await mono.subscribe()\nprint(result)  # \"Hello, World!\"\n\n# \ube48 Mono \uc0dd\uc131\nempty_mono = Mono.empty()\nresult = await empty_mono.subscribe()\nprint(result)  # None\n\n# \uc5d0\ub7ec Mono \uc0dd\uc131\nerror_mono = Mono.error(ValueError(\"Something went wrong\"))\ntry:\n    await error_mono.subscribe()\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api/reactive/mono/#mono_1","title":"\ube44\ub3d9\uae30 \uc791\uc5c5\uc5d0\uc11c Mono \uc0dd\uc131","text":"<pre><code>from rfs.reactive import Mono\nimport aiohttp\nimport asyncio\n\nasync def fetch_user(user_id: int) -&gt; dict:\n    \"\"\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c API\uc5d0\uc11c \uac00\uc838\uc624\ub294 \ube44\ub3d9\uae30 \ud568\uc218\"\"\"\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"https://api.example.com/users/{user_id}\") as response:\n            if response.status == 200:\n                return await response.json()\n            else:\n                raise ValueError(f\"User {user_id} not found\")\n\n# \ube44\ub3d9\uae30 \ud568\uc218\ub97c Mono\ub85c \ub798\ud551\ndef get_user_mono(user_id: int) -&gt; Mono[dict]:\n    return Mono.from_callable(lambda: fetch_user(user_id))\n\n# \uc0ac\uc6a9\nuser_mono = get_user_mono(123)\nuser_data = await user_mono.subscribe()\nprint(f\"User: {user_data['name']}\")\n</code></pre>"},{"location":"api/reactive/mono/#mono_2","title":"Mono \ubcc0\ud658 \uc5f0\uc0b0\uc790","text":"<pre><code>from rfs.reactive import Mono\n\n# map - \uac12 \ubcc0\ud658\nnumber_mono = Mono.just(5)\nsquared_mono = number_mono.map(lambda x: x ** 2)\nresult = await squared_mono.subscribe()\nprint(result)  # 25\n\n# flatMap - Mono\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub85c \ubcc0\ud658\ndef get_user_profile(user_id: int) -&gt; Mono[dict]:\n    return Mono.just({\"id\": user_id, \"name\": f\"User{user_id}\"})\n\ndef get_user_posts(user: dict) -&gt; Mono[list]:\n    return Mono.just([f\"Post by {user['name']}\", f\"Another post by {user['name']}\"])\n\nuser_posts = (\n    Mono.just(1)\n    .flat_map(get_user_profile)\n    .flat_map(get_user_posts)\n)\n\nposts = await user_posts.subscribe()\nprint(posts)  # [\"Post by User1\", \"Another post by User1\"]\n\n# filter - \uc870\uac74\ubd80 \ud544\ud130\ub9c1\npositive_mono = Mono.just(-5).filter(lambda x: x &gt; 0)\nresult = await positive_mono.subscribe()\nprint(result)  # None (\ud544\ud130\ub9c1\ub428)\n</code></pre>"},{"location":"api/reactive/mono/#_2","title":"\uc5d0\ub7ec \ucc98\ub9ac","text":"<pre><code>from rfs.reactive import Mono\n\n# onErrorReturn - \uc5d0\ub7ec \uc2dc \uae30\ubcf8\uac12 \ubc18\ud658\ndef risky_operation(value: int) -&gt; Mono[int]:\n    if value &lt; 0:\n        return Mono.error(ValueError(\"Negative value not allowed\"))\n    return Mono.just(value * 2)\n\nsafe_mono = (\n    risky_operation(-5)\n    .on_error_return(0)  # \uc5d0\ub7ec \uc2dc 0 \ubc18\ud658\n)\n\nresult = await safe_mono.subscribe()\nprint(result)  # 0\n\n# onErrorResume - \uc5d0\ub7ec \uc2dc \ub300\uccb4 Mono \uc2e4\ud589\ndef fallback_operation(error: Exception) -&gt; Mono[int]:\n    print(f\"Fallback triggered due to: {error}\")\n    return Mono.just(100)\n\nresilient_mono = (\n    risky_operation(-5)\n    .on_error_resume(fallback_operation)\n)\n\nresult = await resilient_mono.subscribe()\nprint(result)  # 100\n\n# retry - \uc7ac\uc2dc\ub3c4\nimport random\n\ndef unreliable_service() -&gt; Mono[str]:\n    if random.random() &lt; 0.7:  # 70% \uc2e4\ud328\uc728\n        return Mono.error(RuntimeError(\"Service unavailable\"))\n    return Mono.just(\"Success!\")\n\nreliable_mono = (\n    Mono.from_callable(unreliable_service)\n    .retry(max_attempts=3, delay=1.0)\n)\n\nresult = await reliable_mono.subscribe()\nprint(result)  # \uc7ac\uc2dc\ub3c4 \ud6c4 \uc131\uacf5\ud558\uba74 \"Success!\"\n</code></pre>"},{"location":"api/reactive/mono/#_3","title":"\uc870\uac74\ubd80 \uc2e4\ud589\uacfc \ud0c0\uc784\uc544\uc6c3","text":"<pre><code>from rfs.reactive import Mono\nimport asyncio\n\n# switchIfEmpty - \ube48 \uac12\uc77c \ub54c \ub300\uccb4 Mono \uc2e4\ud589\ndef get_cached_data(key: str) -&gt; Mono[str]:\n    # \uce90\uc2dc\uc5d0\uc11c \ub370\uc774\ud130 \uc870\ud68c (\ube48 \uacb0\uacfc)\n    return Mono.empty()\n\ndef fetch_fresh_data(key: str) -&gt; Mono[str]:\n    return Mono.just(f\"Fresh data for {key}\")\n\ndata_mono = (\n    get_cached_data(\"user:123\")\n    .switch_if_empty(fetch_fresh_data(\"user:123\"))\n)\n\nresult = await data_mono.subscribe()\nprint(result)  # \"Fresh data for user:123\"\n\n# timeout - \ud0c0\uc784\uc544\uc6c3 \uc124\uc815\nasync def slow_operation() -&gt; str:\n    await asyncio.sleep(5)  # 5\ucd08 \uc9c0\uc5f0\n    return \"Completed\"\n\ntimeout_mono = (\n    Mono.from_callable(slow_operation)\n    .timeout(2.0)  # 2\ucd08 \ud0c0\uc784\uc544\uc6c3\n    .on_error_return(\"Timed out\")\n)\n\nresult = await timeout_mono.subscribe()\nprint(result)  # \"Timed out\"\n</code></pre>"},{"location":"api/reactive/mono/#mono_3","title":"Mono \uacb0\ud569","text":"<pre><code>from rfs.reactive import Mono\n\n# zip - \uc5ec\ub7ec Mono\ub97c \uacb0\ud569\nuser_mono = Mono.just({\"id\": 1, \"name\": \"Alice\"})\nposts_mono = Mono.just([\"Post 1\", \"Post 2\"])\nprofile_mono = Mono.just({\"bio\": \"Software Developer\"})\n\ncombined_mono = Mono.zip(\n    user_mono,\n    posts_mono, \n    profile_mono,\n    lambda user, posts, profile: {\n        \"user\": user,\n        \"posts\": posts,\n        \"profile\": profile\n    }\n)\n\nresult = await combined_mono.subscribe()\nprint(result)\n# {\n#   \"user\": {\"id\": 1, \"name\": \"Alice\"},\n#   \"posts\": [\"Post 1\", \"Post 2\"],\n#   \"profile\": {\"bio\": \"Software Developer\"}\n# }\n\n# then - \uc21c\ucc28 \uc2e4\ud589 (\uc774\uc804 \uacb0\uacfc \ubb34\uc2dc)\ndef save_user(user: dict) -&gt; Mono[None]:\n    print(f\"Saving user: {user}\")\n    return Mono.just(None)\n\ndef send_welcome_email(user: dict) -&gt; Mono[None]:\n    print(f\"Sending welcome email to: {user['email']}\")\n    return Mono.just(None)\n\nregistration_flow = (\n    Mono.just({\"name\": \"Bob\", \"email\": \"bob@example.com\"})\n    .flat_map(save_user)\n    .then(send_welcome_email({\"email\": \"bob@example.com\"}))\n)\n\nawait registration_flow.subscribe()\n</code></pre>"},{"location":"api/reactive/mono/#_4","title":"\ubd80\uc218 \ud6a8\uacfc\uc640 \ub514\ubc84\uae45","text":"<pre><code>from rfs.reactive import Mono\n\n# doOnNext - \uac12\uc774 \ubc29\ucd9c\ub420 \ub54c \ubd80\uc218 \ud6a8\uacfc \uc2e4\ud589\ndef log_value(value):\n    print(f\"Processing value: {value}\")\n\nresult_mono = (\n    Mono.just(42)\n    .do_on_next(log_value)  # \ub85c\uae45\n    .map(lambda x: x * 2)\n    .do_on_next(lambda x: print(f\"After doubling: {x}\"))\n)\n\nresult = await result_mono.subscribe()\n# \ucd9c\ub825:\n# Processing value: 42\n# After doubling: 84\n\n# doOnError - \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \ubd80\uc218 \ud6a8\uacfc\ndef log_error(error):\n    print(f\"Error occurred: {error}\")\n\nerror_mono = (\n    Mono.error(RuntimeError(\"Something failed\"))\n    .do_on_error(log_error)\n    .on_error_return(\"Fallback\")\n)\n\nresult = await error_mono.subscribe()\n# \ucd9c\ub825: Error occurred: Something failed\n# \uacb0\uacfc: \"Fallback\"\n\n# doFinally - \uc644\ub8cc/\uc5d0\ub7ec \uad00\uacc4\uc5c6\uc774 \uc2e4\ud589\ndef cleanup():\n    print(\"Cleaning up resources\")\n\nfinal_mono = (\n    Mono.just(\"data\")\n    .map(lambda x: x.upper())\n    .do_finally(cleanup)\n)\n\nresult = await final_mono.subscribe()\n# \ucd9c\ub825: Cleaning up resources\n# \uacb0\uacfc: \"DATA\"\n</code></pre>"},{"location":"api/reactive/mono/#_5","title":"\uce90\uc2f1\uacfc \uacf5\uc720","text":"<pre><code>from rfs.reactive import Mono\nimport time\n\n# cache - \uacb0\uacfc \uce90\uc2f1\nexpensive_computation = Mono.from_callable(lambda: time.time())\ncached_mono = expensive_computation.cache()\n\n# \uc5ec\ub7ec \ubc88 \uad6c\ub3c5\ud574\ub3c4 \ud55c \ubc88\ub9cc \uc2e4\ud589\ub428\nresult1 = await cached_mono.subscribe()\nawait asyncio.sleep(1)\nresult2 = await cached_mono.subscribe()\n\nprint(result1 == result2)  # True\n\n# share - \uc5ec\ub7ec \uad6c\ub3c5\uc790 \uac04 \uacf5\uc720\nshared_mono = (\n    Mono.from_callable(lambda: print(\"Expensive operation\") or \"result\")\n    .share()\n)\n\n# \ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec \uad6c\ub3c5\uc790\uac00 \uc788\uc5b4\ub3c4 \ud55c \ubc88\ub9cc \uc2e4\ud589\nawait asyncio.gather(\n    shared_mono.subscribe(),\n    shared_mono.subscribe(),\n    shared_mono.subscribe()\n)\n# \"Expensive operation\"\uc740 \ud55c \ubc88\ub9cc \ucd9c\ub825\ub428\n</code></pre>"},{"location":"api/reactive/mono/#_6","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Flux API - \ub2e4\uc911 \uac12 \ubc18\uc751\ud615 \uc2a4\ud2b8\ub9bc</li> <li>\ubc18\uc751\ud615 \ud504\ub85c\uadf8\ub798\ubc0d - \ubc18\uc751\ud615 \ud328\ud134 \uac1c\ub150</li> <li>\ube44\ub3d9\uae30 \ucc98\ub9ac - \ud568\uc218\ud615 \ubc18\uc751\ud615 \uc720\ud2f8\ub9ac\ud2f0</li> </ul>"},{"location":"core/annotations/","title":"Annotations System","text":"<p>RFS Framework \uc5b4\ub178\ud14c\uc774\uc158 \uc2dc\uc2a4\ud15c \ubc0f \ub370\ucf54\ub808\uc774\ud130 \uac00\uc774\ub4dc.</p>"},{"location":"core/annotations/#_1","title":"\uc5b4\ub178\ud14c\uc774\uc158 \uac1c\uc694","text":"<p>\uc5b4\ub178\ud14c\uc774\uc158 \uc2dc\uc2a4\ud15c\uc740 \ucf54\ub4dc\uc5d0 \uba54\ud0c0\ub370\uc774\ud130\ub97c \ucd94\uac00\ud558\uc5ec \uae30\ub2a5\uc744 \ud655\uc7a5\ud558\uace0 \uc790\ub3d9\ud654\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.</p>"},{"location":"core/annotations/#_2","title":"\uc9c0\uc6d0\ub418\ub294 \uc5b4\ub178\ud14c\uc774\uc158","text":"<ul> <li><code>@service</code>: \uc11c\ube44\uc2a4 \ucef4\ud3ec\ub10c\ud2b8 \ub4f1\ub85d</li> <li><code>@repository</code>: \ub370\uc774\ud130 \uc561\uc138\uc2a4 \uacc4\uce35</li> <li><code>@component</code>: \uc77c\ubc18 \ucef4\ud3ec\ub10c\ud2b8</li> <li><code>@configuration</code>: \uc124\uc815 \ud074\ub798\uc2a4</li> <li><code>@autowired</code>: \uc758\uc874\uc131 \uc8fc\uc785</li> </ul>"},{"location":"core/annotations/#_3","title":"\uae30\ubcf8 \uc0ac\uc6a9\ubc95","text":""},{"location":"core/annotations/#_4","title":"\uc11c\ube44\uc2a4 \ub4f1\ub85d","text":"<pre><code>from rfs.core.annotations import service\nfrom rfs.core.result import Result\n\n@service\nclass UserService:\n    def create_user(self, name: str, email: str) -&gt; Result[dict, str]:\n        # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n        return Success({\"id\": 1, \"name\": name, \"email\": email})\n</code></pre>"},{"location":"core/annotations/#_5","title":"\ub808\ud3ec\uc9c0\ud1a0\ub9ac \ud328\ud134","text":"<pre><code>from rfs.core.annotations import repository\nfrom typing import List, Optional\n\n@repository\nclass UserRepository:\n    def find_by_id(self, user_id: int) -&gt; Optional[dict]:\n        # \ub370\uc774\ud130 \uc561\uc138\uc2a4 \ub85c\uc9c1\n        pass\n\n    def find_all(self) -&gt; List[dict]:\n        # \ubaa8\ub4e0 \uc0ac\uc6a9\uc790 \uc870\ud68c\n        pass\n</code></pre>"},{"location":"core/annotations/#_6","title":"\uc758\uc874\uc131 \uc8fc\uc785","text":"<pre><code>from rfs.core.annotations import service, autowired\nfrom rfs.core.registry import Registry\n\n@service\nclass OrderService:\n    @autowired\n    def __init__(self, user_service: UserService):\n        self.user_service = user_service\n\n    def create_order(self, user_id: int, items: List[str]):\n        # \uc8fc\ubb38 \uc0dd\uc131 \ub85c\uc9c1\n        pass\n</code></pre>"},{"location":"core/annotations/#_7","title":"\uace0\uae09 \uae30\ub2a5","text":""},{"location":"core/annotations/#_8","title":"\uc2a4\ucf54\ud504 \uc124\uc815","text":"<pre><code>from rfs.core.annotations import service, Scope\n\n# \uc2f1\uae00\ud1a4 \uc2a4\ucf54\ud504\n@service(scope=Scope.SINGLETON)\nclass ConfigService:\n    def __init__(self):\n        self.config = self._load_config()\n\n# \ud504\ub85c\ud1a0\ud0c0\uc785 \uc2a4\ucf54\ud504\n@service(scope=Scope.PROTOTYPE)\nclass RequestHandler:\n    def handle(self, request):\n        # \uc694\uccad\ubcc4\ub85c \uc0c8 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\n        pass\n</code></pre>"},{"location":"core/annotations/#_9","title":"\uc870\uac74\ubd80 \ube48 \ub4f1\ub85d","text":"<pre><code>from rfs.core.annotations import conditional\n\n@service\n@conditional(lambda: os.getenv(\"ENABLE_CACHE\") == \"true\")\nclass CacheService:\n    \"\"\"ENABLE_CACHE \ud658\uacbd\ubcc0\uc218\uac00 true\uc77c \ub54c\ub9cc \ub4f1\ub85d\"\"\"\n    pass\n</code></pre>"},{"location":"core/annotations/#_10","title":"\uc5b4\ub178\ud14c\uc774\uc158 \ucc98\ub9ac\uae30","text":""},{"location":"core/annotations/#_11","title":"\ucee4\uc2a4\ud140 \uc5b4\ub178\ud14c\uc774\uc158 \uc0dd\uc131","text":"<pre><code>from rfs.core.annotations.base import BaseAnnotation\nfrom typing import Type, Any\n\nclass cache(BaseAnnotation):\n    \"\"\"...\ub85c\uadf8 \uc5b4\ub178\ud14c\uc774\uc158\"\"\"\n\n    def __init__(self, ttl: int = 3600):\n        self.ttl = ttl\n\n    def process(self, target: Type[Any]) -&gt; Type[Any]:\n        # \uce90\uc2f1 \ub85c\uc9c1 \uc801\uc6a9\n        original_methods = {}\n        for name, method in inspect.getmembers(target, inspect.isfunction):\n            original_methods[name] = method\n            setattr(target, name, self._wrap_with_cache(method))\n        return target\n\n    def _wrap_with_cache(self, method):\n        def wrapper(*args, **kwargs):\n            # \uce90\uc2dc \ub85c\uc9c1\n            cache_key = f\"{method.__name__}_{hash((args, tuple(kwargs.items())))}\"\n            if cache_key in self.cache:\n                return self.cache[cache_key]\n\n            result = method(*args, **kwargs)\n            self.cache[cache_key] = result\n            return result\n        return wrapper\n\n# \uc0ac\uc6a9 \uc608\uc81c\n@service\nclass DataService:\n    @cache(ttl=1800)  # 30\ubd84 \uce90\uc2f1\n    def get_expensive_data(self, key: str) -&gt; dict:\n        # \ube44\uc6a9\uc774 \ub192\uc740 \ub370\uc774\ud130 \uc870\ud68c\n        pass\n</code></pre>"},{"location":"core/annotations/#_12","title":"\ub808\uc9c0\uc2a4\ud2b8\ub9ac \uc5f0\ub3d9","text":"<p>\uc5b4\ub178\ud14c\uc774\uc158 \uc2dc\uc2a4\ud15c\uc740 \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc640 \uae34\ubc00\ud558\uac8c \uc5f0\ub3d9\ub418\uc5b4 \uc758\uc874\uc131 \uc8fc\uc785\uc744 \uc790\ub3d9\ud654\ud569\ub2c8\ub2e4.</p> <pre><code>from rfs.core.registry import get_registry\nfrom rfs.core.annotations import scan_components\n\n# \ucef4\ud3ec\ub10c\ud2b8 \uc2a4\uce94\nscan_components(\"myapp.services\")  # \ud328\ud0a4\uc9c0 \uc2a4\uce94\n\n# \ube48 \uc0ac\uc6a9\nregistry = get_registry()\nuser_service = registry.get(UserService)\n</code></pre>"},{"location":"core/annotations/#_13","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Registry - \uc758\uc874\uc131 \uc8fc\uc785 \ub808\uc9c0\uc2a4\ud2b8\ub9ac</li> <li>Dependency Injection - \uc758\uc874\uc131 \uc8fc\uc785 \uac00\uc774\ub4dc</li> <li>Configuration - \uc124\uc815 \uc5b4\ub178\ud14c\uc774\uc158</li> </ul>"}]}