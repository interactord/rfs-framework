{
  "$schema": "https://context7.com/schema/context7.json",
  "projectTitle": "RFS Framework (Reactive Functional Serverless)",
  "description": "Enterprise-Grade Python Framework with functional programming patterns, hexagonal architecture, reactive streams, production deployment strategies, comprehensive security features, and complete Korean documentation",
  "version": "4.3.0",
  "language": "python",
  "packageName": "rfs-framework",
  "repository": "https://github.com/interactord/rfs-framework",
  "homepage": "https://pypi.org/project/rfs-framework/",
  "folders": [
    "src/rfs/",
    "examples/",
    "docs/",
    "wiki/",
    "README.md",
    "API_REFERENCE.md"
  ],
  "excludeFolders": [
    "dist/",
    "build/",
    "__pycache__/",
    ".git/",
    ".github/",
    "test_env/",
    "*.egg-info/"
  ],
  "fileExtensions": [
    ".py",
    ".md",
    ".txt",
    ".toml"
  ],
  "keywords": [
    "reactive",
    "functional",
    "serverless",
    "flux",
    "mono",
    "result",
    "either",
    "maybe",
    "spring reactor",
    "railway oriented programming",
    "hexagonal architecture",
    "dependency injection",
    "cloud run",
    "google cloud",
    "state machine",
    "event sourcing",
    "cqrs",
    "saga pattern",
    "blue-green deployment",
    "canary deployment",
    "circuit breaker",
    "load balancing",
    "rbac",
    "abac",
    "security",
    "monitoring",
    "performance",
    "rollback",
    "korean documentation"
  ],
  "rules": [
    "Install using: pip install rfs-framework",
    "Import from rfs module: from rfs import Result, Success, Failure, Flux, Mono",
    "Use Result pattern for safe error handling instead of exceptions",
    "Use Flux for 0-N async stream processing, Mono for 0-1 async values",
    "Follow Railway Oriented Programming principles with bind() and map()",
    "Use hexagonal architecture: Port (interface) → Adapter (implementation) → UseCase (business logic) → Controller (presentation)",
    "Apply @inject decorator for dependency injection and register services with appropriate scopes",
    "Use @Port, @Adapter, @UseCase, @Controller annotations for clean architecture",
    "Implement security with @RequiresRole, @RequiresPermission, @RequiresAuthentication decorators",
    "Apply performance monitoring with @PerformanceMonitored and @Cached decorators",
    "Use deployment strategies: DeploymentType.BLUE_GREEN, CANARY, ROLLING for production",
    "Create checkpoints before deployments with RollbackManager for safe rollback",
    "Implement circuit breaker pattern for external service calls",
    "Use LoadBalancer with algorithms like ROUND_ROBIN, CONSISTENT_HASH",
    "Apply comprehensive logging with @AuditLogged, @LoggedOperation for security events",
    "Follow Korean documentation standards in wiki/ directory",
    "Leverage CloudRunOptimizer for serverless optimizations",
    "Use EventBus for event-driven architecture patterns",
    "Implement Saga pattern for distributed transactions"
  ],
  "codeExamples": {
    "basicUsage": "from rfs import Result, Success, Failure\n\ndef divide(a: int, b: int) -> Result[float, str]:\n    if b == 0:\n        return Failure('Division by zero')\n    return Success(a / b)\n\nresult = divide(10, 2)\nif result.is_success:\n    print(f'Result: {result.unwrap()}')",
    "hexagonalArchitecture": "from rfs.core.annotations import Port, Adapter, UseCase, Controller\n\n@Port(name='user_repository')\nclass UserRepository(ABC):\n    @abstractmethod\n    async def find_by_id(self, user_id: str) -> Result[User, str]:\n        pass\n\n@Adapter(port='user_repository')\nclass PostgresUserRepository(UserRepository):\n    async def find_by_id(self, user_id: str) -> Result[User, str]:\n        # Implementation\n        pass\n\n@UseCase(dependencies=['user_repository'])\nclass GetUserUseCase:\n    def __init__(self, user_repository: UserRepository):\n        self.repo = user_repository",
    "reactiveStreams": "from rfs.reactive import Flux, Mono\nimport asyncio\n\nasync def process_stream():\n    result = await (\n        Flux.from_iterable([1, 2, 3, 4, 5])\n        .parallel(parallelism=4)\n        .map(lambda x: x * 2)\n        .filter(lambda x: x > 5)\n        .collect_list()\n    )\n    return result\n\nasyncio.run(process_stream())",
    "securityAndAccessControl": "from rfs.security.access_control import RequiresRole, RequiresPermission, RequiresAuthentication\nfrom rfs.security.validation_decorators import ValidateInput, RateLimited\n\n@Controller(route='/api/admin')\nclass AdminController:\n    @RequiresAuthentication()\n    @RequiresRole(UserRole.ADMIN)\n    @RateLimited(max_calls=10, period=timedelta(minutes=1))\n    @ValidateInput({'action': {'type': 'string', 'required': True}})\n    async def admin_action(self, request_data: dict) -> dict:\n        return await self.admin_service.execute_action(request_data)",
    "deploymentStrategies": "from rfs.production.strategies import DeploymentStrategyFactory, DeploymentType, DeploymentConfig\nfrom rfs.production.rollback import RollbackManager\n\n# Blue-Green deployment\nconfig = DeploymentConfig(\n    deployment_type=DeploymentType.BLUE_GREEN,\n    auto_rollback=True,\n    rollback_on_error_rate=0.05\n)\n\nstrategy = DeploymentStrategyFactory.create(DeploymentType.BLUE_GREEN, config)\nresult = await strategy.deploy('api-service', 'v2.0.0')",
    "circuitBreakerAndLoadBalancing": "from rfs.service_discovery.circuit_breaker import CircuitBreaker, CircuitBreakerConfig\nfrom rfs.service_discovery.load_balancer import LoadBalancer, LoadBalancingAlgorithm\n\n# Circuit breaker for external services\ncircuit_breaker = CircuitBreaker(\n    CircuitBreakerConfig(\n        failure_threshold=5,\n        recovery_timeout=30,\n        expected_exception=Exception\n    )\n)\n\n# Load balancer with consistent hashing\nload_balancer = LoadBalancer(\n    algorithm=LoadBalancingAlgorithm.CONSISTENT_HASH,\n    health_check_enabled=True\n)\nload_balancer.add_service('payment-service', 'http://payment-1:8080')",
    "monitoringAndPerformance": "from rfs.monitoring.performance_decorators import PerformanceMonitored, Cached\nfrom rfs.core.logging_decorators import AuditLogged, LoggedOperation\n\nclass PaymentService:\n    @PerformanceMonitored('payment_processing')\n    @Cached(ttl=300)\n    @AuditLogged('payment_processed')\n    async def process_payment(self, amount: float) -> Result[dict, str]:\n        # Payment processing logic\n        pass"
  },
  "documentation": {
    "gettingStarted": "https://github.com/interactord/rfs-framework#quick-start",
    "apiReference": "https://github.com/interactord/rfs-framework/blob/main/API_REFERENCE.md",
    "examples": "https://github.com/interactord/rfs-framework/tree/main/examples",
    "wiki": "https://github.com/interactord/rfs-framework/tree/main/wiki",
    "corePatterns": "https://github.com/interactord/rfs-framework/blob/main/wiki/01-core-patterns.md",
    "dependencyInjection": "https://github.com/interactord/rfs-framework/blob/main/wiki/02-dependency-injection.md",
    "deploymentStrategies": "https://github.com/interactord/rfs-framework/blob/main/wiki/05-deployment.md",
    "security": "https://github.com/interactord/rfs-framework/blob/main/wiki/11-security.md",
    "changelog": "https://github.com/interactord/rfs-framework/blob/main/CHANGELOG.md"
  },
  "features": [
    {
      "name": "Result Pattern",
      "description": "Railway Oriented Programming for safe error handling without exceptions"
    },
    {
      "name": "Hexagonal Architecture",
      "description": "Clean architecture with Port-Adapter pattern, dependency injection, and annotation-based configuration"
    },
    {
      "name": "Reactive Streams",
      "description": "Spring Reactor-inspired Flux/Mono for async stream processing with parallel operations"
    },
    {
      "name": "Production Deployment",
      "description": "Blue-Green, Canary, and Rolling deployment strategies with automatic rollback"
    },
    {
      "name": "Security & Access Control",
      "description": "RBAC/ABAC with JWT authentication, input validation, and comprehensive security scanning"
    },
    {
      "name": "Circuit Breaker & Load Balancing",
      "description": "Fault tolerance with circuit breaker pattern and multiple load balancing algorithms"
    },
    {
      "name": "Performance Monitoring",
      "description": "Comprehensive metrics collection, caching, and performance optimization"
    },
    {
      "name": "Audit Logging",
      "description": "Security event logging, transaction management, and compliance tracking"
    },
    {
      "name": "State Machine",
      "description": "Functional and class-based state machines with transitions"
    },
    {
      "name": "Event Sourcing",
      "description": "Event-driven architecture with EventBus, CQRS, and Saga patterns"
    },
    {
      "name": "Serverless Optimization",
      "description": "Google Cloud Run and Cloud Tasks optimization with cold start detection"
    },
    {
      "name": "Korean Documentation",
      "description": "Complete Korean technical documentation with examples and best practices"
    }
  ],
  "dependencies": {
    "required": [
      "pydantic>=2.5.0",
      "typing-extensions>=4.8.0",
      "python-dotenv>=1.0.0",
      "rich>=13.7.0"
    ],
    "optional": {
      "cloud": [
        "google-cloud-run>=0.10.0",
        "google-cloud-tasks>=2.15.0",
        "google-cloud-monitoring>=2.16.0"
      ],
      "web": [
        "fastapi>=0.104.0",
        "uvicorn[standard]>=0.24.0"
      ],
      "database": [
        "sqlalchemy>=2.0.23",
        "asyncpg>=0.29.0",
        "redis>=5.0.1"
      ]
    }
  },
  "compatibility": {
    "python": ">=3.10",
    "platforms": ["Linux", "macOS", "Windows"],
    "frameworks": ["FastAPI", "Flask", "Django", "Google Cloud Functions", "AWS Lambda"]
  },
  "tags": [
    "framework",
    "reactive-programming",
    "functional-programming",
    "hexagonal-architecture",
    "dependency-injection",
    "serverless",
    "cloud-native",
    "async",
    "microservices",
    "enterprise",
    "result-pattern",
    "monad",
    "spring-reactor",
    "railway-oriented-programming",
    "blue-green-deployment",
    "canary-deployment",
    "circuit-breaker",
    "load-balancing",
    "security",
    "rbac",
    "abac",
    "monitoring",
    "performance",
    "logging",
    "rollback",
    "korean-documentation"
  ],
  "maintainers": [
    {
      "name": "RFS Framework Team",
      "email": "team@rfs-framework.dev"
    }
  ],
  "lastUpdated": "2024-08-23",
  "context7": {
    "priority": "high",
    "updateFrequency": "weekly",
    "includeExamples": true,
    "includeTests": false,
    "parseDocstrings": true,
    "generateTypeHints": true
  }
}